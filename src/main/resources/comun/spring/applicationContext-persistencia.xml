<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">
<!--
		Configuración del sessionFactory, obtiene la ubicación de los hbm's del
		classpath.
-->   
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mappingDirectoryLocations">
			<list>
          		<value>classpath:comun/hibernate/modelo</value>
          		<value>classpath:comun/hibernate/queries</value>
          		<value>classpath:sb05/hibernate/queries</value>
				<value>classpath:sb07/hibernate/queries</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.provider_class">
                    org.hibernate.cache.EhCacheProvider
                </prop>
                <prop key="net.sf.ehcache.configurationResourceName">
                    ehcache.xml
                </prop>
			</props>
		</property>
	</bean>
	
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="sessionFactory">
            <ref bean="sessionFactory" />
        </property>
    </bean>
	
<!--	
		Configuración del transactionManager para Hibernate3, es utilizado por
		Spring AOP para las transacciones.
-->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

<!--
		Advice que define la semántica de transacciones para la capa Service.
		Los métodos que inician con 'get' y 'find' son marcados como readonly
		para optimizar la performance. Todos los demás métodos son transaccionales
		y siguen la semántica por defecto: propagation=required, isolation=default
-->
	<tx:advice id="txServiceAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="count*" read-only="true" />
			<tx:method name="exist*" read-only="true" />
			<tx:method name="*" rollback-for="GadirServiceException"/>
		</tx:attributes>
	</tx:advice>

<!--
		Configuración del Pointcut y el Advisor para las transacciones de la
		capa de negocio. Todos los métodos que se encuentren en el paquete 'service'
		de cualquier módulo y cuya interfaz termine en '..BoImpl' son
		transaccionales.
-->
	<aop:config>
		<!-- Servicios comunes -->
		<aop:pointcut id="aopComunServicePointcut"
			expression="execution(* es.dipucadiz.etir.comun.bo.*.*(..))" />
		<!-- Modulos -->
		<aop:pointcut id="aopServicePointcut"
			expression="execution(* es.dipucadiz.etir.*.*.bo.*.*(..))" />
			
		<aop:advisor id="aopComunServiceAdvisor" advice-ref="txServiceAdvice"
			pointcut-ref="aopComunServicePointcut" />
		<aop:advisor id="aopServiceAdvisor" advice-ref="txServiceAdvice"
			pointcut-ref="aopServicePointcut" />
	</aop:config>
</beans>
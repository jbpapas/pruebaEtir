package es.dipucadiz.etir.comun.action;

import java.io.FileInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.text.Normalizer;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.acegisecurity.Authentication;
import org.acegisecurity.context.SecurityContext;
import org.acegisecurity.context.SecurityContextHolder;
import org.acegisecurity.context.SecurityContextImpl;
import org.acegisecurity.providers.UsernamePasswordAuthenticationToken;
import org.acegisecurity.providers.dao.DaoAuthenticationProvider;
import org.apache.commons.codec.binary.Base64;
import org.hibernate.FetchMode;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.criterion.Subqueries;
import org.hibernate.lob.ClobImpl;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.viavansi.tramitacion.util.OficinaWSUtil;
import com.viavansi.tramitacion.ws.autogenerated.OficinaWS;
import com.viavansi.tramitacion.ws.autogenerated.SistemaInformacionDTO;

import es.dipucadiz.etir.comun.bo.AcercaPeticionBO;
import es.dipucadiz.etir.comun.bo.CalleBO;
import es.dipucadiz.etir.comun.bo.CalleUbicacionBO;
import es.dipucadiz.etir.comun.bo.CargoSubcargoSeguimientoBO;
import es.dipucadiz.etir.comun.bo.CasillaModeloBO;
import es.dipucadiz.etir.comun.bo.ClienteBO;
import es.dipucadiz.etir.comun.bo.ClienteContactoBO;
import es.dipucadiz.etir.comun.bo.ClienteCuentaBO;
import es.dipucadiz.etir.comun.bo.ClienteRepresentanteBO;
import es.dipucadiz.etir.comun.bo.ConceptoBO;
import es.dipucadiz.etir.comun.bo.CuentaBO;
import es.dipucadiz.etir.comun.bo.DocumentoBO;
import es.dipucadiz.etir.comun.bo.DocumentoCasillaValorBO;
import es.dipucadiz.etir.comun.bo.DocumentoCensoBO;
import es.dipucadiz.etir.comun.bo.DocumentoLiquidacionBO;
import es.dipucadiz.etir.comun.bo.DocumentoSeguimientoBO;
import es.dipucadiz.etir.comun.bo.DomiciliacionBO;
import es.dipucadiz.etir.comun.bo.DomicilioBO;
import es.dipucadiz.etir.comun.bo.DomicilioNotificacionBO;
import es.dipucadiz.etir.comun.bo.FuncionBO;
import es.dipucadiz.etir.comun.bo.GenericBO;
import es.dipucadiz.etir.comun.bo.InformeBO;
import es.dipucadiz.etir.comun.bo.ModeloVersionBO;
import es.dipucadiz.etir.comun.bo.MunicipioBO;
import es.dipucadiz.etir.comun.bo.PlantillaBO;
import es.dipucadiz.etir.comun.bo.PlantillaEtiquetaCampoBO;
import es.dipucadiz.etir.comun.bo.ProcesoAccionBO;
import es.dipucadiz.etir.comun.bo.ProvinciaBO;
import es.dipucadiz.etir.comun.bo.SituacionBO;
import es.dipucadiz.etir.comun.bo.UnidadUrbanaBO;
import es.dipucadiz.etir.comun.boStoredProcedure.ComprobarCuentaClienteBO;
import es.dipucadiz.etir.comun.boStoredProcedure.ComprobarDomicilioBO;
import es.dipucadiz.etir.comun.boStoredProcedure.DeudaBO;
import es.dipucadiz.etir.comun.config.GadirConfig;
import es.dipucadiz.etir.comun.config.ParametrosConfig.ValoresParametrosConfig;
import es.dipucadiz.etir.comun.constants.SituacionConstants;
import es.dipucadiz.etir.comun.dao.DAOConstant;
import es.dipucadiz.etir.comun.dto.AcercaPeticionDTO;
import es.dipucadiz.etir.comun.dto.BonificacionDTO;
import es.dipucadiz.etir.comun.dto.CalleDTO;
import es.dipucadiz.etir.comun.dto.CargoSubcargoSeguimientoDTO;
import es.dipucadiz.etir.comun.dto.CasillaModeloDTO;
import es.dipucadiz.etir.comun.dto.CasillaModeloDTOId;
import es.dipucadiz.etir.comun.dto.CircuitoDTO;
import es.dipucadiz.etir.comun.dto.ClienteContactoDTO;
import es.dipucadiz.etir.comun.dto.ClienteCuentaDTO;
import es.dipucadiz.etir.comun.dto.ClienteCuentaDTOId;
import es.dipucadiz.etir.comun.dto.ClienteDTO;
import es.dipucadiz.etir.comun.dto.ClienteRepresentanteDTO;
import es.dipucadiz.etir.comun.dto.ConceptoDTO;
import es.dipucadiz.etir.comun.dto.CuentaDTO;
import es.dipucadiz.etir.comun.dto.CuentaDTOId;
import es.dipucadiz.etir.comun.dto.DocumentoCasillaValorDTO;
import es.dipucadiz.etir.comun.dto.DocumentoCasillaValorDTOId;
import es.dipucadiz.etir.comun.dto.DocumentoCensoDTO;
import es.dipucadiz.etir.comun.dto.DocumentoDTO;
import es.dipucadiz.etir.comun.dto.DocumentoDTOId;
import es.dipucadiz.etir.comun.dto.DocumentoLiquidacionDTO;
import es.dipucadiz.etir.comun.dto.DocumentoLiquidacionDTOId;
import es.dipucadiz.etir.comun.dto.DocumentoSeguimientoDTO;
import es.dipucadiz.etir.comun.dto.DomiciliacionDTO;
import es.dipucadiz.etir.comun.dto.DomicilioDTO;
import es.dipucadiz.etir.comun.dto.DomicilioNotificacionDTO;
import es.dipucadiz.etir.comun.dto.EjecucionDTO;
import es.dipucadiz.etir.comun.dto.FuncionDTO;
import es.dipucadiz.etir.comun.dto.IncidenciaDTO;
import es.dipucadiz.etir.comun.dto.IncidenciaSituacionDTO;
import es.dipucadiz.etir.comun.dto.InformeDTO;
import es.dipucadiz.etir.comun.dto.ModeloVersionDTOId;
import es.dipucadiz.etir.comun.dto.ModoCobroDTO;
import es.dipucadiz.etir.comun.dto.MunicipioDTO;
import es.dipucadiz.etir.comun.dto.MunicipioDTOId;
import es.dipucadiz.etir.comun.dto.PlantillaEtiquetaCampoDTO;
import es.dipucadiz.etir.comun.dto.SituacionDTO;
import es.dipucadiz.etir.comun.dto.UnidadUrbanaDTO;
import es.dipucadiz.etir.comun.exception.GadirServiceException;
import es.dipucadiz.etir.comun.utilidades.Batch;
import es.dipucadiz.etir.comun.utilidades.BatchConstants;
import es.dipucadiz.etir.comun.utilidades.DatosSesion;
import es.dipucadiz.etir.comun.utilidades.DomiciliacionUtil;
import es.dipucadiz.etir.comun.utilidades.DomicilioUtil;
import es.dipucadiz.etir.comun.utilidades.EstadoSituacionConstants;
import es.dipucadiz.etir.comun.utilidades.FuncionPlsqlUtil;
import es.dipucadiz.etir.comun.utilidades.IncidenciaConstants;
import es.dipucadiz.etir.comun.utilidades.KeyValue;
import es.dipucadiz.etir.comun.utilidades.ModoCobroConstants;
import es.dipucadiz.etir.comun.utilidades.MunicipioConceptoModeloUtil;
import es.dipucadiz.etir.comun.utilidades.TablaGt;
import es.dipucadiz.etir.comun.utilidades.TablaGtConstants;
import es.dipucadiz.etir.comun.utilidades.Utilidades;
import es.dipucadiz.etir.comun.vo.AccesoPlantillaVO;
import es.dipucadiz.etir.comun.vo.DeudaVO;
import es.dipucadiz.etir.comun.vo.ParametrosDatoCorporativoVO;
import es.dipucadiz.etir.sb07.domiciliaciones.action.G7A1.G7A1TributoVO;
import es.dipucadiz.etir.sb07.tributos.action.G743MantenimientoDocumentos.G743DocumentoDetalleAction;

final public class WebserviceAction extends AbstractGadirBaseAction {

	private static final long serialVersionUID = 1597531504828280531L;

	public static final String CO_USUARIO_SUBSEDE = "subsede";
	public static final String CO_USUARIO_SUBSEDE_PWD = "subsede";

	final static String NIF_INEXISTENTE = "01";
	final static String NOMBRE_CLIENTE_NO_COINCIDE = "02";
	final static String ZONA_INCORRECTA = "03";
	final static String ERROR_ACTUALIZACION_DOM_FISCAL = "04";
	final static String EXISTEN_DOMICILIACIONES_PENDIENTES = "05";
	final static String NIF_CLIENTE_VACIO = "11";
	final static String CLIENTE_INACTIVO = "12";
	final static String NIF_DUPLICADO = "13";
	final static String NOMBRE_CLIENTE_VACIO = "14";
	final static String DOMICILIO_INCORRECTO = "15";
	final static String ERROR_VALIDACIONES_CLIENTE = "16";
	final static String ERROR_ALTA_CLIENTE = "17";
	final static String ERROR_ALTA_DOMICILIO = "18";
	final static String MUNICIPIO_INCORRECTO = "19";
	final static String CONCEPTO_INCORRECTO = "20";
	final static String TIPO_BONIF_INCORRECTO = "21";
	final static String ERROR_ALTA_BONIF = "22";
	final static String NO_ALTA_TODAS_BONIF = "23";
	final static String ERROR_DATOS = "24";
	final static String DOM_FISCAL_CLIENTE_INCORRECTO = "25";
	final static String ERROR_ALTA_DOM_NOTIFICACION = "26";
	final static String NO_ALTA_DOM_NOTIF_TODOS_CONCEPTOS = "27";
	final static String CLIENTE_SIN_FISCAL = "28";
	final static String FORMATO_CUENTA_INCORRECTO = "29";
	final static String DIGITO_CONTROL_INCORRECTO = "30";
	final static String DOCUMENTO_INCORRECTO = "31";
	final static String DOMICILIACION_YA_EXISTE = "32";
	final static String PETICION_NO_HABILITADA = "98";
	final static String ERROR_1101_466 = "99";
	final static String ERROR_IMPRESION_DIPTICO = "33";

	private String parametro;
	private String xmlPeticion;
	private String xmlRespuesta;

	private ClienteBO clienteBO;
	private DomicilioBO domicilioBO;
	private DomicilioNotificacionBO domicilioNotificacionBO;
	private UnidadUrbanaBO unidadUrbanaBO;
	private CalleBO calleBO;
	private MunicipioBO municipioBO;
	private ConceptoBO conceptoBO;
	private DocumentoCensoBO documentoCensoBO;
	private DocumentoBO documentoBO;
	private GenericBO<BonificacionDTO, Long> bonificacionBO;
	private CalleUbicacionBO calleUbicacionBO;
	private ProvinciaBO provinciaBO;
	private ComprobarDomicilioBO comprobarDomicilioBO;
	private ModeloVersionBO modeloVersionBO;
	private AcercaPeticionBO acercaPeticionBO;
	private DocumentoLiquidacionBO documentoLiquidacionBO;
	private DomiciliacionBO domiciliacionBO;
	private ClienteCuentaBO clienteCuentaBO;
	private CuentaBO cuentaBO;
	private ComprobarCuentaClienteBO comprobarCuentaClienteBO;
	private CargoSubcargoSeguimientoBO cargoSubcargoSeguimientoBO;
	private DocumentoSeguimientoBO documentoSeguimientoBO;
	private SituacionBO situacionBO;
	private PlantillaBO plantillaBO;
	private PlantillaEtiquetaCampoBO plantillaEtiquetaCampoBO;
	private ProcesoAccionBO procesoAccionBO;
	private CasillaModeloBO casillaModeloBO;
	private DocumentoCasillaValorBO documentoCasillaValorBO;
	private FuncionBO funcionBO;
	private ClienteRepresentanteBO clienteRepresentanteBO;
	private GenericBO<CircuitoDTO, String> circuitoBO;

	String codigoProcedimiento;
	String codigoOperacion;
	String prefijo;
	String usuario;
	String contrasena;

	public String execute() {
		DaoAuthenticationProvider daoAuthenticationProvider = (DaoAuthenticationProvider) GadirConfig.getBean("daoAuthenticationProvider");
		Authentication auth = new UsernamePasswordAuthenticationToken(CO_USUARIO_SUBSEDE, CO_USUARIO_SUBSEDE_PWD);
		Authentication result = daoAuthenticationProvider.authenticate(auth);
		SecurityContext ctx = new SecurityContextImpl();
		ctx.setAuthentication(result);
		SecurityContextHolder.setContext(ctx);

		xmlRespuesta = "";

		//lees el proc que tienes q ejecutar y
		//llamar a cada metodito que hace eli

		boolean reconocido = false;

		String descodificado1 = "";
		String descodificado2 = "";
		String descodificado3 = "";

		Document doc = null;
		AcercaPeticionDTO acercaPeticion = new AcercaPeticionDTO();
		String codigoError = "";

		try {
			//		xmlPeticion = 
			//			"<wsdo1>"+
			//			     "<datosPantallaAlta/>"+
			//			     "<datosExpediente>"+
			//			          "<contribuyenteRepresentante>"+
			//			               "<nifContribuyente>48971339S</nifContribuyente>"+
			//			               "<nombreContribuyente>LEIVA RUIZ ELISA MARÍA</nombreContribuyente>"+
			//			               "<provinciaNot>11</provinciaNot>"+
			//							"<municipioNot>031</municipioNot>"+
			//							"<codigoPostal>11100</codigoPostal>"+
			//							"<siglaVia>CL</siglaVia>"+
			//							"<nombreVia>ALMIRANTE LEON HERRERO</nombreVia>"+
			//							"<nucleoUrbano></nucleoUrbano>"+
			//							"<num>8</num>"+
			//							"<letra></letra>"+
			//							"<bloque></bloque>"+
			//							"<escalera></escalera>"+
			//							"<planta>2</planta>"+
			//							"<puerta>C</puerta>"+
			//							"<km></km>"+
			//							"<telefono></telefono>"+
			//							"<fax></fax>"+
			//							"<movil></movil>"+
			//							"<email></email>"+
			//							"<cambiosDatosNotificacion>P</cambiosDatosNotificacion>"+
			//			          "</contribuyenteRepresentante>"+			          			         
			//			          "<propiedades>"+
			//			               "<numExpedienteACERCA/>"+
			//			               "<numExpGADIR></numExpGADIR>"+
			//			          "</propiedades>"+
			//			     "</datosExpediente>"+
			//			     "<propiedades>"+
			//			          "<codigoOperacion>02</codigoOperacion>"+
			//			          "<codigoProcedimiento>SMS</codigoProcedimiento>"+
			//			          "<usuario>USUARIO</usuario>"+
			//			          "<contraseña>PASSWORD</contraseña>"+
			//			          "<codigoError>0</codigoError>"+
			//			     "</propiedades>"+
			//			"</wsdo1>";

			//			xmlPeticion = 
			//				"<wsdo1>"+
			//				     "<datosPantallaAlta/>"+
			//				     "<datosExpediente>"+
			//				          "<contribuyenteRepresentante>"+
			//				               "<nifContribuyente>48971339S</nifContribuyente>"+
			//				               "<nombreContribuyente>LEIVA RUIZ ELISA MARÍA</nombreContribuyente>"+
			//				          "</contribuyenteRepresentante>"+
			//				          "<seleccionRecibos>"+
			//				               "<recibosel>"+
			//				                    "<municipio>11016</municipio>"+
			//				                    "<concepto>0101</concepto>"+
			//				                    "<ejercicio/>"+
			//				                    "<periodo/>"+
			//				                    "<numero/>"+
			//				                    "<referenciaObjetoTributaria>03238722</referenciaObjetoTributaria>"+
			//				                    "<referenciaDomiciliacion>300000521417</referenciaDomiciliacion>"+
			//				                    "<cccActualDomiciliacion>21030636160010011348</cccActualDomiciliacion>"+
			//				               "</recibosel>"+
			//				          "</seleccionRecibos>"+
			//				          "<datosTitularCuenta>"+
			//				               "<ccc>20711238180001451031</ccc>"+
			//				          "</datosTitularCuenta>"+
			//				          "<propiedades>"+
			//				               "<numExpedienteACERCA>10573</numExpedienteACERCA>"+
			//				               "<numExpGADIR>-1</numExpGADIR>"+
			//				          "</propiedades>"+
			//				     "</datosExpediente>"+
			//				     "<propiedades>"+
			//				          "<codigoOperacion>06</codigoOperacion>"+
			//				          "<codigoProcedimiento>MDO</codigoProcedimiento>"+
			//				          "<usuario>USUARIO</usuario>"+
			//				          "<contraseña>PASSWORD</contraseña>"+
			//				          "<codigoError>0</codigoError>"+
			//				     "</propiedades>"+
			//				"</wsdo1>";

			//			xmlPeticion="<wsdo1>"+
			//			     "<datosPantallaAlta/>"+
			//			     "<datosExpediente>"+
			//			          "<contribuyenteRepresentante>"+
			//			               "<nifContribuyente>48971339S</nifContribuyente>"+
			//			               "<nombreContribuyente>LEIVA RUIZ ELISA MARÍA</nombreContribuyente>"+
			//			          "</contribuyenteRepresentante>"+
			//			          "<seleccionRecibos>"+
			//			               "<recibosel>"+
			//			                    "<municipio>11008</municipio>"+
			//			                    "<concepto>0101</concepto>"+
			//			                    "<ejercicio>2010</ejercicio>"+
			//			                    "<periodo>0A</periodo>"+
			//			                    "<numero>201 1 015278995</numero>"+
			//			                    "<referenciaObjetoTributaria>04189857</referenciaObjetoTributaria>"+
			//			                    "<referenciaDomiciliacion/>"+
			//			               "</recibosel>"+
			//			          "</seleccionRecibos>"+
			//			          "<datosTitularCuenta>"+
			//			               "<ccc>20711238180001451031</ccc>"+
			//			          "</datosTitularCuenta>"+
			//			          "<propiedades>"+
			//			               "<numExpedienteACERCA>10579</numExpedienteACERCA>"+
			//			               "<numExpGADIR>-1</numExpGADIR>"+
			//			          "</propiedades>"+
			//			     "</datosExpediente>"+
			//			     "<propiedades>"+
			//			          "<codigoOperacion>06</codigoOperacion>"+
			//			          "<codigoProcedimiento>ADO</codigoProcedimiento>"+
			//			          "<usuario>USUARIO</usuario>"+
			//			          "<contraseña>PASSWORD</contraseña>"+
			//			          "<codigoError>0</codigoError>"+
			//			     "</propiedades>"+
			//			"</wsdo1>";

			/*String[] descodificados = {

					"<wsini>"+
						"<propiedades>"+
							"<codigoOperacion>01</codigoOperacion>"+
							"<codigoProcedimiento>INI</codigoProcedimiento>"+
							"<usuario>eleivar</usuario>"+
							"<contraseña>eleivar</contraseña>"+
						"</propiedades>"+
						"<datosCertificado>"+
							"<nifCertificado>75784699K</nifCertificado>"+
							"<nombreCertificado>VERA VELAZQUEZ ASCENSION</nombreCertificado>"+
						"</datosCertificado>"+
					"</wsini>",



					"<wsini>"+
						"<propiedades>"+
							"<codigoOperacion>01</codigoOperacion>"+
							"<codigoProcedimiento>INI</codigoProcedimiento>"+
							"<usuario>eleivar</usuario>"+
							"<contraseña>eleivar</contraseña>"+
						"</propiedades>"+
						"<datosCertificado>"+
							"<nifCertificado>75784699A</nifCertificado>"+
							"<nombreCertificado>VERA VELAZQUEZ ASCENSION</nombreCertificado>"+
						"</datosCertificado>"+
					"</wsini>",




					"<wsini>"+
						"<propiedades>"+
							"<codigoOperacion>01</codigoOperacion>"+
							"<codigoProcedimiento>INI</codigoProcedimiento>"+
							"<usuario>eleivar</usuario>"+
							"<contraseña>eleivar</contraseña>"+
						"</propiedades>"+
						"<datosCertificado>"+
							"<nifCertificado>75784699K</nifCertificado>"+
							"<nombreCertificado>VERA VELAZQUEZ</nombreCertificado>"+
						"</datosCertificado>"+
					"</wsini>",






					"<wsrep>"+
						"<propiedades>"+
							"<codigoOperacion>02</codigoOperacion>"+
							"<codigoProcedimiento>REP</codigoProcedimiento>"+
							"<usuario>eleivar</usuario>"+
							"<contraseña>eleivar</contraseña>"+
						"</propiedades>"+
						"<datosExpediente>"+
							"<datosInteresado>"+
								"<nifInteresado>48971339S</nifInteresado>"+
								"<nombreInteresado>LEIVA RUIZ ELISA</nombreInteresado>"+
							"</datosInteresado>"+
							"<propiedades>"+
								"<numExpedienteACERCA>0974598</numExpedienteACERCA>"+
								"<numExpGADIR>1245</numExpGADIR>"+
							"</propiedades>"+
						"</datosExpediente>"+
					"</wsrep>",




					"<wsrep>"+
						"<propiedades>"+
							"<codigoOperacion>03</codigoOperacion>"+
							"<codigoProcedimiento>REP</codigoProcedimiento>"+
							"<usuario>eleivar</usuario>"+
							"<contraseña>eleivar</contraseña>"+
						"</propiedades>"+
						"<datosExpediente>"+
							"<representanteLegal>"+
								"<nifRepresentante>44965478H</nifRepresentante>"+
								"<nombreRepresentante>DELGADO PEREZ PEDRO</nombreRepresentante>"+
								"<esRepresentante></esRepresentante>"+
								"<provinciaNot>11</provinciaNot>"+
								"<municipioNot>027</municipioNot>"+
								"<codigoPostal></codigoPostal>"+
								"<siglaVia>CL</siglaVia>"+
								"<nombreVia>BUGANVILLA</nombreVia>"+
								"<nucleoUrbano></nucleoUrbano>"+
								"<num>1</num>"+
								"<letra></letra>"+
								"<bloque></bloque>"+
								"<escalera></escalera>"+
								"<planta>2</planta>"+
								"<puerta>C</puerta>"+
								"<km></km>"+
								"<telefono></telefono>"+
								"<fax></fax>"+
								"<movil></movil>"+
								"<email></email>"+
								"<cambiosDatosNotificacion></cambiosDatosNotificacion>"+
								"<inscripcionSTL></inscripcionSTL>"+
							"</representanteLegal>"+
							"<datosInteresado>"+
								"<nifInteresado>48971339S</nifInteresado>"+
								"<nombreInteresado>LEIVA RUIZ ELISA</nombreInteresado>"+
							"</datosInteresado>"+
							"<propiedades>"+
								"<numExpedienteCERCA>0974598</numExpedienteCERCA>"+
								"<numExpGADIR>1245</numExpGADIR>"+
							"</propiedades>"+
						"</datosExpediente>"+
					"</wsrep>",


					"<wsbon>"+
						"<propiedades>"+
							"<codigoOperacion>01</codigoOperacion>"+
							"<codigoProcedimiento>BON</codigoProcedimiento>"+
							"<usuario>eleivar</usuario>"+
							"<contraseña>eleivar</contraseña>"+
						"</propiedades>"+
						"<datosPantallaAlta>"+
							"<nifContribuyente>B11292554</nifContribuyente>"+
							"<nombreContribuyente>MUEBLES Y ELECTRODOMESTICOS LOJO SL</nombreContribuyente>"+
							"<municipio>014</municipio>"+
							"<concepto>0101</concepto>"+
						"</datosPantallaAlta>"+				
					"</wsbon>",

					"<wsbon>"+
						"<propiedades>"+
							"<codigoOperacion>03</codigoOperacion>"+
							"<codigoProcedimiento>BON</codigoProcedimiento>"+
							"<usuario>eleivar</usuario>"+
							"<contraseña>eleivar</contraseña>"+
						"</propiedades>"+
						"<datosExpediente>"+
							"<contribuyenteRepresentante>"+
								"<nifContribuyente>B11292554</nifContribuyente>"+
								"<nombreContribuyente>MUEBLES Y ELECTRODOMESTICOS LOJO SL</nombreContribuyente>"+
							"</contribuyenteRepresentante>"+	
							"<seleccionBonificaciones>"+
								"<seleccionBonificacion>"+
									"<municipio>014</municipio>"+
									"<concepto>0101</concepto>"+
									"<referenciaObjetoTributaria>3096312TF2129F0001KP</referenciaObjetoTributaria>"+
									"<tipo>TE</tipo>"+
									"<porcentaje>25</porcentaje>"+									
									"<desde>2000</desde>"+
									"<hasta>2099</hasta>"+
									"<aceptada>1</aceptada>"+
								"</seleccionBonificacion>"+	
							"</seleccionBonificaciones>"+	
							"<propiedades>"+
								"<asd>asd</asd>"+
								"<qwe>qwe</qwe>"+
							"</propiedades>"+	
						"</datosExpediente>"+		
					"</wsbon>",		




					"<wsdo2>"+
						"<propiedades>"+
							"<codigoOperacion>01</codigoOperacion>"+
							"<codigoProcedimiento>CDN</codigoProcedimiento>"+
							"<usuario>eleivar</usuario>"+
							"<contraseña>eleivar</contraseña>"+
						"</propiedades>"+
						"<datosPantallaAlta>"+
							"<nifContribuyente>X7062467H</nifContribuyente>"+
							"<nombreContribuyente>RHAU SABINE</nombreContribuyente>"+
						"</datosPantallaAlta>"+
					"</wsdo2>",




					"<wsdo2>"+
						"<propiedades>"+
							"<codigoOperacion>04</codigoOperacion>"+
							"<codigoProcedimiento>CDF</codigoProcedimiento>"+
							"<usuario>eleivar</usuario>"+
							"<contraseña>eleivar</contraseña>"+
						"</propiedades>"+
						"<datosExpediente>"+
							"<contribuyenteRepresentante>"+
								"<nifContribuyente>48971339S</nifContribuyente>"+
								"<nombreContribuyente>LEIVA RUIZ ELISA MARIA</nombreContribuyente>"+
							"</contribuyenteRepresentante>"+
							"<nuevoDomicilioFiscal>"+
								"<provinciaNotN>11</provinciaNotN>"+
								"<municipioNotN>031</municipioNotN>"+
								"<codigoPostalN></codigoPostalN>"+
								"<siglaViaN>CL</siglaViaN>"+
								"<nombreViaN>JULY VELASCO</nombreViaN>"+
								"<nucleoUrbanoN></nucleoUrbanoN>"+
								"<numN>5</numN>"+
								"<letraN></letraN>"+
								"<bloqueN></bloqueN>"+
								"<escaleraN></escaleraN>"+
								"<plantaN></plantaN>"+
								"<puertaN></puertaN>"+
								"<kmN></kmN>"+
							"</nuevoDomicilioFiscal>"+
							"<propiedades>"+
								"<numExpedienteCERCA>GFGFDGFHH</numExpedienteCERCA>"+
								"<numExpGADIR>1213</numExpGADIR>"+
							"</propiedades>"+
						"</datosExpediente>"+
					"</wsdo2>",




					"<wsdo2>"+
						"<propiedades>"+
							"<codigoOperacion>05</codigoOperacion>"+
							"<codigoProcedimiento>CDN</codigoProcedimiento>"+
							"<usuario>eleivar</usuario>"+
							"<contraseña>eleivar</contraseña>"+
						"</propiedades>"+
						"<datosExpediente>"+
							"<contribuyenteRepresentante>"+
								"<nifContribuyente>75775562S</nifContribuyente>"+
								"<nombreContribuyente>BENITA CRESPO JAVIER</nombreContribuyente>"+
							"</contribuyenteRepresentante>"+
							"<seleccionTributos>"+
								"<seleccionTributo>"+
									"<tributo>0101</tributo>"+
								"</seleccionTributo>"+
								"<seleccionTributo>"+
									"<tributo>0102</tributo>"+
								"</seleccionTributo>"+
							"</seleccionTributos>"+
							"<domicilioNotificacion>"+
								"<provinciaNot>11</provinciaNot>"+
								"<municipioNot>031</municipioNot>"+
								"<codigoPostal></codigoPostal>"+
								"<siglaVia>CL</siglaVia>"+
								"<nombreVia>SAN FEDERICO</nombreVia>"+
								"<nucleoUrbano></nucleoUrbano>"+
								"<num>16</num>"+
								"<letra></letra>"+
								"<bloque></bloque>"+
								"<escalera></escalera>"+
								"<planta>3</planta>"+
								"<puerta>A</puerta>"+
								"<km></km>"+
							"</domicilioNotificacion>"+
							"<propiedades>"+
								"<numExpedienteCERCA>RTRETYHH</numExpedienteCERCA>"+
								"<numExpGADIR>1212</numExpGADIR>"+
							"</propiedades>"+
						"</datosExpediente>"+
					"</wsdo2>",





					"<wsbon>"+
						"<propiedades>"+
							"<codigoOperacion>03</codigoOperacion>"+
							"<codigoProcedimiento>BON</codigoProcedimiento>"+
							"<usuario>eleivar</usuario>"+
							"<contraseña>eleivar</contraseña>"+
						"</propiedades>"+
						"<datosExpediente>"+
							"<contribuyenteRepresentante>"+
								"<nifContribuyente>48971339S</nifContribuyente>"+
								"<nombreContribuyente>LEIVA RUIZ ELISA MARIA</nombreContribuyente>"+
							"</contribuyenteRepresentante>"+
							"<seleccionBonificaciones>"+
								"<seleccionBonificacion>"+
									"<municipio>031</municipio>"+
									"<concepto>0101</concepto>"+
									"<referenciaObjetoTributaria>122349454587</referenciaObjetoTributaria>"+
									"<tipo>SC</tipo>"+
									"<porcentaje>50</porcentaje>"+
									"<desde>2011</desde>"+
									"<hasta>2015</hasta>"+
									"<aceptada></aceptada>"+
								"</seleccionBonificacion>"+
								"<seleccionBonificacion>"+
									"<municipio>031</municipio>"+
									"<concepto>0102</concepto>"+
									"<referenciaObjetoTributaria>4871125475S</referenciaObjetoTributaria>"+
									"<tipo>PI</tipo>"+
									"<porcentaje></porcentaje>"+
									"<desde>2010</desde>"+
									"<hasta>2012</hasta>"+
									"<aceptada></aceptada>"+
								"</seleccionBonificacion>"+
							"</seleccionBonificaciones>"+
							"<propiedades>"+
								"<numExpedienteCERCA>345654654654</numExpedienteCERCA>"+
								"<numExpGADIR>765765765</numExpGADIR>"+
							"</propiedades>"+
						"</datosExpediente>"+
					"</wsbon>"};*/

			/*try{
				if(!Utilidades.isEmpty(parametro) && Utilidades.isNumeric(parametro)){
					descodificado = descodificados[Integer.valueOf(parametro)];
				}
			}catch(Exception e){
				log.error("Error en pruebas", e);
			}*/

			//			System.out.println("@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA");
			//			System.out.println("@CERCA xmlPeticion: " + xmlPeticion);

			//			xmlPeticion = Base64.encodeBase64URLSafeString(xmlPeticion.getBytes());
			descodificado1 = new String(Base64.decodeBase64(xmlPeticion));
			//			descodificado1 = xmlPeticion;
			descodificado2 = new String(Base64.decodeBase64(xmlPeticion), "UTF-8");
			descodificado3 = new String(Base64.decodeBase64(xmlPeticion), "ISO-8859-1");

			//			System.out.println("@CERCA descodificado1: " + descodificado1);
			//System.out.println("@CERCA descodificado2: " + descodificado2);
			//System.out.println("@CERCA descodificado3: " + descodificado3);
			//			System.out.println("@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA");

			try {
				descodificado1 = descodificado1.replaceAll("\n", "").replaceAll("\t", "").replaceAll("> ++", ">");
			} catch (Exception e) {}
			try {
				descodificado2 = descodificado2.replaceAll("\n", "").replaceAll("\t", "").replaceAll("> ++", ">");
			} catch (Exception e) {}
			try {
				descodificado3 = descodificado3.replaceAll("\n", "").replaceAll("\t", "").replaceAll("> ++", ">");
			} catch (Exception e) {}

			//			System.out.println("@CERCA descodificado1: " + descodificado1);
			//System.out.println("@CERCA descodificado2: " + descodificado2);
			//System.out.println("@CERCA descodificado3: " + descodificado3);
			//			System.out.println("@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA");

			DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
			domFactory.setNamespaceAware(true); // never forget this!
			DocumentBuilder builder = domFactory.newDocumentBuilder();
			int i = 0;
			try {
				doc = builder.parse(new InputSource(new StringReader(descodificado1)));
				i = 1;
			} catch (Exception e1) {
				//log.error("error en descodificado1", e1);
				try {
					doc = builder.parse(new InputSource(new StringReader(descodificado2)));
					i = 2;
				} catch (Exception e2) {
					//log.error("error en descodificado2", e2);
					try {
						doc = builder.parse(new InputSource(new StringReader(descodificado3)));
						i = 3;
					} catch (Exception e3) {
						try {
							doc = builder.parse(new InputSource(new StringReader(descodificado2.replace("contrase?a", "contraseña"))));
							i = 4;
						} catch (Exception e4) {
							//							log.error("error en descodificado", e3);
						}
					}
				}
			}

			try {
				switch (i) {
					case 1:
						acercaPeticion.setXmlPeticion(new ClobImpl(descodificado1));
						break;
					case 2:
						acercaPeticion.setXmlPeticion(new ClobImpl(descodificado2));
						break;
					case 3:
						acercaPeticion.setXmlPeticion(new ClobImpl(descodificado3));
						break;
					case 4:
						acercaPeticion.setXmlPeticion(new ClobImpl(descodificado2.replace("contrase?a", "contraseña")));
						break;
					default:
						acercaPeticion.setXmlPeticion(new ClobImpl(xmlPeticion));
						break;
				}

				acercaPeticion.setFechaPeticion(new Date());
				acercaPeticionBO.save(acercaPeticion);
			} catch (Exception e) {}

			XPathFactory factory = XPathFactory.newInstance();
			XPath xpath = factory.newXPath();
			prefijo = doc.getFirstChild().getNodeName();
			codigoProcedimiento = leeTexto("/" + prefijo + "/propiedades/codigoProcedimiento", xpath, doc);
			codigoOperacion = leeTexto("/" + prefijo + "/propiedades/codigoOperacion", xpath, doc);

			usuario = leeTexto("/" + prefijo + "/propiedades/usuario", xpath, doc);
			contrasena = leeTexto("/" + prefijo + "/propiedades/contraseña", xpath, doc);

			try {
				acercaPeticion.setCoProcedimiento(codigoProcedimiento);
				acercaPeticion.setCoOperacion(codigoOperacion);
				if (doc.getElementsByTagName("numExpedienteACERCA").getLength() == 1) acercaPeticion.setCoExpediente(doc.getElementsByTagName("numExpedienteAcerca").item(0).getNodeValue());
				acercaPeticionBO.save(acercaPeticion);
			} catch (Exception e) {}

			if ((codigoProcedimiento.equals("ADO") || codigoProcedimiento.equals("MDO") || codigoProcedimiento.equals("BDO")) && codigoOperacion.equals("01")) {
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSINI") && codigoOperacion.equals("01")) {
				codigoError = wsinicio(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSDO1") && codigoOperacion.equals("01")) {
				codigoError = wsdom1(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSDO1") && codigoOperacion.equals("02")) {
				codigoError = wsdom2(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSDO1") && codigoOperacion.equals("03")) {
				codigoError = wsdom3(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSDO1") && codigoOperacion.equals("04")) {
				codigoError = wsdom4(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSDO1") && codigoOperacion.equals("05")) {
				codigoError = wsdom5(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSDO1") && codigoOperacion.equals("06")) {
				codigoError = wsdom6(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSDO2") && codigoOperacion.equals("01")) {
				codigoError = wsdomic1(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSDO2") && codigoOperacion.equals("04")) {
				codigoError = wsdomic4(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSDO2") && codigoOperacion.equals("05")) {
				codigoError = wsdomic5(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSBON") && codigoOperacion.equals("01")) {
				codigoError = wsbonif1(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSBON") && codigoOperacion.equals("03")) {
				codigoError = wsbonif3(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSREP") && codigoOperacion.equals("02")) {
				codigoError = wsrepre2(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSREP") && codigoOperacion.equals("03")) { //alta
				codigoError = wsrepre3(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSREP") && codigoOperacion.equals("04")) { //consulta
				codigoError = wsrepre4(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSREP") && codigoOperacion.equals("05")) { //baja
				codigoError = wsrepre5(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSREP") && codigoOperacion.equals("06")) { //devuelve las representaciones que tiene un contribuyente sobre otro 
				codigoError = wsrepre6(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSREP") && codigoOperacion.equals("07")) { //devuelve los datos de los representados y los representantes de un contribuyente 
				codigoError = wsrepre7(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSINF") && codigoOperacion.equals("01")) { //lista de recibos
				codigoError = wsinf1(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSINF") && codigoOperacion.equals("05")) { //ind
				codigoError = wsinf5(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSINF") && codigoOperacion.equals("06")) {//irp
				codigoError = wsinf6(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSINF") && codigoOperacion.equals("07")) {//isr
				codigoError = wsinf7(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSDEV") && codigoOperacion.equals("03")) {
				codigoError = wsdev(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSPAG") && codigoOperacion.equals("08")) { //recibos pendientes de pago (red.es)
				codigoError = wspag(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSPAG") && codigoOperacion.equals("09")) { //recibos diptico
				codigoError = wspag2(doc);
				reconocido = true;
			}
			if (prefijo.toUpperCase().equals("WSPAG") && codigoOperacion.equals("10")) { //datos de un recibo para generar díptico
				codigoError = wspag3(doc);
				reconocido = true;
			}

			if (Utilidades.isEmpty(xmlRespuesta) && !Utilidades.isEmpty(codigoError)) {
				Node codigoErrorNode = limpiaCreaElemento("/" + prefijo + "/propiedades/codigoError", xpath, doc);
				codigoErrorNode.setTextContent(codigoError);

				//Convertir XML a String
				TransformerFactory transfac = TransformerFactory.newInstance();
				Transformer trans = transfac.newTransformer();
				StringWriter sw = new StringWriter();
				StreamResult salida = new StreamResult(sw);
				DOMSource fuente = new DOMSource(doc);
				trans.transform(fuente, salida);
				xmlRespuesta = sw.toString();
			}

		} catch (Exception e) {
			//			log.error("Error en webservice", e);
		}

		if (Utilidades.isEmpty(xmlRespuesta)) {
			if (doc != null) {
				xmlRespuesta = "";
				try {
					XPathFactory factory = XPathFactory.newInstance();
					XPath xpath = factory.newXPath();
					Node codigoErrorNode = limpiaCreaElemento("/" + prefijo + "/propiedades/codigoError", xpath, doc);
					codigoErrorNode.setTextContent("24");
					TransformerFactory transfac = TransformerFactory.newInstance();
					Transformer trans = transfac.newTransformer();
					StringWriter sw = new StringWriter();
					StreamResult salida = new StreamResult(sw);
					DOMSource fuente = new DOMSource(doc);
					trans.transform(fuente, salida);
					xmlRespuesta = sw.toString();
				} catch (Exception e) {
					//					log.error("Error en webservice", e);
				}
			} else {
				xmlRespuesta = "";
				xmlRespuesta += "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
				xmlRespuesta += "<error>";
				xmlRespuesta += "<propiedades>";
				xmlRespuesta += "<codigoError>24</codigoError>";
				xmlRespuesta += "</propiedades>";
				xmlRespuesta += "</error>";
			}
			codigoError = "24";
		}

		try {
			acercaPeticion.setCoError(codigoError);
			acercaPeticion.setXmlRespuesta(new ClobImpl(xmlRespuesta));
			acercaPeticion.setFechaRespuesta(new Date());
			acercaPeticionBO.save(acercaPeticion);
		} catch (Exception e) {}

		//		System.out.println("@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA");
		//		System.out.println("@CERCA xmlRespuesta: " + xmlRespuesta);
		//		System.out.println("@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA-@CERCA");

		return "webservice";
	}

	private String leeTexto(String ruta, XPath xpath, Document doc) {
		String resultado = "";
		try {
			XPathExpression expr = xpath.compile(ruta);
			Node result = (Node) expr.evaluate(doc, XPathConstants.NODE);
			resultado = result.getTextContent();
		} catch (Exception e) {
			//			log.error("Error en webservice", e);
		}

		return resultado;
	}

	private static Node limpiaCreaElemento(String ruta, XPath xpath, Document doc) throws XPathExpressionException {

		String nombreElemento = ruta.substring(ruta.lastIndexOf('/') + 1);
		String rutaPadre = ruta.substring(0, ruta.lastIndexOf('/'));

		XPathExpression expr = xpath.compile(ruta);
		Node node = (Node) expr.evaluate(doc, XPathConstants.NODE);
		if (node == null) {
			Element listaRecibosElement = doc.createElement(nombreElemento);

			XPathExpression padreExpr = xpath.compile(rutaPadre);
			Node padreNode = (Node) padreExpr.evaluate(doc, XPathConstants.NODE);

			padreNode.appendChild(listaRecibosElement);
			node = (Node) expr.evaluate(doc, XPathConstants.NODE);
		}

		if (node.hasChildNodes()) {
			NodeList nodeList = node.getChildNodes();
			for (int i = 0; i < nodeList.getLength(); i++) {
				if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
					doc.removeChild(nodeList.item(i));
				}
			}
		}

		node.setTextContent("");
		return node;
	}

	private String traduceSigla(String siglaLarga) {
		String res = "";

		if (siglaLarga != null && !Utilidades.isEmpty(siglaLarga)) {
			res = siglaLarga;
			if (siglaLarga.length() > 2) {
				try {
					List<KeyValue> listaSiglas = TablaGt.getListaCodigoDescripcion(TablaGtConstants.TABLA_TIPO_VIA_PUBLICA);
					for (KeyValue kv : listaSiglas) {
						if (siglaLarga.equalsIgnoreCase(kv.getValue())) {
							return kv.getKey();
						}
					}
				} catch (Exception e) {

				}
			}
		}
		return res;
	}

	private String comprobarCliente(String nif, String nombreCliente) {
		List<ClienteDTO> clientes = new ArrayList<ClienteDTO>();
		ClienteDTO clienteDTO = null;

		try {
			DetachedCriteria dc = DetachedCriteria.forClass(ClienteDTO.class, "clienteAlias");
			dc
					.add(Restrictions
							.sqlRestriction("REGEXP_REPLACE(REGEXP_REPLACE(translate(UPPER(this_.razon_social), 'ÁÉÍÓÚÖÜ', 'AEIOUOU'), '^(DEL |DE LAS |DE LOS |DE LA |DE LO |DE |EL )|( DEL| DE LAS| DE LOS| DE LA| DE LO| DE| EL)$|( DEL | DE LAS | DE LOS | DE LA | DE LO | DE | EL  )', ''), '[.,- ()]+', '') "
											+ "like REGEXP_REPLACE(REGEXP_REPLACE(translate('"
											+ nombreCliente.toUpperCase()
											+ "%', 'ÁÉÍÓÚÖÜ', 'AEIOUOU'), '^(DEL |DE LAS |DE LOS |DE LA |DE LO |DE |EL )|( DEL| DE LAS| DE LOS| DE LA| DE LO| DE| EL)$|( DEL | DE LAS | DE LOS | DE LA | DE LO | DE | EL  )', ''), '[.,- ()]+', '')"));
			dc.add(Restrictions.eq("identificador", nif.toUpperCase()));
			clientes = clienteBO.findByCriteria(dc);

			if (clientes.size() == 1)
				clienteDTO = clientes.get(0);
			else {
				if (clientes.size() == 0) {
					//si viene de sigre hacemos la misma comprobación de antes, pero con las 29 primeras posiciones
					dc = DetachedCriteria.forClass(ClienteDTO.class, "clienteAlias");
					dc.add(Restrictions.sqlRestriction("REGEXP_REPLACE(translate(UPPER(this_.razon_social), 'ÁÉÍÓÚÖÜ', 'AEIOUOU'), '[.,- ]+', '') like substr(REGEXP_REPLACE(translate('"
														+ nombreCliente.toUpperCase() + "%', 'ÁÉÍÓÚÖÜ', 'AEIOUOU'), '[.,- ]+', ''), 1, 29)"));
					dc.add(Restrictions.eq("identificador", nif.toUpperCase()));
					dc.add(Restrictions.eq("procedencia", "SIGR"));

					clientes = clienteBO.findByCriteria(dc);
					if (clientes.size() == 1)
						clienteDTO = clientes.get(0);
					else return NIF_INEXISTENTE;
				}
			}

			if (clienteDTO != null) {
				if (clienteDTO.isBoActivo())
					return clienteDTO.getCoCliente().toString();
				else return CLIENTE_INACTIVO;
			}
		} catch (Exception e) {}

		return NIF_INEXISTENTE;
	}

	private String wsinicio(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega	
		String representados = "";
		String datosNotificacion = "";
		String codigoError = "0";
		NodeList elementos = null;
		//List<ClienteDTO> clientes = new ArrayList<ClienteDTO>();		
		String coCliente = "";

		xmlRespuesta = "";
		xmlRespuesta += "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
		xmlRespuesta += "<wsini>";

		elementos = doc.getElementsByTagName("datosCertificado").item(0).getChildNodes();
		if (elementos.getLength() > 0 && elementos.item(0).getNodeName().equals("nifCertificado")) {
			String nif = elementos.item(0).getTextContent();
			if (!Utilidades.isEmpty(nif)) {
				nif = nif.trim();
				String nombreCliente = "";
				if (elementos.item(1).getNodeName().equals("nombreCertificado")) nombreCliente = elementos.item(1).getTextContent();

				coCliente = comprobarCliente(nif, nombreCliente);
				if (!NIF_INEXISTENTE.equals(coCliente) && !CLIENTE_INACTIVO.equals(coCliente)) {
					// recuperar fiscal
					List<DomicilioDTO> domicilio = domicilioBO.findFiltered(new String[] {"clienteDTO.coCliente", "boFiscalMunicipal"}, new Object[] {Long.parseLong(coCliente), true});
					datosNotificacion += "<datosNotificacion>";
					if (!domicilio.isEmpty()) {
						DomicilioDTO d = domicilio.get(0);
						UnidadUrbanaDTO u = null;
						u = unidadUrbanaBO.findById(d.getUnidadUrbanaDTO().getCoUnidadUrbana());
						CalleDTO c = null;
						if (u != null) c = calleBO.findById(u.getCalleDTO().getCoCalle());
						datosNotificacion += "<domicilio>";
						if (c != null) {
							datosNotificacion += "<provinciaNot>" + c.getMunicipioDTO().getId().getCoProvincia() + "</provinciaNot>";
							datosNotificacion += "<municipioNot>" + c.getMunicipioDTO().getId().getCoMunicipio() + "</municipioNot>";
							datosNotificacion += "<codigoPostal>" + u.getCp().toString() + "</codigoPostal>";
							datosNotificacion += "<siglaVia>" + c.getSigla() + "</siglaVia>";
							datosNotificacion += "<nombreVia>" + c.getNombreCalle() + "</nombreVia>";
							String ubicacion = "";
							if (c.getCalleUbicacionDTO() != null) ubicacion = calleUbicacionBO.findById(c.getCalleUbicacionDTO().getCoCalleUbicacion()).getUbicacion();
							datosNotificacion += "<nucleoUrbano>" + ubicacion + "</nucleoUrbano>";
							datosNotificacion += "<num>" + (Utilidades.isEmpty(u.getNumero()) ? "" : u.getNumero().toString()) + "</num>";
							datosNotificacion += "<letra>" + (Utilidades.isEmpty(u.getLetra()) ? "" : u.getLetra()) + "</letra>";
							datosNotificacion += "<bloque>" + (Utilidades.isEmpty(u.getBloque()) ? "" : u.getBloque()) + "</bloque>";
							datosNotificacion += "<escalera>" + (Utilidades.isEmpty(u.getEscalera()) ? "" : u.getEscalera()) + "</escalera>";
							datosNotificacion += "<planta>" + (Utilidades.isEmpty(u.getPlanta()) ? "" : u.getPlanta()) + "</planta>";
							datosNotificacion += "<puerta>" + (Utilidades.isEmpty(u.getPuerta()) ? "" : u.getPuerta()) + "</puerta>";
							datosNotificacion += "<km>" + (u.getKm() == null ? "" : u.getKm()) + "</km>";
						}
						datosNotificacion += "</domicilio>";

						String telefono = "";
						String fax = "";
						String movil = "";
						String email = "";

						DetachedCriteria criteriaContacto = DetachedCriteria.forClass(ClienteContactoDTO.class);
						criteriaContacto.add(Restrictions.eq("clienteDTO.coCliente", Long.parseLong(coCliente)));
						criteriaContacto.add(Restrictions.eq("boPreferente", true));
						List<ClienteContactoDTO> listaContactos = ((ClienteContactoBO) GadirConfig.getBean("clienteContactoBO")).findByCriteria(criteriaContacto);

						for (ClienteContactoDTO contacto : listaContactos) {
							switch (contacto.getTipo().charAt(0)) {
								case 'E':
									email = contacto.getContacto();
									break;
								case 'M':
									movil = contacto.getContacto();
									break;
								case 'F':
									telefono = contacto.getContacto();
									break;
								case 'X':
									fax = contacto.getContacto();
									break;
							}
						}
						datosNotificacion += "<telefono>" + telefono + "</telefono>";
						datosNotificacion += "<fax>" + fax + "</fax>";
						datosNotificacion += "<movil>" + movil + "</movil>";
						datosNotificacion += "<email>" + email + "</email>";
					}
					datosNotificacion += "</datosNotificacion>";
				} else codigoError = coCliente;

				if (codigoError.equals("0")) {
					// escribir representados
					representados += "<representados>";
					List<ClienteRepresentanteDTO> representaciones = new ArrayList<ClienteRepresentanteDTO>();
					DetachedCriteria criterio = DetachedCriteria.forClass(ClienteRepresentanteDTO.class);
					criterio.add(Restrictions.eq("representanteDTO.coCliente", Long.parseLong(coCliente)));
					criterio.add(Restrictions.eq("circuitoDTO.coCircuito", doc.getElementsByTagName("propiedades").item(0).getChildNodes().item(1).getTextContent()));
					criterio.add(Restrictions.ge("fxHasta", new Date()));

					representaciones = clienteRepresentanteBO.findByCriteria(criterio);
					for (ClienteRepresentanteDTO representacionDTO : representaciones) {
						ClienteDTO c = clienteBO.findById(representacionDTO.getClienteDTO().getCoCliente());
						representados += "<representado>";
						representados += "<idRepresentado>" + c.getCoCliente().toString() + "</idRepresentado>";
						representados += "<nifRepresentado>" + c.getIdentificador() + "</nifRepresentado>";
						representados += "<nombreRepresentado>" + c.getRazonSocial() + "</nombreRepresentado>";
						representados += "</representado>";
					}
					representados += "</representados>";
				}
			} else codigoError = NIF_CLIENTE_VACIO;

			xmlRespuesta += "<propiedades>";
			xmlRespuesta += "<codigoOperacion>01</codigoOperacion>";
			xmlRespuesta += "<codigoProcedimiento>" + doc.getElementsByTagName("propiedades").item(0).getChildNodes().item(1).getTextContent() + "</codigoProcedimiento>";
			xmlRespuesta += "<usuario>" + doc.getElementsByTagName("propiedades").item(0).getChildNodes().item(2).getTextContent() + "</usuario>";
			xmlRespuesta += "<contraseña>" + doc.getElementsByTagName("propiedades").item(0).getChildNodes().item(3).getTextContent() + "</contraseña>";
			xmlRespuesta += "<codigoError>" + codigoError + "</codigoError>";
			xmlRespuesta += "</propiedades>";
			xmlRespuesta += "<datosCertificado>";
			xmlRespuesta += "<nifCertificado>" + doc.getElementsByTagName("datosCertificado").item(0).getChildNodes().item(0).getTextContent() + "</nifCertificado>";
			String nombreCertificado = doc.getElementsByTagName("datosCertificado").item(0).getChildNodes().item(1).getTextContent();
			if ("0".equals(codigoError) && Utilidades.isEmpty(doc.getElementsByTagName("datosCertificado").item(0).getChildNodes().item(1).getTextContent()))
				nombreCertificado = clienteBO.findById(Long.parseLong(coCliente)).getRazonSocial();
			xmlRespuesta += "<nombreCertificado>" + nombreCertificado + "</nombreCertificado>";
			xmlRespuesta += "</datosCertificado>";
			xmlRespuesta += representados;
			xmlRespuesta += datosNotificacion;
		}

		xmlRespuesta += "</wsini>";
		//xmlRespuesta+="</xml>";

		return codigoError;
	}

	private String wsdom1(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega	
		String codigoError = "0";
		NodeList elementos = null;
		ClienteDTO clienteDTO = new ClienteDTO();
		String municipio = "";
		String domiciliaciones = "";
		MunicipioDTO municipioDTO = new MunicipioDTO();
		//		List<ClienteDTO> clientes = new ArrayList<ClienteDTO>();
		String coCliente = "";

		xmlRespuesta = "";
		xmlRespuesta += "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
		xmlRespuesta += "<wsdo1>";

		try {
			elementos = doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes();
			if (elementos.getLength() > 1 && elementos.item(0).getNodeName().equals("nifContribuyente")) {
				String nif = elementos.item(0).getTextContent();
				if (!Utilidades.isEmpty(nif)) {
					nif = nif.trim();
					String nombreCliente = "";
					if (elementos.item(1).getNodeName().equals("nombreContribuyente")) nombreCliente = elementos.item(1).getTextContent();

					coCliente = comprobarCliente(nif, nombreCliente);
					if (!NIF_INEXISTENTE.equals(coCliente) && !CLIENTE_INACTIVO.equals(coCliente)) {
						clienteDTO = clienteBO.findById(Long.parseLong(coCliente));
						if (elementos.item(2).getNodeName().equals("municipio")) {
							municipio = elementos.item(2).getTextContent();
							if (!Utilidades.isEmpty(municipio)) {
								if (municipio.length() == 3) {
									municipioDTO = municipioBO.findById(new MunicipioDTOId("11", municipio));
								} else {
									if (municipio.length() == 5) {
										municipioDTO = municipioBO.findById(new MunicipioDTOId(municipio.substring(0, 2), municipio.substring(2)));
									} else codigoError = MUNICIPIO_INCORRECTO;
								}
								if (municipioDTO == null) codigoError = MUNICIPIO_INCORRECTO;
							}
						}
					} else codigoError = coCliente;

					if (codigoError.equals("0")) {
						domiciliaciones += "<listaRecibos>";

						int id = 1;
						if ("ADO".equalsIgnoreCase(codigoProcedimiento)) {
							List<G7A1TributoVO> listaTributos = DomiciliacionUtil.getTributosDomiciliables(clienteDTO.getCoCliente().toString(), municipioDTO.getId().getCoProvincia(), municipioDTO
									.getId().getCoMunicipio());
							for (G7A1TributoVO tributoVO : listaTributos) {
								DocumentoDTO d = (DocumentoDTO) buscarDocumento(tributoVO.getCoMunicipio(), tributoVO.getCoConcepto(), clienteDTO.getCoCliente().toString(), tributoVO.getRefObjTrib(),
																				"", "").get(0);

								domiciliaciones += "<recibo>";
								domiciliaciones += "<identificador>" + id + "</identificador>";
								domiciliaciones += "<concepto>" + tributoVO.getCoConcepto() + "</concepto>";
								domiciliaciones += "<descripcion>" + MunicipioConceptoModeloUtil.getConceptoDescripcion(tributoVO.getCoConcepto()) + "</descripcion>";
								domiciliaciones += "<ejercicio>" + ((d == null || Utilidades.isEmpty(d.getEjercicio())) ? "" : d.getEjercicio()) + "</ejercicio>";
								domiciliaciones += "<coPeriodo>" + ((d == null || Utilidades.isEmpty(d.getPeriodo())) ? "" : d.getPeriodo()) + "</coPeriodo>";
								domiciliaciones += "<periodo>" + TablaGt.getValor(TablaGtConstants.TABLA_PERIODO, d.getPeriodo(), TablaGt.COLUMNA_DESCRIPCION) + "</periodo>";
								domiciliaciones += "<numero>" + (d == null ? "" : (d.getId().getCoModelo() + " " + d.getId().getCoVersion() + " " + d.getId().getCoDocumento())) + "</numero>";
								domiciliaciones += "<referenciaObjetoTributaria>" + tributoVO.getRefObjTrib() + "</referenciaObjetoTributaria>";
								domiciliaciones += "<referenciaDomiciliacion>" + ((d == null || Utilidades.isEmpty(d.getRefDomiciliacion())) ? "" : d.getRefDomiciliacion())
													+ "</referenciaDomiciliacion>";
								domiciliaciones += "<domicilioTributario>" + tributoVO.getDomicilio() + "</domicilioTributario>";
								domiciliaciones += "<cccActualDomiciliacion/>";
								domiciliaciones += "</recibo>";
								id++;
							}
						} else {
							DetachedCriteria criterio = DomiciliacionUtil.getCriteriaTributosDomiciliados(clienteDTO.getCoCliente().toString(), "", "", "", "", "", "", municipioDTO.getRowid(), "",
																											"", true, true, false, "", "", false);
							List<DomiciliacionDTO> listaDomiciliaciones = domiciliacionBO.findByCriteria(criterio);

							for (DomiciliacionDTO domiciliacionDTO : listaDomiciliaciones) {
								DocumentoDTO d = null;
								if (domiciliacionDTO.getDocumentoDTO() != null)
									d = documentoBO.findById(domiciliacionDTO.getDocumentoDTO().getId());
								else {
									d = (DocumentoDTO) buscarDocumento(municipioDTO.getCodigoCompleto(),
																		domiciliacionDTO.getConceptoDTO() == null ? "" : domiciliacionDTO.getConceptoDTO().getCoConcepto(),
																		clienteDTO.getCoCliente().toString(),
																		Utilidades.isEmpty(domiciliacionDTO.getRefObjTributario()) ? "" : domiciliacionDTO.getRefObjTributario(), "", "").get(0);
								}
								domiciliaciones += "<recibo>";
								domiciliaciones += "<identificador>" + id + "</identificador>";
								domiciliaciones += "<concepto>" + (domiciliacionDTO.getConceptoDTO() == null ? "" : domiciliacionDTO.getConceptoDTO().getCoConcepto()) + "</concepto>";
								domiciliaciones += "<descripcion>" + (MunicipioConceptoModeloUtil.getConceptoDescripcion(domiciliacionDTO.getConceptoDTO().getCoConcepto())) + "</descripcion>";
								domiciliaciones += "<ejercicio>" + (d == null ? "" : d.getEjercicio()) + "</ejercicio>";
								domiciliaciones += "<coPeriodo>" + (d == null ? "" : d.getPeriodo()) + "</coPeriodo>";
								domiciliaciones += "<periodo>" + (TablaGt.getValor(TablaGtConstants.TABLA_PERIODOS_GADIR, d.getPeriodo(), TablaGt.COLUMNA_DESCRIPCION)) + "</periodo>";
								domiciliaciones += "<numero>" + (d == null ? "" : (d.getId().getCoModelo() + " " + d.getId().getCoVersion() + " " + d.getId().getCoDocumento())) + "</numero>";
								domiciliaciones += "<referenciaObjetoTributaria>"
													+ (d == null ? (Utilidades.isEmpty(domiciliacionDTO.getRefObjTributario()) ? "" : domiciliacionDTO.getRefObjTributario()) : d
															.getRefObjTributario1()) + "</referenciaObjetoTributaria>";
								domiciliaciones += "<referenciaDomiciliacion>"
													+ (Utilidades.isEmpty(domiciliacionDTO.getRefDomiciliacion()) ? (d == null ? "" : d.getRefDomiciliacion()) : domiciliacionDTO.getRefDomiciliacion())
													+ "</referenciaDomiciliacion>";
								String ccc = "";
								if (domiciliacionDTO.getClienteCuentaDTO() != null)
									ccc = domiciliacionDTO.getClienteCuentaDTO().getId().getCoBanco() + domiciliacionDTO.getClienteCuentaDTO().getId().getCoBancoSucursal()
											+ domiciliacionDTO.getClienteCuentaDTO().getId().getDc() + domiciliacionDTO.getClienteCuentaDTO().getId().getCuenta();
								domiciliaciones += "<cccActualDomiciliacion>" + ccc + "</cccActualDomiciliacion>";

								String domTributario = "";
								if (d != null) domTributario = DomicilioUtil.getDescripcionDomicilio(d.getDomicilioDTOByCoDomicilio().getCoDomicilio(), true);
								domiciliaciones += "<domicilioTributario>" + domTributario + "</domicilioTributario>";

								domiciliaciones += "</recibo>";
								id++;
							}
						}

						domiciliaciones += "</listaRecibos>";
					}
				} else codigoError = NIF_CLIENTE_VACIO;

				xmlRespuesta += "<propiedades>";
				xmlRespuesta += "<codigoOperacion>01</codigoOperacion>";
				xmlRespuesta += "<codigoProcedimiento>" + doc.getElementsByTagName("propiedades").item(0).getChildNodes().item(1).getTextContent() + "</codigoProcedimiento>";
				xmlRespuesta += "<usuario>" + doc.getElementsByTagName("propiedades").item(0).getChildNodes().item(2).getTextContent() + "</usuario>";
				xmlRespuesta += "<contraseña>" + doc.getElementsByTagName("propiedades").item(0).getChildNodes().item(3).getTextContent() + "</contraseña>";
				xmlRespuesta += "<codigoError>" + codigoError + "</codigoError>";
				xmlRespuesta += "</propiedades>";
				xmlRespuesta += "<datosPantallaAlta>";
				xmlRespuesta += "<nifContribuyente>" + doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes().item(0).getTextContent() + "</nifContribuyente>";
				String nombreContribuyente = doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes().item(1).getTextContent();
				if ("0".equals(codigoError) && Utilidades.isEmpty(doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes().item(1).getTextContent()))
					nombreContribuyente = clienteDTO.getRazonSocial();
				xmlRespuesta += "<nombreContribuyente>" + nombreContribuyente + "</nombreContribuyente>";
				xmlRespuesta += "<municipio>" + doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes().item(2).getTextContent() + "</municipio>";
				xmlRespuesta += domiciliaciones;
				xmlRespuesta += "</datosPantallaAlta>";
			}
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}
		xmlRespuesta += "</wsdo1>";

		return codigoError;
	}

	private String wsdom2(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega	
		String codigoError = "0";
		NodeList elementos = null;
		ClienteDTO clienteDTO = new ClienteDTO();
		String coCliente = "";

		try {
			elementos = doc.getElementsByTagName("datosExpediente").item(0).getChildNodes();
			if (elementos.getLength() > 0 && elementos.item(0).getChildNodes().item(0).getNodeName().equals("nifContribuyente")) {
				String nif = elementos.item(0).getChildNodes().item(0).getTextContent();
				if (!Utilidades.isEmpty(nif)) {
					String nombreCliente = "";
					if (elementos.item(0).getChildNodes().item(1).getNodeName().equals("nombreContribuyente")) nombreCliente = elementos.item(0).getChildNodes().item(1).getTextContent();

					coCliente = comprobarCliente(nif, nombreCliente);
					if (!NIF_INEXISTENTE.equals(coCliente) && !CLIENTE_INACTIVO.equals(coCliente))
						clienteDTO = clienteBO.findById(Long.parseLong(coCliente));
					else codigoError = coCliente;

					if (codigoError.equals("0")) {
						if (doc.getElementsByTagName("cambiosDatosNotificacion").getLength() > 0) {
							if (!Utilidades.isEmpty(doc.getElementsByTagName("cambiosDatosNotificacion").item(0).getTextContent())) {
								String tipoNotificacion = doc.getElementsByTagName("cambiosDatosNotificacion").item(0).getTextContent();
								String via = doc.getElementsByTagName("nombreVia").item(0).getTextContent();
								if (!Utilidades.isEmpty(via)) codigoError = actualizarDomicilioNotificacionWSDomiciliaciones(clienteDTO, doc);

								if (codigoError.equals("0")) {
									ClienteContactoDTO clienteContactoDTO = new ClienteContactoDTO();
									clienteContactoDTO.setClienteDTO(clienteDTO);
									clienteContactoDTO.setBoPreferente(true);
									clienteContactoDTO.setObservaciones("Cambio realizado por petición de la sede electrónica");
									clienteContactoDTO.setCoUsuarioActualizacion("subsede");
									clienteContactoDTO.setFhActualizacion(new Date());

									if (doc.getElementsByTagName("movil").getLength() > 0 && !Utilidades.isEmpty(doc.getElementsByTagName("movil").item(0).getTextContent())) {
										String movil = doc.getElementsByTagName("movil").item(0).getTextContent();

										DetachedCriteria criteriaContacto = DetachedCriteria.forClass(ClienteContactoDTO.class);
										criteriaContacto.add(Restrictions.eq("clienteDTO.coCliente", clienteDTO.getCoCliente()));
										criteriaContacto.add(Restrictions.eq("tipo", ClienteContactoBO.TIPO_MOVIL));
										criteriaContacto.add(Restrictions.eq("contacto", movil));

										List<ClienteContactoDTO> listaContactos = ((ClienteContactoBO) GadirConfig.getBean("clienteContactoBO")).findByCriteria(criteriaContacto);
										if (listaContactos.size() > 0) {
											clienteContactoDTO = listaContactos.get(0);
											if (!clienteContactoDTO.isBoPreferente()) {
												clienteContactoDTO.setBoPreferente(true);

												((ClienteContactoBO) GadirConfig.getBean("clienteContactoBO")).save(clienteContactoDTO);
											}
										} else {
											clienteContactoDTO.setContacto(movil);
											clienteContactoDTO.setTipo(ClienteContactoBO.TIPO_MOVIL);

											((ClienteContactoBO) GadirConfig.getBean("clienteContactoBO")).save(clienteContactoDTO);
										}

										DetachedCriteria criteriaContactoPreferente = DetachedCriteria.forClass(ClienteContactoDTO.class);
										criteriaContactoPreferente.add(Restrictions.eq("clienteDTO.coCliente", clienteDTO.getCoCliente()));
										criteriaContactoPreferente.add(Restrictions.eq("tipo", ClienteContactoBO.TIPO_MOVIL));
										criteriaContactoPreferente.add(Restrictions.eq("boPreferente", true));
										criteriaContactoPreferente.add(Restrictions.ne("contacto", movil));

										List<ClienteContactoDTO> listaContactosPreferente = ((ClienteContactoBO) GadirConfig.getBean("clienteContactoBO")).findByCriteria(criteriaContactoPreferente);
										if (listaContactosPreferente.size() > 0) { //el que estaba como preferente lo quitamos
											ClienteContactoDTO clienteContactoAnterior = listaContactosPreferente.get(0);
											clienteContactoAnterior.setBoPreferente(false);
											clienteContactoAnterior.setObservaciones("Cambio realizado por petición de la sede electrónica");
											clienteContactoAnterior.setCoUsuarioActualizacion("subsede");
											((ClienteContactoBO) GadirConfig.getBean("clienteContactoBO")).save(clienteContactoAnterior);
										}

										clienteDTO.setBoSms(true);
									}

									clienteContactoDTO = new ClienteContactoDTO();
									clienteContactoDTO.setClienteDTO(clienteDTO);
									clienteContactoDTO.setBoPreferente(true);
									clienteContactoDTO.setObservaciones("Cambio realizado por petición de la sede electrónica");
									clienteContactoDTO.setCoUsuarioActualizacion("subsede");
									clienteContactoDTO.setFhActualizacion(new Date());

									if (doc.getElementsByTagName("email").getLength() > 0 && !Utilidades.isEmpty(doc.getElementsByTagName("email").item(0).getTextContent())) {
										String email = doc.getElementsByTagName("email").item(0).getTextContent();

										DetachedCriteria criteriaContacto = DetachedCriteria.forClass(ClienteContactoDTO.class);
										criteriaContacto.add(Restrictions.eq("clienteDTO.coCliente", clienteDTO.getCoCliente()));
										criteriaContacto.add(Restrictions.eq("tipo", ClienteContactoBO.TIPO_EMAIL));
										criteriaContacto.add(Restrictions.eq("contacto", email));

										List<ClienteContactoDTO> listaContactos = ((ClienteContactoBO) GadirConfig.getBean("clienteContactoBO")).findByCriteria(criteriaContacto);
										if (listaContactos.size() > 0) {
											clienteContactoDTO = listaContactos.get(0);
											if (!clienteContactoDTO.isBoPreferente()) {
												clienteContactoDTO.setBoPreferente(true);

												((ClienteContactoBO) GadirConfig.getBean("clienteContactoBO")).save(clienteContactoDTO);
											}
										} else {
											clienteContactoDTO.setContacto(email);
											clienteContactoDTO.setTipo(ClienteContactoBO.TIPO_EMAIL);

											((ClienteContactoBO) GadirConfig.getBean("clienteContactoBO")).save(clienteContactoDTO);
										}

										DetachedCriteria criteriaContactoPreferente = DetachedCriteria.forClass(ClienteContactoDTO.class);
										criteriaContactoPreferente.add(Restrictions.eq("clienteDTO.coCliente", clienteDTO.getCoCliente()));
										criteriaContactoPreferente.add(Restrictions.eq("tipo", ClienteContactoBO.TIPO_EMAIL));
										criteriaContactoPreferente.add(Restrictions.eq("boPreferente", true));
										criteriaContactoPreferente.add(Restrictions.ne("contacto", email));

										List<ClienteContactoDTO> listaContactosPreferente = ((ClienteContactoBO) GadirConfig.getBean("clienteContactoBO")).findByCriteria(criteriaContactoPreferente);
										if (listaContactosPreferente.size() > 0) { //el que estaba como preferente lo quitamos
											ClienteContactoDTO clienteContactoAnterior = listaContactosPreferente.get(0);
											clienteContactoAnterior.setBoPreferente(false);
											clienteContactoAnterior.setObservaciones("Cambio realizado por petición de la sede electrónica");
											clienteContactoAnterior.setCoUsuarioActualizacion("subsede");
											((ClienteContactoBO) GadirConfig.getBean("clienteContactoBO")).save(clienteContactoAnterior);
										}
									}

									if ("P".equals(tipoNotificacion) || "E".equals(tipoNotificacion)) {
										if ("P".equals(tipoNotificacion)) tipoNotificacion = null;
										clienteDTO.setCanalNotificacion(tipoNotificacion);
										clienteDTO.setFhActualizacion(new Date());
										clienteDTO.setCoUsuarioActualizacion("subsede");
										clienteBO.save(clienteDTO);
									}
								}
							}
						}
					}
				}
			} else codigoError = NIF_CLIENTE_VACIO;
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}

		xmlRespuesta = "";
		try {
			XPathFactory factory = XPathFactory.newInstance();
			XPath xpath = factory.newXPath();
			Node codigoErrorNode = limpiaCreaElemento("/" + prefijo + "/propiedades/codigoError", xpath, doc);
			codigoErrorNode.setTextContent(codigoError);

			Node expGadirNode = limpiaCreaElemento("/" + prefijo + "/datosExpediente/propiedades/numExpGADIR", xpath, doc);
			expGadirNode.setTextContent("");

			TransformerFactory transfac = TransformerFactory.newInstance();
			Transformer trans = transfac.newTransformer();
			StringWriter sw = new StringWriter();
			StreamResult salida = new StreamResult(sw);
			DOMSource fuente = new DOMSource(doc);
			trans.transform(fuente, salida);
			xmlRespuesta = sw.toString();
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}

		return codigoError;
	}

	private String wsdom3(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega	
		String codigoError = "0";
		NodeList elementos = null;
		ClienteDTO clienteDTO = new ClienteDTO();
		ClienteDTO clienteCuentaDTO = new ClienteDTO();
		String coCliente = "";

		try {
			elementos = doc.getElementsByTagName("datosExpediente").item(0).getChildNodes();
			if (elementos.getLength() > 0 && elementos.item(0).getChildNodes().item(0).getNodeName().equals("nifContribuyente")) {
				String nif = elementos.item(0).getChildNodes().item(0).getTextContent();
				if (!Utilidades.isEmpty(nif)) {
					nif = nif.trim();
					String nombreCliente = "";
					if (elementos.item(0).getChildNodes().item(1).getNodeName().equals("nombreContribuyente")) nombreCliente = elementos.item(0).getChildNodes().item(1).getTextContent();

					coCliente = comprobarCliente(nif, nombreCliente);
					if (!NIF_INEXISTENTE.equals(coCliente) && !CLIENTE_INACTIVO.equals(coCliente)) {
						clienteDTO = clienteBO.findById(Long.parseLong(coCliente));

						if ("1".equals(doc.getElementsByTagName("cambiosDatosNotificacion").item(0).getTextContent())) {
							codigoError = actualizarDomicilioNotificacionWSDomiciliaciones(clienteDTO, doc);
						}
					} else codigoError = coCliente;

					if (codigoError.equals("0")) {
						NodeList datosCuenta = doc.getElementsByTagName("datosTitularCuenta").item(0).getChildNodes();
						String esTitular = datosCuenta.item(0).getTextContent();
						String titularCuenta = datosCuenta.item(1).getTextContent();
						String nifTitularCuenta = datosCuenta.item(2).getTextContent();
						String ccc = datosCuenta.item(3).getTextContent();

						if (!Utilidades.isEmpty(nifTitularCuenta)) {
							nifTitularCuenta = nifTitularCuenta.trim();

							DetachedCriteria dcCuenta = DetachedCriteria.forClass(ClienteDTO.class);
							dcCuenta.add(Restrictions.sqlRestriction("translate(UPPER(this_.razon_social), 'ÁÉÍÓÚÖÜ', 'AEIOUOU') like translate('" + titularCuenta.toUpperCase()
																		+ "%', 'ÁÉÍÓÚÖÜ', 'AEIOUOU')"));
							dcCuenta.add(Restrictions.eq("identificador", nifTitularCuenta.toUpperCase()));

							List<ClienteDTO> clientesCuenta = clienteBO.findByCriteria(dcCuenta);
							if (clientesCuenta.isEmpty())
								codigoError = NIF_INEXISTENTE;
							else {
								if (clientesCuenta.size() == 1) {
									if (!clientesCuenta.get(0).isBoActivo())
										codigoError = CLIENTE_INACTIVO;
									else clienteCuentaDTO = clientesCuenta.get(0);
								} else codigoError = NIF_DUPLICADO;
							}
						} else codigoError = NIF_CLIENTE_VACIO;

						if (codigoError.equals("0")) {
							NodeList recibos = doc.getElementsByTagName("recibosel");
							String codModelo = null;
							String codVersion = null;
							String codDocumento = null;

							if (recibos.getLength() > 0) {
								String codigoCompleto = recibos.item(0).getChildNodes().item(4).getTextContent();

								if (!Utilidades.isEmpty(codigoCompleto)) {
									if (codigoCompleto.length() == 13) {
										codModelo = codigoCompleto.substring(0, 3);
										codVersion = codigoCompleto.substring(3, 4);
										codDocumento = codigoCompleto.substring(4);
									} else {
										if (codigoCompleto.length() == 15) {
											codModelo = codigoCompleto.substring(0, 3);
											codVersion = codigoCompleto.substring(4, 5);
											codDocumento = codigoCompleto.substring(6);
										}
									}
								}
							}

							String tipo = "C";

							if ("0".equals(esTitular)) {
								coCliente = clienteCuentaDTO.getCoCliente().toString();
							} else coCliente = clienteDTO.getCoCliente().toString();

							ClienteCuentaDTO cuentaDTO = new ClienteCuentaDTO();
							CuentaDTO c = cuentaBO.findById(new CuentaDTOId(ccc.substring(0, 4), ccc.substring(4, 8), ccc.substring(8, 10), ccc.substring(10)));
							if (c == null) {
								Map<String, Object> listaResultados = comprobarCuentaClienteBO.execute(ccc.substring(0, 4), ccc.substring(4, 8), ccc.substring(8, 10), ccc.substring(10), Long
										.parseLong(coCliente), "@", codModelo, codVersion, codDocumento);
								int res = ((Integer) listaResultados.get("resultado")).intValue();
								if (res < 0) {
									if (res == -1)
										codigoError = FORMATO_CUENTA_INCORRECTO;
									else if (res == -2) codigoError = DIGITO_CONTROL_INCORRECTO;
								} else {
									if (res > 0)
										tipo = "S";
									else cuentaDTO = clienteCuentaBO.findById(new ClienteCuentaDTOId(ccc.substring(0, 4), ccc.substring(4, 8), ccc.substring(8, 10), ccc.substring(10), Long
											.parseLong(coCliente)));
								}

							} else {
								cuentaDTO = clienteCuentaBO.findById(new ClienteCuentaDTOId(ccc.substring(0, 4), ccc.substring(4, 8), ccc.substring(8, 10), ccc.substring(10), Long
										.parseLong(coCliente)));
								if (cuentaDTO == null) {
									cuentaDTO = new ClienteCuentaDTO();
									cuentaDTO.setClienteDTO(clienteBO.findById(Long.parseLong(coCliente)));
									cuentaDTO.setCuentaDTO(c);
									cuentaDTO.setId(new ClienteCuentaDTOId(ccc.substring(0, 4), ccc.substring(4, 8), ccc.substring(8, 10), ccc.substring(10), Long.parseLong(coCliente)));
									cuentaDTO.setFhActualizacion(new Date());
									cuentaDTO.setCoUsuarioActualizacion("subsede");
									clienteCuentaBO.save(cuentaDTO);
								}
							}

							for (int i = 0; i < recibos.getLength(); i++) {
								Node recibo = recibos.item(i);
								String municipio = recibo.getChildNodes().item(0).getTextContent();
								MunicipioDTO municipioDTO = new MunicipioDTO();
								if (!Utilidades.isEmpty(municipio)) {
									if (municipio.length() == 3) {
										municipioDTO = municipioBO.findById(new MunicipioDTOId("11", municipio));
									} else {
										if (municipio.length() == 5) {
											municipioDTO = municipioBO.findById(new MunicipioDTOId(municipio.substring(0, 2), municipio.substring(2)));
										} else codigoError = MUNICIPIO_INCORRECTO;
									}
								}

								String concepto = recibo.getChildNodes().item(1).getTextContent();
								//String ejercicio = recibo.getChildNodes().item(2).getTextContent();
								//String periodo = recibo.getChildNodes().item(3).getTextContent();

								String numero = recibo.getChildNodes().item(4).getTextContent();
								String coModelo = "";
								String coVersion = "";
								String coDocumento = "";
								if (!Utilidades.isEmpty(numero)) {
									if (numero.length() == 13) {
										coModelo = numero.substring(0, 3);
										coVersion = numero.substring(3, 4);
										coDocumento = numero.substring(4);
									} else {
										if (numero.length() == 15) {
											coModelo = numero.substring(0, 3);
											coVersion = numero.substring(4, 5);
											coDocumento = numero.substring(6);
										} else codigoError = DOCUMENTO_INCORRECTO;
									}
								}
								String refObjTributario = recibo.getChildNodes().item(5).getTextContent();
								String refDomiciliacion = "";
								try {
									refDomiciliacion = recibo.getChildNodes().item(6).getTextContent();
								} catch (Exception e) {}

								codigoError = altaDomiciliacion(municipioDTO.getCodigoCompleto(), concepto, clienteDTO.getCoCliente().toString(), refObjTributario, cuentaDTO.getRowid(), tipo,
																refDomiciliacion, coModelo + coVersion + coDocumento);

								//								DocumentoLiquidacionDTO docLiq = documentoLiquidacionBO.findById(new DocumentoLiquidacionDTOId(coModelo, coVersion, coDocumento));
								//								
								//								DetachedCriteria dDocumento = DetachedCriteria.forClass(DocumentoLiquidacionDTO.class);
								//								dDocumento.createAlias("documentoDTO", "d", DetachedCriteria.LEFT_JOIN);
								//								dDocumento.add(Restrictions.eq("d.municipioDTO.id", municipioDTO.getId()));
								//								dDocumento.add(Restrictions.eq("d.conceptoDTO.coConcepto", concepto));
								//								dDocumento.add(Restrictions.eq("d.ejercicio", Short.parseShort(ejercicio)));
								//								dDocumento.add(Restrictions.eq("d.periodo", periodo));
								//								dDocumento.add(Restrictions.eq("id", docLiq.getId()));
								//								dDocumento.add(Restrictions.eq("refObjTributario1", refObjTributario));
								//								dDocumento.add(Restrictions.eq("refDomiciliacion", refDomiciliacion));
								//								
								//								List<DocumentoLiquidacionDTO> listaRecibos = documentoLiquidacionBO.findByCriteria(dDocumento, 0, 1);
								//								if(!listaRecibos.isEmpty()) {
								//									DocumentoLiquidacionDTO reciboDTO = listaRecibos.get(0);
								//									DomiciliacionDTO domiciliacionDTO = new DomiciliacionDTO();
								//									domiciliacionDTO.setConceptoDTO(conceptoBO.findById(concepto));
								//									domiciliacionDTO.setDocumentoDTO(reciboDTO.getDocumentoDTO());
								//									domiciliacionDTO.setRefObjTributario(refObjTributario);
								//									domiciliacionDTO.setRefDomiciliacion(refDomiciliacion);
								//									domiciliacionDTO.setClienteDTO(clienteDTO);
								//									domiciliacionDTO.setClienteCuentaDTO(cuentaDTO);
								//									domiciliacionDTO.setTipo(tipo);
								//									domiciliacionDTO.setCoUsuarioActualizacion("subsede");
								//									domiciliacionDTO.setFhActualizacion(new Date());
								//									domiciliacionBO.save(domiciliacionDTO);
								//								}								
							}
						}
					}
				} else codigoError = NIF_CLIENTE_VACIO;
			}
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}

		xmlRespuesta = "";
		try {
			XPathFactory factory = XPathFactory.newInstance();
			XPath xpath = factory.newXPath();
			Node codigoErrorNode = limpiaCreaElemento("/" + prefijo + "/propiedades/codigoError", xpath, doc);
			codigoErrorNode.setTextContent(codigoError);

			Node expGadirNode = limpiaCreaElemento("/" + prefijo + "/datosExpediente/propiedades/numExpGADIR", xpath, doc);
			expGadirNode.setTextContent("");

			TransformerFactory transfac = TransformerFactory.newInstance();
			Transformer trans = transfac.newTransformer();
			StringWriter sw = new StringWriter();
			StreamResult salida = new StreamResult(sw);
			DOMSource fuente = new DOMSource(doc);
			trans.transform(fuente, salida);
			xmlRespuesta = sw.toString();
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}

		return codigoError;
	}

	private String wsdom4(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega	
		String codigoError = "0";
		NodeList elementos = null;
		ClienteDTO clienteDTO = new ClienteDTO();
		ClienteDTO clienteCuentaDTO = new ClienteDTO();

		try {
			elementos = doc.getElementsByTagName("datosExpediente").item(0).getChildNodes();
			if (elementos.getLength() > 0 && elementos.item(0).getChildNodes().item(0).getNodeName().equals("nifContribuyente")) {
				String nif = elementos.item(0).getChildNodes().item(0).getTextContent();
				if (!Utilidades.isEmpty(nif)) {
					nif = nif.trim();
					String nombreCliente = "";
					if (elementos.item(0).getChildNodes().item(1).getNodeName().equals("nombreContribuyente")) nombreCliente = elementos.item(0).getChildNodes().item(1).getTextContent();

					DetachedCriteria dc = DetachedCriteria.forClass(ClienteDTO.class, "clienteAlias");
					dc.add(Restrictions.sqlRestriction("REGEXP_REPLACE(translate(UPPER(this_.razon_social), 'ÁÉÍÓÚÖÜ', 'AEIOUOU'), '[.,- ]+', '') like REGEXP_REPLACE(translate('"
														+ nombreCliente.toUpperCase() + "%', 'ÁÉÍÓÚÖÜ', 'AEIOUOU'), '[.,- ]+', '')"));
					dc.add(Restrictions.eq("identificador", nif.toUpperCase()));

					List<ClienteDTO> clientes = clienteBO.findByCriteria(dc);
					if (clientes.isEmpty())
						codigoError = NIF_INEXISTENTE;
					else {
						if (clientes.size() == 1) {
							if (!clientes.get(0).isBoActivo())
								codigoError = CLIENTE_INACTIVO;
							else clienteDTO = clientes.get(0);
						} else codigoError = NIF_DUPLICADO;
					}
				} else codigoError = NIF_CLIENTE_VACIO;

				if ("1".equals(doc.getElementsByTagName("cambiosDatosNotificacion").item(0).getTextContent())) {
					codigoError = actualizarDomicilioNotificacionWSDomiciliaciones(clienteDTO, doc);
				}

				if (codigoError.equals("0")) {
					NodeList datosCuenta = doc.getElementsByTagName("datosTitularCuenta").item(0).getChildNodes();
					String esTitular = datosCuenta.item(0).getTextContent();
					String titularCuenta = datosCuenta.item(1).getTextContent();
					String nifTitularCuenta = datosCuenta.item(2).getTextContent();
					String ccc = datosCuenta.item(3).getTextContent();

					if (!Utilidades.isEmpty(nifTitularCuenta)) {
						nifTitularCuenta = nifTitularCuenta.trim();
						DetachedCriteria dcCuenta = DetachedCriteria.forClass(ClienteDTO.class);
						dcCuenta.add(Restrictions.sqlRestriction("translate(UPPER(this_.razon_social), 'ÁÉÍÓÚÖÜ', 'AEIOUOU') like translate('" + titularCuenta.toUpperCase()
																	+ "%', 'ÁÉÍÓÚÖÜ', 'AEIOUOU')"));
						dcCuenta.add(Restrictions.eq("identificador", nifTitularCuenta.toUpperCase()));

						List<ClienteDTO> clientesCuenta = clienteBO.findByCriteria(dcCuenta);
						if (clientesCuenta.isEmpty())
							codigoError = NIF_INEXISTENTE;
						else {
							if (clientesCuenta.size() == 1) {
								if (!clientesCuenta.get(0).isBoActivo())
									codigoError = CLIENTE_INACTIVO;
								else clienteCuentaDTO = clientesCuenta.get(0);
							} else codigoError = NIF_DUPLICADO;
						}
					} else codigoError = NIF_CLIENTE_VACIO;

					if (codigoError.equals("0")) {
						NodeList recibos = doc.getElementsByTagName("recibosel");
						String codModelo = null;
						String codVersion = null;
						String codDocumento = null;

						if (recibos.getLength() > 0) {
							String codigoCompleto = recibos.item(0).getChildNodes().item(4).getTextContent();

							if (!Utilidades.isEmpty(codigoCompleto)) {
								if (codigoCompleto.length() == 13) {
									codModelo = codigoCompleto.substring(0, 3);
									codVersion = codigoCompleto.substring(3, 4);
									codDocumento = codigoCompleto.substring(4);
								} else {
									if (codigoCompleto.length() == 15) {
										codModelo = codigoCompleto.substring(0, 3);
										codVersion = codigoCompleto.substring(4, 5);
										codDocumento = codigoCompleto.substring(6);
									}
								}
							}
						}

						String tipo = "C";
						Long coCliente;
						if ("0".equals(esTitular)) {
							coCliente = clienteCuentaDTO.getCoCliente();
						} else coCliente = clienteDTO.getCoCliente();

						ClienteCuentaDTO cuentaDTO = new ClienteCuentaDTO();
						CuentaDTO c = cuentaBO.findById(new CuentaDTOId(ccc.substring(0, 4), ccc.substring(4, 8), ccc.substring(8, 10), ccc.substring(10)));
						if (c == null) {
							Map<String, Object> listaResultados = comprobarCuentaClienteBO.execute(ccc.substring(0, 4), ccc.substring(4, 8), ccc.substring(8, 10), ccc.substring(10), coCliente, "@",
																									codModelo, codVersion, codDocumento);
							int res = ((Integer) listaResultados.get("resultado")).intValue();
							if (res < 0) {
								if (res == -1)
									codigoError = FORMATO_CUENTA_INCORRECTO;
								else if (res == -2) codigoError = DIGITO_CONTROL_INCORRECTO;
							} else {
								if (res > 0)
									tipo = "S";
								else {
									cuentaDTO = clienteCuentaBO.findById(new ClienteCuentaDTOId(ccc.substring(0, 4), ccc.substring(4, 8), ccc.substring(8, 10), ccc.substring(10), coCliente));
								}
							}

						} else {
							cuentaDTO = clienteCuentaBO.findById(new ClienteCuentaDTOId(ccc.substring(0, 4), ccc.substring(4, 8), ccc.substring(8, 10), ccc.substring(10), coCliente));
							if (cuentaDTO == null) {
								cuentaDTO = new ClienteCuentaDTO();
								cuentaDTO.setClienteDTO(clienteBO.findById(coCliente));
								cuentaDTO.setCuentaDTO(c);
								cuentaDTO.setId(new ClienteCuentaDTOId(ccc.substring(0, 4), ccc.substring(4, 8), ccc.substring(8, 10), ccc.substring(10), coCliente));
								cuentaDTO.setFhActualizacion(new Date());
								cuentaDTO.setCoUsuarioActualizacion("subsede");
								clienteCuentaBO.save(cuentaDTO);
							}
						}

						for (int i = 0; i < recibos.getLength(); i++) {
							Node recibo = recibos.item(i);
							String municipio = recibo.getChildNodes().item(0).getTextContent();
							MunicipioDTO municipioDTO = new MunicipioDTO();
							if (!Utilidades.isEmpty(municipio)) {
								if (municipio.length() == 3) {
									municipioDTO = municipioBO.findById(new MunicipioDTOId("11", municipio));
								} else {
									if (municipio.length() == 5) {
										municipioDTO = municipioBO.findById(new MunicipioDTOId(municipio.substring(0, 2), municipio.substring(2)));
									} else codigoError = MUNICIPIO_INCORRECTO;
								}
							}

							String concepto = recibo.getChildNodes().item(1).getTextContent();
							//String ejercicio = recibo.getChildNodes().item(2).getTextContent();
							//String periodo = recibo.getChildNodes().item(3).getTextContent();

							String numero = recibo.getChildNodes().item(4).getTextContent();
							String coModelo = "";
							String coVersion = "";
							String coDocumento = "";

							if (!Utilidades.isEmpty(numero)) {
								if (numero.length() == 13) {
									coModelo = numero.substring(0, 3);
									coVersion = numero.substring(3, 4);
									coDocumento = numero.substring(4);
								} else {
									if (numero.length() == 15) {
										coModelo = numero.substring(0, 3);
										coVersion = numero.substring(4, 5);
										coDocumento = numero.substring(6);
									} else codigoError = DOCUMENTO_INCORRECTO;
								}
							}

							String refObjTributario = recibo.getChildNodes().item(5).getTextContent();
							String refDomiciliacion = recibo.getChildNodes().item(6).getTextContent();
							codigoError = modificarDomiciliacion(municipioDTO.getCodigoCompleto(), concepto, clienteDTO.getCoCliente().toString(), refObjTributario, cuentaDTO.getRowid(), tipo,
																	refDomiciliacion, coModelo + coVersion + coDocumento);

							//							DocumentoLiquidacionDTO docLiq = documentoLiquidacionBO.findById(new DocumentoLiquidacionDTOId(coModelo, coVersion, coDocumento))						
							//							
							//							DetachedCriteria dDocumento = DetachedCriteria.forClass(DocumentoLiquidacionDTO.class);
							//							dDocumento.createAlias("documentoDTO", "d", DetachedCriteria.LEFT_JOIN);
							//							dDocumento.add(Restrictions.eq("d.municipioDTO.id", municipioDTO.getId()));
							//							dDocumento.add(Restrictions.eq("d.conceptoDTO.coConcepto", concepto));
							//							dDocumento.add(Restrictions.eq("d.ejercicio", Short.parseShort(ejercicio)));
							//							dDocumento.add(Restrictions.eq("d.periodo", periodo));
							//							dDocumento.add(Restrictions.eq("id", docLiq.getId()));
							//							dDocumento.add(Restrictions.eq("refObjTributario1", refObjTributario));
							//							dDocumento.add(Restrictions.eq("refDomiciliacion", refDomiciliacion));
							//							
							//							List<DocumentoLiquidacionDTO> listaRecibos = documentoLiquidacionBO.findByCriteria(dDocumento, 0, 1);
							//							if(!listaRecibos.isEmpty()) {
							//								DocumentoLiquidacionDTO reciboDTO = listaRecibos.get(0);
							//								if(reciboDTO.getDocumentoDTO().getDomiciliacionDTO() != null) {
							//									DomiciliacionDTO domiciliacionDTO = domiciliacionBO.findById(reciboDTO.getDocumentoDTO().getDomiciliacionDTO().getCoDomiciliacion());
							//									domiciliacionDTO.setConceptoDTO(conceptoBO.findById(concepto));
							//									domiciliacionDTO.setRefObjTributario(refObjTributario);
							//									domiciliacionDTO.setRefDomiciliacion(refDomiciliacion);
							//									domiciliacionDTO.setClienteDTO(clienteDTO);
							//									domiciliacionDTO.setClienteCuentaDTO(cuentaDTO);
							//									domiciliacionDTO.setTipo(tipo);
							//									domiciliacionDTO.setCoUsuarioActualizacion("subsede");
							//									domiciliacionDTO.setFhActualizacion(new Date());
							//									domiciliacionBO.save(domiciliacionDTO);
							//								}
							//							}
						}
					}
				}
			}
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}

		xmlRespuesta = "";
		try {
			XPathFactory factory = XPathFactory.newInstance();
			XPath xpath = factory.newXPath();
			Node codigoErrorNode = limpiaCreaElemento("/" + prefijo + "/propiedades/codigoError", xpath, doc);
			codigoErrorNode.setTextContent(codigoError);

			Node expGadirNode = limpiaCreaElemento("/" + prefijo + "/datosExpediente/propiedades/numExpGADIR", xpath, doc);
			expGadirNode.setTextContent("");

			TransformerFactory transfac = TransformerFactory.newInstance();
			Transformer trans = transfac.newTransformer();
			StringWriter sw = new StringWriter();
			StreamResult salida = new StreamResult(sw);
			DOMSource fuente = new DOMSource(doc);
			trans.transform(fuente, salida);
			xmlRespuesta = sw.toString();
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}

		return codigoError;
	}

	private String wsdom5(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega	
		String codigoError = "0";
		NodeList elementos = null;
		ClienteDTO clienteDTO = new ClienteDTO();

		try {
			elementos = doc.getElementsByTagName("datosExpediente").item(0).getChildNodes();
			if (elementos.getLength() > 0 && elementos.item(0).getChildNodes().item(0).getNodeName().equals("nifContribuyente")) {
				String nif = elementos.item(0).getChildNodes().item(0).getTextContent();
				if (!Utilidades.isEmpty(nif)) {
					nif = nif.trim();
					String nombreCliente = "";
					if (elementos.item(0).getChildNodes().item(1).getNodeName().equals("nombreContribuyente")) nombreCliente = elementos.item(0).getChildNodes().item(1).getTextContent();

					DetachedCriteria dc = DetachedCriteria.forClass(ClienteDTO.class, "clienteAlias");
					dc.add(Restrictions.sqlRestriction("REGEXP_REPLACE(translate(UPPER(this_.razon_social), 'ÁÉÍÓÚÖÜ', 'AEIOUOU'), '[.,- ]+', '') like REGEXP_REPLACE(translate('"
														+ nombreCliente.toUpperCase() + "%', 'ÁÉÍÓÚÖÜ', 'AEIOUOU'), '[.,- ]+', '')"));
					dc.add(Restrictions.eq("identificador", nif.toUpperCase()));

					List<ClienteDTO> clientes = clienteBO.findByCriteria(dc);
					if (clientes.isEmpty())
						codigoError = NIF_INEXISTENTE;
					else {
						if (clientes.size() == 1) {
							if (!clientes.get(0).isBoActivo())
								codigoError = CLIENTE_INACTIVO;
							else clienteDTO = clientes.get(0);
						} else codigoError = NIF_DUPLICADO;
					}
				} else codigoError = NIF_CLIENTE_VACIO;

				if ("1".equals(doc.getElementsByTagName("cambiosDatosNotificacion").item(0).getTextContent())) {
					codigoError = actualizarDomicilioNotificacionWSDomiciliaciones(clienteDTO, doc);
				}

				if (codigoError.equals("0")) {
					NodeList recibos = doc.getElementsByTagName("recibosel");
					for (int i = 0; i < recibos.getLength(); i++) {
						Node recibo = recibos.item(i);
						String municipio = recibo.getChildNodes().item(0).getTextContent();
						MunicipioDTO municipioDTO = new MunicipioDTO();
						if (!Utilidades.isEmpty(municipio)) {
							if (municipio.length() == 3) {
								municipioDTO = municipioBO.findById(new MunicipioDTOId("11", municipio));
							} else {
								if (municipio.length() == 5) {
									municipioDTO = municipioBO.findById(new MunicipioDTOId(municipio.substring(0, 2), municipio.substring(2)));
								} else codigoError = MUNICIPIO_INCORRECTO;
							}
						}

						String concepto = recibo.getChildNodes().item(1).getTextContent();
						//String ejercicio = recibo.getChildNodes().item(2).getTextContent();
						//String periodo = recibo.getChildNodes().item(3).getTextContent();

						String numero = recibo.getChildNodes().item(4).getTextContent();
						String coModelo = "";
						String coVersion = "";
						String coDocumento = "";
						if (!Utilidades.isEmpty(numero)) {
							if (numero.length() == 13) {
								coModelo = numero.substring(0, 3);
								coVersion = numero.substring(3, 4);
								coDocumento = numero.substring(4);
							} else {
								if (numero.length() == 15) {
									coModelo = numero.substring(0, 3);
									coVersion = numero.substring(4, 5);
									coDocumento = numero.substring(6);
								} else codigoError = DOCUMENTO_INCORRECTO;
							}
						}
						String refObjTributario = recibo.getChildNodes().item(5).getTextContent();
						String refDomiciliacion = recibo.getChildNodes().item(6).getTextContent();

						codigoError = bajaDomiciliacion(municipioDTO.getCodigoCompleto(), concepto, clienteDTO.getCoCliente().toString(), refObjTributario, refDomiciliacion, coModelo + coVersion
																																												+ coDocumento);
					}
				}
			}
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}

		xmlRespuesta = "";
		try {
			XPathFactory factory = XPathFactory.newInstance();
			XPath xpath = factory.newXPath();
			Node codigoErrorNode = limpiaCreaElemento("/" + prefijo + "/propiedades/codigoError", xpath, doc);
			codigoErrorNode.setTextContent(codigoError);

			Node expGadirNode = limpiaCreaElemento("/" + prefijo + "/datosExpediente/propiedades/numExpGADIR", xpath, doc);
			expGadirNode.setTextContent("");

			TransformerFactory transfac = TransformerFactory.newInstance();
			Transformer trans = transfac.newTransformer();
			StringWriter sw = new StringWriter();
			StreamResult salida = new StreamResult(sw);
			DOMSource fuente = new DOMSource(doc);
			trans.transform(fuente, salida);
			xmlRespuesta = sw.toString();
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}

		return codigoError;
	}

	private String wsdom6(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega	
		String codigoError = "0";
		ClienteDTO clienteDTO = new ClienteDTO();
		String coCliente = "";

		try {
			if (doc.getElementsByTagName("contribuyenteRepresentante").getLength() == 1) {
				NodeList elementos = doc.getElementsByTagName("contribuyenteRepresentante").item(0).getChildNodes();
				if (elementos.getLength() > 0 && elementos.item(0).getNodeName().equals("nifContribuyente")) {
					String nif = elementos.item(0).getTextContent();
					if (!Utilidades.isEmpty(nif)) {
						nif = nif.trim();
						String nombreCliente = "";
						if (elementos.item(1).getNodeName().equals("nombreContribuyente")) nombreCliente = elementos.item(1).getTextContent();

						coCliente = comprobarCliente(nif, nombreCliente);
						if (!NIF_INEXISTENTE.equals(coCliente) && !CLIENTE_INACTIVO.equals(coCliente)) {
							clienteDTO = clienteBO.findById(Long.parseLong(coCliente));
						} else {
							codigoError = coCliente;
						}

						if ("0".equals(codigoError)) {
							String cuenta = "";
							try {
								cuenta = doc.getElementsByTagName("ccc").item(0).getTextContent();
							} catch (Exception e) {
								cuenta = "";
							}
							NodeList recibosSel = doc.getElementsByTagName("recibosel");
							if (!"BDO".equals(codigoProcedimiento) && (Utilidades.isEmpty(cuenta) || cuenta.length() != 20)) {
								codigoError = FORMATO_CUENTA_INCORRECTO;
							}

							if ("0".equals(codigoError)) {
								String clienteCuentaRowid = "";
								String tipo = "C";
								if (!"BDO".equals(codigoProcedimiento)) {
									ClienteCuentaDTO clienteCuentaDTO = clienteCuentaBO.findById(new ClienteCuentaDTOId(cuenta.substring(0, 4), cuenta.substring(4, 8), cuenta.substring(8, 10), cuenta
											.substring(10), clienteDTO.getCoCliente()));
									if (clienteCuentaDTO == null) {
										Map<String, Object> listaResultados = comprobarCuentaClienteBO.execute(cuenta.substring(0, 4), cuenta.substring(4, 8), cuenta.substring(8, 10), cuenta
												.substring(10), clienteDTO.getCoCliente(), "@", null, null, null);
										int res = ((BigDecimal) listaResultados.get("resultado")).intValue();
										if (res < 0) {
											if (res == -1)
												codigoError = FORMATO_CUENTA_INCORRECTO;
											else if (res == -2) codigoError = DIGITO_CONTROL_INCORRECTO;
										} else {
											if (res > 0)
												tipo = "S";
											else clienteCuentaRowid = clienteCuentaBO.findById(
																								new ClienteCuentaDTOId(cuenta.substring(0, 4), cuenta.substring(4, 8), cuenta.substring(8, 10), cuenta
																										.substring(10), clienteDTO.getCoCliente())).getRowid();
										}
									} else clienteCuentaRowid = clienteCuentaDTO.getRowid();
								}

								boolean todos = true;
								for (int i = 0; i < recibosSel.getLength(); i++) {
									String refDomiciliacion = "";
									String municipio = "";
									String concepto = "";
									String referenciaObjetoTributaria = "";
									try {
										refDomiciliacion = doc.getElementsByTagName("referenciaDomiciliacion").item(i).getTextContent();
									} catch (Exception e) {
										refDomiciliacion = "";
									}
									try {
										municipio = doc.getElementsByTagName("municipio").item(i + 1).getTextContent();
									} catch (Exception e) {
										municipio = "";
									}
									try {
										concepto = doc.getElementsByTagName("concepto").item(i).getTextContent();
									} catch (Exception e) {
										concepto = "";
									}
									try {
										referenciaObjetoTributaria = doc.getElementsByTagName("referenciaObjetoTributaria").item(i).getTextContent();
									} catch (Exception e) {
										referenciaObjetoTributaria = "";
									}

									if (!Utilidades.isEmpty(refDomiciliacion) || "ADO".equalsIgnoreCase(codigoProcedimiento)) {
										switch (codigoProcedimiento.charAt(0)) {
											case 'A':
												codigoError = altaDomiciliacion(municipio, concepto, clienteDTO.getCoCliente().toString(), referenciaObjetoTributaria, clienteCuentaRowid, tipo,
																				refDomiciliacion, "");
												break;
											case 'M':
												codigoError = modificarDomiciliacion(municipio, concepto, clienteDTO.getCoCliente().toString(), referenciaObjetoTributaria, clienteCuentaRowid, tipo,
																						refDomiciliacion, "");
												break;
											case 'B':
												codigoError = bajaDomiciliacion(municipio, concepto, clienteDTO.getCoCliente().toString(), referenciaObjetoTributaria, refDomiciliacion, "");
												break;
										}

										if (todos && !"0".equals(codigoError)) todos = false;
									} else {
										if (todos) todos = false;
									}
								}
								if (!todos) codigoError = EXISTEN_DOMICILIACIONES_PENDIENTES;
							}
						}
					} else codigoError = NIF_CLIENTE_VACIO;
				} else codigoError = NIF_CLIENTE_VACIO;
			} else codigoError = NIF_CLIENTE_VACIO;
		} catch (Exception e) {
			codigoError = ERROR_DATOS;
		}

		xmlRespuesta = "";
		try {
			XPathFactory factory = XPathFactory.newInstance();
			XPath xpath = factory.newXPath();
			Node codigoErrorNode = limpiaCreaElemento("/" + prefijo + "/propiedades/codigoError", xpath, doc);
			codigoErrorNode.setTextContent(codigoError);
			TransformerFactory transfac = TransformerFactory.newInstance();
			Transformer trans = transfac.newTransformer();
			StringWriter sw = new StringWriter();
			StreamResult salida = new StreamResult(sw);
			DOMSource fuente = new DOMSource(doc);
			trans.transform(fuente, salida);
			xmlRespuesta = sw.toString();
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}

		return codigoError;
	}

	private String wsdomic1(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega	
		String codigoError = "0";
		NodeList elementos = null;
		String datosNotificacion = "";
		ClienteDTO clienteDTO = new ClienteDTO();
		String coCliente = "";

		xmlRespuesta = "";
		xmlRespuesta += "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
		xmlRespuesta += "<wsdo2>";

		try {
			elementos = doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes();
			if (elementos.getLength() > 0 && elementos.item(0).getNodeName().equals("nifContribuyente")) {
				String nif = elementos.item(0).getTextContent();
				nif = nif.trim();
				String nombreCliente = "";
				if (elementos.item(1).getNodeName().equals("nombreContribuyente")) nombreCliente = elementos.item(1).getTextContent();

				coCliente = comprobarCliente(nif, nombreCliente);
				if (!NIF_INEXISTENTE.equals(coCliente) && !CLIENTE_INACTIVO.equals(coCliente)) {
					clienteDTO = clienteBO.findById(Long.parseLong(coCliente));
				} else {
					codigoError = coCliente;
				}

				if (codigoError.equals("0")) {
					// escribir datos notificacion
					datosNotificacion += "<domiciliosNotificacionActuales>";

					DetachedCriteria criterio = DetachedCriteria.forClass(DomicilioNotificacionDTO.class);

					criterio.createAlias("domicilioDTO", "d");

					criterio.add(Restrictions.eq("d.clienteDTO.coCliente", clienteDTO.getCoCliente()));
					criterio.add(Restrictions.eq("d.boNotificacion", true));
					criterio.add(Restrictions.le("fxVigenciaDesde", new Date()));
					criterio.add(Restrictions.ge("fxVigenciaHasta", new Date()));
					criterio.addOrder(Order.asc("domicilioDTO.coDomicilio"));

					List<DomicilioNotificacionDTO> listaDomiciliosNotificacion = domicilioNotificacionBO.findByCriteria(criterio);
					//					List<DomicilioNotificacionDTO> listaDomicilios = new ArrayList<DomicilioNotificacionDTO>();
					//					for(int i = 0; i < listaDomiciliosNotificacion.size(); i++) {
					//						DomicilioNotificacionDTO dnDTO = listaDomiciliosNotificacion.get(i);
					//						if(i == 0 || !listaDomiciliosNotificacion.get(i-1).getDomicilioDTO().getCoDomicilio().equals(dnDTO.getDomicilioDTO().getCoDomicilio()))
					//							listaDomicilios.add(dnDTO);
					//					}

					boolean generico = false;

					for (DomicilioNotificacionDTO dn : listaDomiciliosNotificacion) {
						if (dn.getConceptoDTO().getCoConcepto().equals("****") && dn.getCoModeloCenso().equals("***") && dn.getCoVersionCenso().equals("*")
							&& dn.getCoDocumentoCenso().equals("*********")) generico = true;
						DomicilioDTO domicilio = domicilioBO.findById(dn.getDomicilioDTO().getCoDomicilio());
						UnidadUrbanaDTO u = null;
						u = unidadUrbanaBO.findById(domicilio.getUnidadUrbanaDTO().getCoUnidadUrbana());
						CalleDTO c = null;
						if (u != null) c = calleBO.findById(u.getCalleDTO().getCoCalle());
						datosNotificacion += "<domicilioNotificacionActual>";
						datosNotificacion += "<tributo>" + dn.getConceptoDTO().getCoConcepto() + "</tributo>";
						datosNotificacion += "<provinciaNot>" + c.getMunicipioDTO().getId().getCoProvincia() + "</provinciaNot>";
						datosNotificacion += "<municipioNot>" + c.getMunicipioDTO().getId().getCoMunicipio() + "</municipioNot>";
						datosNotificacion += "<codigoPostal>" + u.getCp().toString() + "</codigoPostal>";
						datosNotificacion += "<siglaVia>" + c.getSigla() + "</siglaVia>";
						datosNotificacion += "<nombreVia>" + c.getNombreCalle() + "</nombreVia>";
						String resumen = c.getSigla() + " " + c.getNombreCalle();
						String ubicacion = "";
						if (c.getCalleUbicacionDTO() != null) ubicacion = calleUbicacionBO.findById(c.getCalleUbicacionDTO().getCoCalleUbicacion()).getUbicacion();
						datosNotificacion += "<nucleoUrbano>" + ubicacion + "</nucleoUrbano>";
						datosNotificacion += "<num>" + (Utilidades.isEmpty(u.getNumero()) ? "" : u.getNumero().toString()) + "</num>";
						resumen += !Utilidades.isEmpty(u.getNumero()) ? (" Nº " + u.getNumero().toString()) : "";
						datosNotificacion += "<letra>" + (Utilidades.isEmpty(u.getLetra()) ? "" : u.getLetra()) + "</letra>";
						resumen += !Utilidades.isEmpty(u.getLetra()) ? ("Let. " + u.getLetra()) : "";
						datosNotificacion += "<bloque>" + (Utilidades.isEmpty(u.getBloque()) ? "" : u.getBloque()) + "</bloque>";
						resumen += !Utilidades.isEmpty(u.getBloque()) ? ("Blq. " + u.getBloque()) : "";
						datosNotificacion += "<escalera>" + (Utilidades.isEmpty(u.getEscalera()) ? "" : u.getEscalera()) + "</escalera>";
						resumen += !Utilidades.isEmpty(u.getEscalera()) ? ("Esc. " + u.getEscalera()) : "";
						datosNotificacion += "<planta>" + (Utilidades.isEmpty(u.getPlanta()) ? "" : u.getPlanta()) + "</planta>";
						resumen += !Utilidades.isEmpty(u.getPlanta()) ? ("Pla. " + u.getPlanta()) : "";
						datosNotificacion += "<puerta>" + (Utilidades.isEmpty(u.getPuerta()) ? "" : u.getPuerta()) + "</puerta>";
						resumen += !Utilidades.isEmpty(u.getPuerta()) ? ("Pta. " + u.getPuerta()) : "";
						datosNotificacion += "<km>" + (u.getKm() == null ? "" : u.getKm()) + "</km>";
						String municipio = municipioBO.findById(c.getMunicipioDTO().getId()).getNombre();
						String provincia = provinciaBO.findById(c.getMunicipioDTO().getId().getCoProvincia()).getNombre();
						resumen += ", " + u.getCp().toString() + ", " + municipio + " (" + provincia + ")";
						datosNotificacion += "<resumenDomicilio>" + resumen + "</resumenDomicilio>";
						datosNotificacion += "</domicilioNotificacionActual>";
					}
					if (!generico) { //metemos el domicilio fiscal con concepto generico
						List<DomicilioDTO> domicilio = domicilioBO.findFiltered(new String[] {"clienteDTO.coCliente", "boFiscalMunicipal"}, new Object[] {Long.parseLong(coCliente), true});

						if (!domicilio.isEmpty()) {
							DomicilioDTO d = domicilio.get(0);
							UnidadUrbanaDTO u = null;
							u = unidadUrbanaBO.findById(d.getUnidadUrbanaDTO().getCoUnidadUrbana());
							CalleDTO c = null;
							if (u != null) c = calleBO.findById(u.getCalleDTO().getCoCalle());
							if (c != null) {
								DomicilioNotificacionDTO domicilioNotificacionGenerico = new DomicilioNotificacionDTO();
								domicilioNotificacionGenerico.setClienteDTO(clienteDTO);
								domicilioNotificacionGenerico.setCoDocumentoCenso("*********");
								domicilioNotificacionGenerico.setCoModeloCenso("***");
								domicilioNotificacionGenerico.setConceptoDTO(conceptoBO.findById("****"));
								domicilioNotificacionGenerico.setCoUsuarioActualizacion("subsede");
								domicilioNotificacionGenerico.setCoVersionCenso("*");
								domicilioNotificacionGenerico.setDomicilioDTO(d);
								domicilioNotificacionGenerico.setFhActualizacion(new Date());
								domicilioNotificacionGenerico.setFxVigenciaDesde(new Date());
								domicilioNotificacionGenerico.setFxVigenciaHasta(Utilidades.DDMMYYYYToDate("31/12/2099"));
								domicilioNotificacionGenerico.setModeloVersionDTO(modeloVersionBO.findById(new ModeloVersionDTOId("***", "*")));
								domicilioNotificacionBO.save(domicilioNotificacionGenerico);
								d.setBoNotificacion(true);
								d.setFhActualizacion(new Date());
								d.setCoUsuarioActualizacion("subsede");
								domicilioBO.save(d);
								datosNotificacion += "<domicilioNotificacionActual>";
								datosNotificacion += "<tributo>****</tributo>";
								datosNotificacion += "<provinciaNot>" + c.getMunicipioDTO().getId().getCoProvincia() + "</provinciaNot>";
								datosNotificacion += "<municipioNot>" + c.getMunicipioDTO().getId().getCoMunicipio() + "</municipioNot>";
								datosNotificacion += "<codigoPostal>" + u.getCp().toString() + "</codigoPostal>";
								datosNotificacion += "<siglaVia>" + c.getSigla() + "</siglaVia>";
								datosNotificacion += "<nombreVia>" + c.getNombreCalle() + "</nombreVia>";
								String resumen = c.getSigla() + " " + c.getNombreCalle();
								String ubicacion = "";
								if (c.getCalleUbicacionDTO() != null) ubicacion = calleUbicacionBO.findById(c.getCalleUbicacionDTO().getCoCalleUbicacion()).getUbicacion();
								datosNotificacion += "<nucleoUrbano>" + ubicacion + "</nucleoUrbano>";
								datosNotificacion += "<num>" + (Utilidades.isEmpty(u.getNumero()) ? "" : u.getNumero().toString()) + "</num>";
								resumen += !Utilidades.isEmpty(u.getNumero()) ? (" Nº " + u.getNumero().toString()) : "";
								datosNotificacion += "<letra>" + (Utilidades.isEmpty(u.getLetra()) ? "" : u.getLetra()) + "</letra>";
								resumen += !Utilidades.isEmpty(u.getLetra()) ? ("Let. " + u.getLetra()) : "";
								datosNotificacion += "<bloque>" + (Utilidades.isEmpty(u.getBloque()) ? "" : u.getBloque()) + "</bloque>";
								resumen += !Utilidades.isEmpty(u.getBloque()) ? ("Blq. " + u.getBloque()) : "";
								datosNotificacion += "<escalera>" + (Utilidades.isEmpty(u.getEscalera()) ? "" : u.getEscalera()) + "</escalera>";
								resumen += !Utilidades.isEmpty(u.getEscalera()) ? ("Esc. " + u.getEscalera()) : "";
								datosNotificacion += "<planta>" + (Utilidades.isEmpty(u.getPlanta()) ? "" : u.getPlanta()) + "</planta>";
								resumen += !Utilidades.isEmpty(u.getPlanta()) ? ("Pla. " + u.getPlanta()) : "";
								datosNotificacion += "<puerta>" + (Utilidades.isEmpty(u.getPuerta()) ? "" : u.getPuerta()) + "</puerta>";
								resumen += !Utilidades.isEmpty(u.getPuerta()) ? ("Pta. " + u.getPuerta()) : "";
								datosNotificacion += "<km>" + (u.getKm() == null ? "" : u.getKm()) + "</km>";
								String municipio = municipioBO.findById(c.getMunicipioDTO().getId()).getNombre();
								String provincia = provinciaBO.findById(c.getMunicipioDTO().getId().getCoProvincia()).getNombre();
								resumen += ", " + u.getCp().toString() + ", " + municipio + " (" + provincia + ")";
								datosNotificacion += "<resumenDomicilio>" + resumen + "</resumenDomicilio>";
								datosNotificacion += "</domicilioNotificacionActual>";
							}
						}
					}
					datosNotificacion += "</domiciliosNotificacionActuales>";
				}

				xmlRespuesta += "<propiedades>";
				xmlRespuesta += "<codigoOperacion>01</codigoOperacion>";
				xmlRespuesta += "<codigoProcedimiento>" + doc.getElementsByTagName("propiedades").item(0).getChildNodes().item(1).getTextContent() + "</codigoProcedimiento>";
				xmlRespuesta += "<usuario>" + doc.getElementsByTagName("propiedades").item(0).getChildNodes().item(2).getTextContent() + "</usuario>";
				xmlRespuesta += "<contraseña>" + doc.getElementsByTagName("propiedades").item(0).getChildNodes().item(3).getTextContent() + "</contraseña>";
				xmlRespuesta += "<codigoError>" + codigoError + "</codigoError>";
				xmlRespuesta += "</propiedades>";
				xmlRespuesta += "<datosPantallaAlta>";
				xmlRespuesta += "<nifContribuyente>" + doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes().item(0).getTextContent() + "</nifContribuyente>";
				xmlRespuesta += "<nombreContribuyente>" + doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes().item(1).getTextContent() + "</nombreContribuyente>";
				xmlRespuesta += datosNotificacion;
				xmlRespuesta += "</datosPantallaAlta>";
			}
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}
		xmlRespuesta += "</wsdo2>";
		//xmlRespuesta+="</xml>";

		return codigoError;
	}

	private String wsdomic4(Document doc) {
		//retorna codigo de error y modifica el documento que llega
		String codigoError = "0";
		NodeList elementos = null;
		String coCliente = "";

		try {
			elementos = doc.getElementsByTagName("datosExpediente").item(0).getChildNodes();
			if (elementos.getLength() > 0 && elementos.item(0).getChildNodes().item(0).getNodeName().equals("nifContribuyente")) {
				String nif = elementos.item(0).getChildNodes().item(0).getTextContent();
				nif = nif.trim();
				String nombreCliente = "";
				if (elementos.item(0).getChildNodes().item(1).getNodeName().equals("nombreContribuyente")) nombreCliente = elementos.item(0).getChildNodes().item(1).getTextContent();

				coCliente = comprobarCliente(nif, nombreCliente);
				if (NIF_INEXISTENTE.equals(coCliente) || CLIENTE_INACTIVO.equals(coCliente)) {
					codigoError = coCliente;
				}

				if (codigoError.equals("0")) {
					NodeList datosNuevoDomicilioFiscal = elementos.item(1).getChildNodes();
					for (int i = 0; i < datosNuevoDomicilioFiscal.getLength(); i++) {
						Node dato = datosNuevoDomicilioFiscal.item(i);
						if (dato.getNodeName().equals("provinciaNotN")) {
							if (dato.getTextContent().length() != 2) codigoError = MUNICIPIO_INCORRECTO;
						} else if (dato.getNodeName().equals("municipioNotN")) {
							if (dato.getTextContent().length() != 3) codigoError = MUNICIPIO_INCORRECTO;
						} else if (dato.getNodeName().equals("provinciaNotN")) {
							if (dato.getTextContent().length() != 2) codigoError = MUNICIPIO_INCORRECTO;
						} else if (dato.getNodeName().equals("siglaViaN")) {
							if (dato.getTextContent().length() == 0) codigoError = MUNICIPIO_INCORRECTO;
						} else if (dato.getNodeName().equals("nombreViaN")) {
							if (dato.getTextContent().length() == 0) codigoError = MUNICIPIO_INCORRECTO;
						}
					}
					if (codigoError.equals("0")) {
						String nombreProvincia = provinciaBO.findById(doc.getElementsByTagName("provinciaNotN").item(0).getTextContent()).getNombre();
						MunicipioDTOId mId = new MunicipioDTOId(doc.getElementsByTagName("provinciaNotN").item(0).getTextContent(), doc.getElementsByTagName("municipioNotN").item(0).getTextContent());
						String nombreMunicipio = municipioBO.findById(mId).getNombre();
						Map<String, Object> listaResultados = comprobarDomicilioBO.execute(Long.parseLong(coCliente), "", "", nombreProvincia, nombreMunicipio, traduceSigla(datosNuevoDomicilioFiscal
								.item(3).getTextContent()), Utilidades.isEmpty(datosNuevoDomicilioFiscal.item(4).getTextContent()) ? "" : datosNuevoDomicilioFiscal.item(4).getTextContent()
								.toUpperCase(), Utilidades.isEmpty(datosNuevoDomicilioFiscal.item(6).getTextContent()) ? null : Integer.parseInt(datosNuevoDomicilioFiscal.item(6).getTextContent()),
																							datosNuevoDomicilioFiscal.item(7).getTextContent(), datosNuevoDomicilioFiscal.item(9).getTextContent(),
																							datosNuevoDomicilioFiscal.item(10).getTextContent(), Utilidades.isEmpty(datosNuevoDomicilioFiscal.item(12)
																									.getTextContent()) ? null : new BigDecimal(datosNuevoDomicilioFiscal.item(12).getTextContent()),
																							datosNuevoDomicilioFiscal.item(11).getTextContent(), datosNuevoDomicilioFiscal.item(8).getTextContent(),
																							Utilidades.isEmpty(datosNuevoDomicilioFiscal.item(2).getTextContent()) ? null : Integer
																									.parseInt(datosNuevoDomicilioFiscal.item(2).getTextContent()), "", 0);
						Long coDomicilio = Long.parseLong(((BigDecimal) listaResultados.get("resultado")).toString());
						if (coDomicilio.equals(Long.parseLong("-1")))
							codigoError = DOMICILIO_INCORRECTO;
						else {
							DomicilioDTO d = domicilioBO.findById(coDomicilio);
							List<DomicilioDTO> domicilios = domicilioBO.findFiltered(new String[] {"clienteDTO.coCliente", "boFiscalMunicipal"}, new Object[] {Long.parseLong(coCliente), true});
							DomicilioDTO domicilioAnterior = new DomicilioDTO();
							if (!domicilios.isEmpty() && !domicilios.get(0).getCoDomicilio().equals(coDomicilio)) {
								domicilioAnterior = domicilios.get(0);
								domicilioAnterior.setBoFiscalMunicipal(false);
								domicilioAnterior.setFhActualizacion(new Date());
								domicilioAnterior.setCoUsuarioActualizacion("subsede");
								domicilioBO.save(domicilioAnterior);
							}

							if (d.getBoFiscalMunicipal() == null || !d.getBoFiscalMunicipal()) {
								d.setBoFiscalMunicipal(true);
								d.setFhActualizacion(new Date());
								d.setCoUsuarioActualizacion("subsede");
								domicilioBO.save(d);

								ArrayList<String> parametrosBatchLanzar = new ArrayList<String>();
								parametrosBatchLanzar.add(domicilioAnterior.getCoDomicilio().toString());
								parametrosBatchLanzar.add(d.getCoDomicilio().toString());
								try {
									Batch.lanzar(ValoresParametrosConfig.VALOR_BATCH_MODIFICAR_DOMICILIO_FISCAL, "subsede", parametrosBatchLanzar, DatosSesion.getImpresora(), new AccesoPlantillaVO());
								} catch (Exception e) {
									log.error("Error en webservice", e);
								}
							}
						}
					}
				}
			}

		} catch (Exception e) {
			log.error("Error en webservice", e);
			codigoError = "24";
		}

		return codigoError;
	}

	private String wsdomic5(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega
		String codigoError = "0";
		NodeList elementos = null;
		boolean altaParcial = false;
		boolean alta = false;
		String coCliente = "";
		ClienteDTO clienteDTO = new ClienteDTO();

		try {
			elementos = doc.getElementsByTagName("datosExpediente").item(0).getChildNodes();
			if (elementos.getLength() > 0 && elementos.item(0).getChildNodes().item(0).getNodeName().equals("nifContribuyente")) {
				String nif = elementos.item(0).getChildNodes().item(0).getTextContent();
				nif = nif.trim();
				String nombreCliente = "";
				if (elementos.item(0).getChildNodes().item(1).getNodeName().equals("nombreContribuyente")) nombreCliente = elementos.item(0).getChildNodes().item(1).getTextContent();

				coCliente = comprobarCliente(nif, nombreCliente);
				if (NIF_INEXISTENTE.equals(coCliente) || CLIENTE_INACTIVO.equals(coCliente)) {
					codigoError = coCliente;
				} else {
					clienteDTO = clienteBO.findById(Long.parseLong(coCliente));
				}

				if (codigoError.equals("0")) {
					NodeList datosNuevoDomicilioFiscal = elementos.item(2).getChildNodes();
					for (int i = 0; i < datosNuevoDomicilioFiscal.getLength(); i++) {
						Node dato = datosNuevoDomicilioFiscal.item(i);
						if (dato.getNodeName().equals("provinciaNotN")) {
							if (dato.getTextContent().length() != 2) codigoError = MUNICIPIO_INCORRECTO;
						} else if (dato.getNodeName().equals("municipioNotN")) {
							if (dato.getTextContent().length() != 3) codigoError = MUNICIPIO_INCORRECTO;
						} else if (dato.getNodeName().equals("provinciaNotN")) {
							if (dato.getTextContent().length() != 2) codigoError = MUNICIPIO_INCORRECTO;
						} else if (dato.getNodeName().equals("siglaViaN")) {
							if (dato.getTextContent().length() == 0) codigoError = MUNICIPIO_INCORRECTO;
						} else if (dato.getNodeName().equals("nombreViaN")) {
							if (dato.getTextContent().length() == 0) codigoError = MUNICIPIO_INCORRECTO;
						}
					}
					if (codigoError.equals("0")) {
						NodeList tributos = doc.getElementsByTagName("tributo");
						for (int i = 0; i < tributos.getLength(); i++) {
							Node conceptoDTO = tributos.item(i);
							if (conceptoBO.findById(conceptoDTO.getTextContent()) == null) {
								codigoError = CONCEPTO_INCORRECTO;
								altaParcial = true;
							} else {
								Long coDomicilio = null;
								DomicilioDTO d = new DomicilioDTO();
								if (!alta) {
									NodeList datosNuevoDomicilioNotificacion = doc.getElementsByTagName("domiNotificacion").item(0).getChildNodes();
									String nombreProvincia = provinciaBO.findById(doc.getElementsByTagName("provinciaNot").item(0).getTextContent()).getNombre();
									MunicipioDTOId mId = new MunicipioDTOId(doc.getElementsByTagName("provinciaNot").item(0).getTextContent(), doc.getElementsByTagName("municipioNot").item(0)
											.getTextContent());
									String nombreMunicipio = municipioBO.findById(mId).getNombre();
									Map<String, Object> listaResultados = comprobarDomicilioBO.execute(Long.parseLong(coCliente), "", "", nombreProvincia, nombreMunicipio,
																										traduceSigla(datosNuevoDomicilioNotificacion.item(3).getTextContent()), Utilidades
																												.isEmpty(datosNuevoDomicilioNotificacion.item(4).getTextContent()) ? ""
																												: datosNuevoDomicilioNotificacion.item(4).getTextContent().toUpperCase(), Utilidades
																												.isEmpty(datosNuevoDomicilioNotificacion.item(6).getTextContent()) ? null : Integer
																												.parseInt(datosNuevoDomicilioNotificacion.item(6).getTextContent()),
																										datosNuevoDomicilioNotificacion.item(7).getTextContent(), datosNuevoDomicilioNotificacion
																												.item(9).getTextContent(), datosNuevoDomicilioNotificacion.item(10).getTextContent(),
																										Utilidades.isEmpty(datosNuevoDomicilioNotificacion.item(12).getTextContent()) ? null
																												: new BigDecimal(datosNuevoDomicilioNotificacion.item(12).getTextContent()),
																										datosNuevoDomicilioNotificacion.item(11).getTextContent(), datosNuevoDomicilioNotificacion
																												.item(8).getTextContent(), Utilidades.isEmpty(datosNuevoDomicilioNotificacion.item(2)
																												.getTextContent()) ? null : Integer.parseInt(datosNuevoDomicilioNotificacion.item(2)
																												.getTextContent()), "0001", 0);
									coDomicilio = Long.parseLong(((BigDecimal) listaResultados.get("resultado")).toString());
									if (coDomicilio.equals(Long.parseLong("-1")))
										codigoError = DOMICILIO_INCORRECTO;
									else {
										d = domicilioBO.findById(coDomicilio);
										if (d.getBoNotificacion() == null || !d.getBoNotificacion()) {
											d.setBoNotificacion(true);
											d.setFhActualizacion(new Date());
											d.setCoUsuarioActualizacion("subsede");
											domicilioBO.save(d);
										}
									}
								}
								if (codigoError.equals("0")) {
									MunicipioDTO m = municipioBO.findById(new MunicipioDTOId(doc.getElementsByTagName("provinciaNot").item(0).getTextContent(), doc
											.getElementsByTagName("municipioNot").item(0).getTextContent()));
									boolean haSidoModificado = false;
									List<DomicilioNotificacionDTO> domiciliosNotificacion = domicilioNotificacionBO.findFiltered(new String[] {"coModeloCenso", "coVersionCenso", "coDocumentoCenso",
											"clienteDTO.coCliente", "conceptoDTO.coConcepto"}, new Object[] {"***", "*", "*********", Long.parseLong(coCliente), conceptoDTO.getTextContent()});

									Date fechaDesde = new Date();
									DomicilioNotificacionDTO dn = new DomicilioNotificacionDTO();
									if (domiciliosNotificacion.isEmpty()) {
										dn.setDomicilioDTO(d);
										dn.setClienteDTO(clienteDTO);
										dn.setConceptoDTO(conceptoBO.findById(conceptoDTO.getTextContent()));
										dn.setModeloVersionDTO(modeloVersionBO.findById(new ModeloVersionDTOId("***", "*")));
										dn.setMunicipioDTO(m);
										dn.setCoModeloCenso("***");
										dn.setCoVersionCenso("*");
										dn.setCoDocumentoCenso("*********");
										dn.setFxVigenciaDesde(fechaDesde);
										dn.setFxVigenciaHasta(Utilidades.DDMMYYYYToDate("31/12/2099"));
										dn.setFhActualizacion(new Date());
										dn.setCoUsuarioActualizacion("subsede");
										domicilioNotificacionBO.save(dn);
										haSidoModificado = true;
									} else {
										for (int j = 0; j < domiciliosNotificacion.size(); j++) {
											boolean modifico = false;
											dn = domiciliosNotificacion.get(j);
											if (!dn.getDomicilioDTO().getCoDomicilio().equals(coDomicilio)) {
												dn.setDomicilioDTO(d);
												dn.setMunicipioDTO(m);
												modifico = true;
											}
											if (!dn.getFxVigenciaHasta().equals(Utilidades.DDMMYYYYToDate("31/12/2099"))) {
												dn.setFxVigenciaHasta(Utilidades.DDMMYYYYToDate("31/12/2099"));
												modifico = true;
											}
											if (modifico) {
												dn.setFhActualizacion(new Date());
												dn.setCoUsuarioActualizacion("subsede");
												domicilioNotificacionBO.save(dn);
												haSidoModificado = true;
											}
										}

										//ajustamos vigencias para evitar solapamientos
										List<DomicilioNotificacionDTO> domiciliosVigentes = domicilioNotificacionBO.findFiltered(new String[] {"coModeloCenso", "coVersionCenso", "coDocumentoCenso",
												"clienteDTO.coCliente", "conceptoDTO.coConcepto"}, new Object[] {"***", "*", "*********", Long.parseLong(coCliente), conceptoDTO.getTextContent()});

										boolean modificado = false;
										for (DomicilioNotificacionDTO dnDTO : domiciliosVigentes) {
											if (dnDTO.getDomicilioDTO().getCoDomicilio().equals(coDomicilio) && !dnDTO.getFxVigenciaDesde().after(dn.getFxVigenciaDesde())
												&& !dnDTO.getFxVigenciaHasta().before(dn.getFxVigenciaHasta()) && !dnDTO.getFxVigenciaHasta().equals(Utilidades.DDMMYYYYToDate("31/12/2099"))) {
												dnDTO.setFxVigenciaHasta(Utilidades.DDMMYYYYToDate("31/12/2099"));
												modificado = true;
											} else {
												if (dnDTO.getDomicilioDTO().getCoDomicilio().equals(coDomicilio) && !dnDTO.getFxVigenciaDesde().after(fechaDesde)
													&& dnDTO.getFxVigenciaHasta().before(fechaDesde)) {
													dnDTO.setFxVigenciaDesde(fechaDesde);
													dnDTO.setFxVigenciaHasta(Utilidades.DDMMYYYYToDate("31/12/2099"));
													modificado = true;
												} else {
													if (dnDTO.getDomicilioDTO().getCoDomicilio().equals(coDomicilio) && dnDTO.getFxVigenciaDesde().after(fechaDesde)) {
														dnDTO.setFxVigenciaDesde(fechaDesde);
														if (!dnDTO.getFxVigenciaHasta().equals(Utilidades.DDMMYYYYToDate("31/12/2099")))
															dnDTO.setFxVigenciaHasta(Utilidades.DDMMYYYYToDate("31/12/2099"));
														modificado = true;
													} else {
														if (!dnDTO.getDomicilioDTO().getCoDomicilio().equals(coDomicilio) && dnDTO.getFxVigenciaDesde().after(fechaDesde)) {
															domicilioNotificacionBO.delete(dnDTO.getCoDomicilioNotificacion());
															haSidoModificado = true;
														} else {
															if (!dnDTO.getDomicilioDTO().getCoDomicilio().equals(coDomicilio) && dnDTO.getFxVigenciaDesde().before(fechaDesde)
																&& !dnDTO.getFxVigenciaHasta().before(fechaDesde)) {
																dnDTO.setFxVigenciaHasta(new Date());
																modificado = true;
															}
														}
													}
												}
											}

											if (modificado) {
												dnDTO.setFhActualizacion(new Date());
												dnDTO.setCoUsuarioActualizacion("subsede");
												domicilioNotificacionBO.save(dnDTO);
												haSidoModificado = true;
											}
										}

										List<DomicilioNotificacionDTO> domicilios = domicilioNotificacionBO.findFiltered(new String[] {"coModeloCenso", "coVersionCenso", "coDocumentoCenso",
												"clienteDTO.coCliente", "conceptoDTO.coConcepto"}, new Object[] {"***", "*", "*********", Long.parseLong(coCliente), conceptoDTO.getTextContent()});

										if (domicilios.isEmpty()) {
											Date fechaVigenciaDesde = new Date();
											DomicilioNotificacionDTO domicilioNotificacionDTO = new DomicilioNotificacionDTO();
											domicilioNotificacionDTO.setDomicilioDTO(d);
											domicilioNotificacionDTO.setClienteDTO(clienteDTO);
											domicilioNotificacionDTO.setConceptoDTO(conceptoBO.findById(conceptoDTO.getTextContent()));
											domicilioNotificacionDTO.setModeloVersionDTO(modeloVersionBO.findById(new ModeloVersionDTOId("***", "*")));
											domicilioNotificacionDTO.setMunicipioDTO(m);
											domicilioNotificacionDTO.setCoModeloCenso("***");
											domicilioNotificacionDTO.setCoVersionCenso("*");
											domicilioNotificacionDTO.setCoDocumentoCenso("*********");
											domicilioNotificacionDTO.setFxVigenciaDesde(fechaVigenciaDesde);
											domicilioNotificacionDTO.setFxVigenciaHasta(Utilidades.DDMMYYYYToDate("31/12/2099"));
											domicilioNotificacionDTO.setFhActualizacion(new Date());
											domicilioNotificacionDTO.setCoUsuarioActualizacion("subsede");
											domicilioNotificacionBO.save(domicilioNotificacionDTO);
										}
									}
									if (haSidoModificado) alta = true;
								}
							}
						}

						if (!alta) {
							if (codigoError.equals("0")) codigoError = ERROR_ALTA_DOM_NOTIFICACION;
						} else {
							if (altaParcial) codigoError = NO_ALTA_DOM_NOTIF_TODOS_CONCEPTOS;
						}
					}
				}
			}

		} catch (Exception e) {
			log.error("Error en webservice", e);
			codigoError = ERROR_DATOS;
		}

		return codigoError;
	}

	private String wsbonif1(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega
		String codigoError = "0";
		NodeList elementos = null;
		String refObjetoTributarias = "";
		ClienteDTO clienteDTO = new ClienteDTO();
		String coCliente = "";

		xmlRespuesta = "";
		xmlRespuesta += "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
		xmlRespuesta += "<wsbon>";

		elementos = doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes();
		if (elementos.getLength() > 0 && elementos.item(0).getNodeName().equals("nifContribuyente")) {
			String nif = elementos.item(0).getTextContent();
			nif = nif.trim();
			String nombreCliente = "";
			if (elementos.item(1).getNodeName().equals("nombreContribuyente")) nombreCliente = elementos.item(1).getTextContent();

			coCliente = comprobarCliente(nif, nombreCliente);
			if (NIF_INEXISTENTE.equals(coCliente) || CLIENTE_INACTIVO.equals(coCliente)) {
				codigoError = coCliente;
			} else {
				clienteDTO = clienteBO.findById(Long.parseLong(coCliente));
			}

			if (codigoError.equals("0")) {
				String municipio = elementos.item(2).getTextContent();
				if (municipio.length() == 5) municipio = municipio.substring(2);
				if (municipioBO.findById(new MunicipioDTOId("11", municipio)) == null)
					codigoError = "19";
				else {
					String concepto = elementos.item(3).getTextContent();
					if (conceptoBO.findById(concepto) == null) codigoError = "20";
					/*else {
						String tipo = elementos.item(3).getTextContent();
						if(!TablaGt.isElemento(TablaGtConstants.TABLA_TIPOS_BONIFICACION, tipo))
							codigoError = "21";
					}*/
				}
				if (codigoError.equals("0")) {
					refObjetoTributarias += "<refObjetoTributarias>";
					DetachedCriteria criterio = DetachedCriteria.forClass(DocumentoCensoDTO.class);

					criterio.createAlias("documentoDTO", "d");

					criterio.add(Restrictions.eq("d.clienteDTO.coCliente", clienteDTO.getCoCliente()));
					criterio.add(Restrictions.eq("d.municipioDTO.id", new MunicipioDTOId("11", municipio)));
					criterio.add(Restrictions.eq("d.conceptoDTO.coConcepto", elementos.item(3).getTextContent()));
					criterio.add(Restrictions.eq("boActivo", true));

					List<DocumentoCensoDTO> documentos = documentoCensoBO.findByCriteria(criterio);
					for (DocumentoCensoDTO documentoCensoDTO : documentos) {
						DocumentoDTO d = documentoBO.findById(documentoCensoDTO.getDocumentoDTO().getId());
						refObjetoTributarias += "<refObjetoTributaria>";
						refObjetoTributarias += "<referenciaObjetoTributaria>" + d.getRefObjTributario1() + "</referenciaObjetoTributaria>";
						refObjetoTributarias += "</refObjetoTributaria>";
					}
					refObjetoTributarias += "</refObjetoTributarias>";
				}
			}
		}

		xmlRespuesta += "<propiedades>";
		xmlRespuesta += "<codigoOperacion>01</codigoOperacion>";
		xmlRespuesta += "<codigoProcedimiento>" + doc.getElementsByTagName("propiedades").item(0).getChildNodes().item(1).getTextContent() + "</codigoProcedimiento>";
		xmlRespuesta += "<usuario>" + doc.getElementsByTagName("propiedades").item(0).getChildNodes().item(2).getTextContent() + "</usuario>";
		xmlRespuesta += "<contraseña>" + doc.getElementsByTagName("propiedades").item(0).getChildNodes().item(3).getTextContent() + "</contraseña>";
		xmlRespuesta += "<codigoError>" + codigoError + "</codigoError>";
		xmlRespuesta += "</propiedades>";
		xmlRespuesta += "<datosPantallaAlta>";
		xmlRespuesta += "<nifContribuyente>" + doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes().item(0).getTextContent() + "</nifContribuyente>";
		xmlRespuesta += "<nombreContribuyente>" + doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes().item(1).getTextContent() + "</nombreContribuyente>";
		xmlRespuesta += "<municipio>" + doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes().item(2).getTextContent() + "</municipio>";
		xmlRespuesta += "<concepto>" + doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes().item(3).getTextContent() + "</concepto>";
		//xmlRespuesta+="<tipo>"+doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes().item(4).getTextContent()+"</tipo>";
		xmlRespuesta += refObjetoTributarias;
		xmlRespuesta += "</datosPantallaAlta>";
		xmlRespuesta += "</wsbon>";
		//xmlRespuesta+="</xml>";

		return codigoError;
	}

	private String wsbonif3(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega
		String codigoError = "0";
		NodeList elementos = null;
		boolean altaParcial = false;
		boolean alta = true;
		String coCliente = "";

		try {

			elementos = doc.getElementsByTagName("contribuyenteRepresentante").item(0).getChildNodes();
			if (elementos.getLength() > 0 && elementos.item(0).getNodeName().equals("nifContribuyente")) {
				String nif = elementos.item(0).getTextContent();
				nif = nif.trim();
				String nombreCliente = "";
				if (elementos.item(1).getNodeName().equals("nombreContribuyente")) nombreCliente = elementos.item(1).getTextContent();

				coCliente = comprobarCliente(nif, nombreCliente);
				if (NIF_INEXISTENTE.equals(coCliente) || CLIENTE_INACTIVO.equals(coCliente)) {
					codigoError = coCliente;
				}

				if (codigoError.equals("0")) {
					//alta bonificacion
					NodeList seleccionBonificaciones = doc.getElementsByTagName("seleccionBonificaciones").item(0).getChildNodes();
					// validamos datos
					for (int i = 0; i < seleccionBonificaciones.getLength() && codigoError.equals("0"); i++) {
						Node b = seleccionBonificaciones.item(i);
						NodeList datos = b.getChildNodes();
						if (datos.getLength() == 8) {
							for (int j = 0; j < datos.getLength() && codigoError.equals("0"); j++) {
								switch (j) {
									case 0:
										if (datos.item(j).getNodeName().equals("municipio")) {
											String municipio = datos.item(j).getTextContent();
											if (municipioBO.findById(new MunicipioDTOId("11", municipio)) == null) codigoError = "19";
										}
										break;
									case 1:
										if (datos.item(j).getNodeName().equals("concepto")) {
											if (conceptoBO.findById(datos.item(j).getTextContent()) == null) codigoError = "20";
										}
										break;
									case 2:
										if (datos.item(j).getNodeName().equals("referenciaObjetoTributaria")) {
											if (Utilidades.isEmpty(datos.item(j).getTextContent())) codigoError = ERROR_DATOS;
										}
										break;
									case 5:
										if (datos.item(j).getNodeName().equals("desde")) {
											if (Utilidades.isEmpty(datos.item(j).getTextContent()) || Integer.parseInt(datos.item(j).getTextContent()) == 0) {
												codigoError = ERROR_DATOS;
											} else {
												if (Integer.parseInt(datos.item(j).getTextContent()) < 1900) codigoError = ERROR_DATOS;

											}
										}
										break;
								}
							}
							if (!codigoError.equals("0")) {
								altaParcial = true;
								alta = false;
							} else {
								//damos de alta la bonificacion
								BonificacionDTO boni = new BonificacionDTO();
								boni.setMunicipioDTO(municipioBO.findById(new MunicipioDTOId("11", datos.item(0).getTextContent())));
								boni.setConceptoDTO(conceptoBO.findById(datos.item(1).getTextContent()));
								boni.setClienteDTO(clienteBO.findById(Long.parseLong(coCliente)));
								boni.setRefObjTributario(datos.item(2).getTextContent());
								boni.setAnoInicio(Short.parseShort(datos.item(5).getTextContent()));
								boni.setAnoFin(Short.parseShort(datos.item(6).getTextContent()));
								boolean boActiva = false;
								if (datos.item(7).getTextContent() != null && datos.item(7).getTextContent().equals("1")) {
									boActiva = true;
								}
								boni.setBoActiva(boActiva);
								boni.setOrden(Byte.valueOf("0"));
								boni.setTipoBonificacion(datos.item(3).getTextContent());
								boni.setDetalle("@CERCA");
								boni.setDescripcion("BONIFICACION DADA DE ALTA DESDE @CERCA, PENDIENTE DE CONFIRMACION");
								boni.setFhActualizacion(new Date());
								boni.setCoUsuarioActualizacion("subsede");
								bonificacionBO.save(boni);
							}
						}
					}
				}
				if (!alta)
					codigoError = "22";
				else {
					if (altaParcial) codigoError = "23";
				}
			}
		} catch (Exception e) {
			log.error("Error en webservice", e);
			codigoError = "24";
		}

		return codigoError;
	}

	private String wsrepre2(Document doc) {
		//retorna codigo de error y modifica el documento que llega
		String codigoError = "0";
		NodeList elementos = null;
		String coCliente = "";

		try {
			elementos = doc.getElementsByTagName("datosInteresado").item(0).getChildNodes();
			if (elementos.getLength() > 0 && elementos.item(0).getNodeName().equals("nifInteresado")) {
				String nif = elementos.item(0).getTextContent();
				nif = nif.trim();
				String nombreCliente = "";
				if (elementos.item(1).getNodeName().equals("nombreInteresado")) nombreCliente = elementos.item(1).getTextContent();

				coCliente = comprobarCliente(nif, nombreCliente);
				if (NIF_INEXISTENTE.equals(coCliente) || CLIENTE_INACTIVO.equals(coCliente)) {
					codigoError = coCliente;
				}
			}

		} catch (Exception e) {
			log.error("Error en webservice", e);
			codigoError = "24";
		}

		return codigoError;
	}

	private String wsrepre3(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega
		String codigoError = "0";
		NodeList elementos = null;
		ClienteDTO clienteDTO = new ClienteDTO();
		ClienteDTO clienteRepresentanteDTO = new ClienteDTO();
		String existeRepresentacion = "";
		String error = "";
		boolean todasRepresentaciones = true;
		String coCliente = "";

		try {
			elementos = doc.getElementsByTagName("datosInteresado").item(0).getChildNodes();
			if (elementos.getLength() > 0 && elementos.item(0).getNodeName().equals("nifInteresado")) {
				String nif = elementos.item(0).getTextContent();
				nif = nif.trim();
				String nombreCliente = "";
				if (elementos.item(1).getNodeName().equals("nombreInteresado")) nombreCliente = elementos.item(1).getTextContent();

				coCliente = comprobarCliente(nif, nombreCliente);
				if (NIF_INEXISTENTE.equals(coCliente) || CLIENTE_INACTIVO.equals(coCliente)) {
					codigoError = coCliente;
				} else {
					clienteDTO = clienteBO.findById(Long.parseLong(coCliente));
				}
			}

			if (codigoError.equals("0")) {
				elementos = doc.getElementsByTagName("representanteLegal").item(0).getChildNodes();
				if (elementos.getLength() > 0 && elementos.item(0).getNodeName().equals("nifRepresentante")) {
					String nif = elementos.item(0).getTextContent();
					nif = nif.trim();
					List<ClienteDTO> clientes = clienteBO.findFiltered("identificador", nif.toUpperCase());
					if (clientes.isEmpty())
						codigoError = NIF_INEXISTENTE;
					else {
						if (clientes.size() == 1) {
							if (!clientes.get(0).isBoActivo())
								codigoError = "12";
							else clienteRepresentanteDTO = clientes.get(0);
						} else codigoError = "13";
					}
				}

				if (codigoError.equals("0")) {
					if (elementos.item(3).getNodeName().equals("provinciaNot")) {
						if (elementos.item(3).getTextContent().length() != 2) codigoError = "15";
					}
					if (elementos.item(4).getNodeName().equals("municipioNot")) {
						if (elementos.item(4).getTextContent().length() != 3) codigoError = "15";
					}
					if (elementos.item(6).getNodeName().equals("siglaVia")) {
						if (elementos.item(6).getTextContent().length() == 0) codigoError = "15";
					}
					if (elementos.item(7).getNodeName().equals("nombreVia")) {
						if (elementos.item(7).getTextContent().length() == 0) codigoError = "15";
					}

					if (codigoError.equals("0")) {
						String nombreProvincia = provinciaBO.findById(elementos.item(3).getTextContent()).getNombre();
						String nombreMunicipio = municipioBO.findById(new MunicipioDTOId(elementos.item(3).getTextContent(), elementos.item(4).getTextContent())).getNombre();
						Map<String, Object> listaResultados = comprobarDomicilioBO.execute(clienteRepresentanteDTO.getCoCliente(), "", "", nombreProvincia, nombreMunicipio, traduceSigla(elementos
								.item(6).getTextContent()), Utilidades.isEmpty(elementos.item(7).getTextContent()) ? "" : elementos.item(7).getTextContent().toUpperCase(), Utilidades
								.isEmpty(elementos.item(9).getTextContent()) ? null : Integer.parseInt(elementos.item(9).getTextContent()), elementos.item(10).getTextContent(), elementos.item(12)
								.getTextContent(), elementos.item(13).getTextContent(), Utilidades.isEmpty(elementos.item(15).getTextContent()) ? null : new BigDecimal(elementos.item(15)
								.getTextContent()), elementos.item(14).getTextContent(), elementos.item(11).getTextContent(), Utilidades.isEmpty(elementos.item(5).getTextContent()) ? null : Integer
								.parseInt(elementos.item(5).getTextContent()), "", 0);
						Long coDomicilio = Long.parseLong(((BigDecimal) listaResultados.get("resultado")).toString());
						if (coDomicilio.equals(Long.parseLong("-1")))
							codigoError = "15";
						else {
							DomicilioDTO domicilioDTO = domicilioBO.findById(coDomicilio);
							List<DomicilioDTO> domicilios = domicilioBO.findFiltered(new String[] {"clienteDTO.coCliente", "boFiscalMunicipal"}, new Object[] {clienteRepresentanteDTO.getCoCliente(),
									true});
							DomicilioDTO domicilioAnterior = new DomicilioDTO();
							if (!domicilios.isEmpty() && !domicilios.get(0).getCoDomicilio().equals(coDomicilio)) {
								domicilioAnterior = domicilios.get(0);
								domicilioAnterior.setBoFiscalMunicipal(false);
								domicilioAnterior.setFhActualizacion(new Date());
								domicilioAnterior.setCoUsuarioActualizacion("subsede");
								domicilioBO.save(domicilioAnterior);
							}
							if (domicilioDTO.getBoFiscalMunicipal() == null || !domicilioDTO.getBoFiscalMunicipal()) {
								domicilioDTO.setBoFiscalMunicipal(true);
								domicilioDTO.setFhActualizacion(new Date());
								domicilioDTO.setCoUsuarioActualizacion("subsede");
								domicilioBO.save(domicilioDTO);
								ArrayList<String> parametrosBatchLanzar = new ArrayList<String>();
								parametrosBatchLanzar.add(domicilioAnterior.getCoDomicilio().toString());
								parametrosBatchLanzar.add(domicilioDTO.getCoDomicilio().toString());
								try {
									Batch.lanzar(ValoresParametrosConfig.VALOR_BATCH_MODIFICAR_DOMICILIO_FISCAL, DatosSesion.getLogin(), parametrosBatchLanzar, DatosSesion.getImpresora(),
													new AccesoPlantillaVO());
								} catch (Exception e) {
									log.error("Error en webservice", e);
								}
							}
						}
					}
				} else {
					if (codigoError.equals(NIF_INEXISTENTE)) {
						//damos de alta el cliente representante
						elementos = doc.getElementsByTagName("representanteLegal").item(0).getChildNodes();
						String nifRepresentante = elementos.item(0).getTextContent();
						String nombreRepresentante = elementos.item(1).getTextContent();
						if (Utilidades.isEmpty(nifRepresentante))
							codigoError = "11";
						else {
							nifRepresentante = nifRepresentante.trim();
							if (Utilidades.isEmpty(nombreRepresentante))
								codigoError = "14";
							else {
								if (!Utilidades.isEmpty(doc.getElementsByTagName("email").item(0).getTextContent())) {
									if (!Utilidades.isFormatoEmail(doc.getElementsByTagName("email").item(0).getTextContent())) codigoError = "16";
								}
								if (codigoError.equals(NIF_INEXISTENTE)) {
									//validamos el formato del nif
									if (!Utilidades.validaIdentificador(nifRepresentante))
										codigoError = "16";
									else {
										//comprobamos el domicilio
										if (elementos.item(3).getNodeName().equals("provinciaNot")) {
											if (elementos.item(3).getTextContent().length() != 2) codigoError = "15";
										} else if (elementos.item(4).getNodeName().equals("municipioNot")) {
											if (elementos.item(4).getTextContent().length() != 3) codigoError = "15";
										} else if (elementos.item(6).getNodeName().equals("siglaVia")) {
											if (elementos.item(6).getTextContent().length() == 0) codigoError = "15";
										} else if (elementos.item(7).getNodeName().equals("nombreVia")) {
											if (elementos.item(7).getTextContent().length() == 0) codigoError = "15";
										}
									}
									if (codigoError.equals(NIF_INEXISTENTE)) {
										clienteRepresentanteDTO.setFxAlta(new Date());
										clienteRepresentanteDTO.setIdentificador(nifRepresentante);
										clienteRepresentanteDTO.setRazonSocial(nombreRepresentante);
										clienteRepresentanteDTO.setBoActivo(true);
										clienteRepresentanteDTO.setCoUsuarioActualizacion("subsede");
										clienteRepresentanteDTO.setFhActualizacion(new Date());
										clienteRepresentanteDTO.setProcedencia("sede");
										clienteBO.save(clienteRepresentanteDTO);

										clienteRepresentanteDTO = clienteBO.findById(clienteRepresentanteDTO.getCoCliente());

										String email = doc.getElementsByTagName("email").item(0).getTextContent();
										if (!Utilidades.isEmpty(email)) {
											ClienteContactoDTO contactoDTO = new ClienteContactoDTO();
											contactoDTO.setContacto(email);
											contactoDTO.setTipo(ClienteContactoBO.TIPO_EMAIL);
											contactoDTO.setBoPreferente(true);
											contactoDTO.setFhActualizacion(new Date());
											contactoDTO.setCoUsuarioActualizacion("subsede");
											contactoDTO.setClienteDTO(clienteRepresentanteDTO);
											((ClienteContactoBO) GadirConfig.getBean("clienteContactoBO")).save(contactoDTO);
										}

										String fax = doc.getElementsByTagName("fax").item(0).getTextContent();
										if (!Utilidades.isEmpty(fax)) {
											ClienteContactoDTO contactoDTO = new ClienteContactoDTO();
											contactoDTO.setContacto(fax);
											contactoDTO.setTipo(ClienteContactoBO.TIPO_FAX);
											contactoDTO.setBoPreferente(true);
											contactoDTO.setFhActualizacion(new Date());
											contactoDTO.setCoUsuarioActualizacion("subsede");
											contactoDTO.setClienteDTO(clienteRepresentanteDTO);
											((ClienteContactoBO) GadirConfig.getBean("clienteContactoBO")).save(contactoDTO);
										}

										String telefono = doc.getElementsByTagName("telefono").item(0).getTextContent();
										if (!Utilidades.isEmpty(telefono)) {
											ClienteContactoDTO contactoDTO = new ClienteContactoDTO();
											contactoDTO.setContacto(telefono);
											contactoDTO.setTipo(ClienteContactoBO.TIPO_TELEFONO);
											contactoDTO.setBoPreferente(true);
											contactoDTO.setFhActualizacion(new Date());
											contactoDTO.setCoUsuarioActualizacion("subsede");
											contactoDTO.setClienteDTO(clienteRepresentanteDTO);
											((ClienteContactoBO) GadirConfig.getBean("clienteContactoBO")).save(contactoDTO);
										}

										String movil = doc.getElementsByTagName("movil").item(0).getTextContent();
										if (!Utilidades.isEmpty(movil)) {
											ClienteContactoDTO contactoDTO = new ClienteContactoDTO();
											contactoDTO.setContacto(movil);
											contactoDTO.setTipo(ClienteContactoBO.TIPO_MOVIL);
											contactoDTO.setBoPreferente(true);
											contactoDTO.setFhActualizacion(new Date());
											contactoDTO.setCoUsuarioActualizacion("subsede");
											contactoDTO.setClienteDTO(clienteRepresentanteDTO);
											((ClienteContactoBO) GadirConfig.getBean("clienteContactoBO")).save(contactoDTO);
										}

										String nombreProvincia = provinciaBO.findById(elementos.item(3).getTextContent()).getNombre();
										String nombreMunicipio = municipioBO.findById(new MunicipioDTOId(elementos.item(3).getTextContent(), elementos.item(4).getTextContent())).getNombre();
										Map<String, Object> listaResultados = comprobarDomicilioBO.execute(clienteRepresentanteDTO.getCoCliente(), "", "", nombreProvincia, nombreMunicipio,
																											traduceSigla(elementos.item(6).getTextContent()), Utilidades.isEmpty(elementos.item(7)
																													.getTextContent()) ? "" : elementos.item(7).getTextContent().toUpperCase(),
																											Utilidades.isEmpty(elementos.item(9).getTextContent()) ? null : Integer.parseInt(elementos
																													.item(9).getTextContent()), elementos.item(10).getTextContent(), elementos.item(12)
																													.getTextContent(), elementos.item(13).getTextContent(), Utilidades
																													.isEmpty(elementos.item(15).getTextContent()) ? null : new BigDecimal(elementos
																													.item(15).getTextContent()), elementos.item(14).getTextContent(), elementos
																													.item(11).getTextContent(), Utilidades.isEmpty(elementos.item(5).getTextContent())
																													? null : Integer.parseInt(elementos.item(5).getTextContent()), "", 0);
										Long coDomicilio = Long.parseLong(((BigDecimal) listaResultados.get("resultado")).toString());
										if (coDomicilio.equals(Long.parseLong("-1")))
											codigoError = "15";
										else {
											DomicilioDTO domicilioDTO = domicilioBO.findById(coDomicilio);
											List<DomicilioDTO> domicilios = domicilioBO.findFiltered(new String[] {"clienteDTO.coCliente", "boFiscalMunicipal"}, new Object[] {
													clienteRepresentanteDTO.getCoCliente(), new Boolean(true)});
											DomicilioDTO domicilioAnterior = new DomicilioDTO();
											if (!domicilios.isEmpty() && !domicilios.get(0).getCoDomicilio().equals(coDomicilio)) {
												domicilioAnterior = domicilios.get(0);
												domicilioAnterior.setBoFiscalMunicipal(false);
												domicilioAnterior.setFhActualizacion(new Date());
												domicilioAnterior.setCoUsuarioActualizacion("subsede");
												domicilioBO.save(domicilioAnterior);
											}
											if (domicilioDTO.getBoFiscalMunicipal() == null || !domicilioDTO.getBoFiscalMunicipal()) {
												domicilioDTO.setBoFiscalMunicipal(true);
												domicilioDTO.setFhActualizacion(new Date());
												domicilioDTO.setCoUsuarioActualizacion("subsede");
												domicilioBO.save(domicilioDTO);

												if (!domicilios.isEmpty() && !domicilios.get(0).getCoDomicilio().equals(coDomicilio)) {
													ArrayList<String> parametrosBatchLanzar = new ArrayList<String>();
													parametrosBatchLanzar.add(domicilioAnterior.getCoDomicilio().toString());
													parametrosBatchLanzar.add(domicilioDTO.getCoDomicilio().toString());
													try {
														Batch.lanzar(ValoresParametrosConfig.VALOR_BATCH_MODIFICAR_DOMICILIO_FISCAL, DatosSesion.getLogin(), parametrosBatchLanzar, DatosSesion
																.getImpresora(), new AccesoPlantillaVO());
													} catch (Exception e) {
														log.error("Error en webservice", e);
													}
												}
											}
											codigoError = "0";
										}
									}
								}
							}
						}
					}
				}

				if (codigoError.equals("0")) {
					NodeList listaRepresentaciones = doc.getElementsByTagName("representacion");
					for (int i = 0; i < listaRepresentaciones.getLength(); i++) {
						ClienteRepresentanteDTO representanteDTO = new ClienteRepresentanteDTO();
						String coCircuito = doc.getElementsByTagName("tipoRepresentacion").item(i).getTextContent();
						Date fxDesde = Utilidades.DDMMYYYYToDate(doc.getElementsByTagName("fechaDesde").item(i).getTextContent());
						Date fxHasta = Utilidades.DDMMYYYYToDate(doc.getElementsByTagName("fechaHasta").item(i).getTextContent());

						List<ClienteRepresentanteDTO> representaciones = new ArrayList<ClienteRepresentanteDTO>();
						DetachedCriteria criterio = DetachedCriteria.forClass(ClienteRepresentanteDTO.class);
						criterio.add(Restrictions.eq("clienteDTO.coCliente", clienteDTO.getCoCliente()));
						criterio.add(Restrictions.eq("representanteDTO.coCliente", clienteRepresentanteDTO.getCoCliente()));
						criterio.add(Restrictions.eq("circuitoDTO.coCircuito", coCircuito).ignoreCase());
						representaciones = clienteRepresentanteBO.findByCriteria(criterio, 0, 1);
						if (representaciones.isEmpty()) {
							CircuitoDTO circuitoDTO = circuitoBO.findById(coCircuito.toUpperCase());
							representanteDTO.setClienteDTO(clienteDTO);
							representanteDTO.setRepresentanteDTO(clienteRepresentanteDTO);
							representanteDTO.setCircuitoDTO(circuitoDTO);
							representanteDTO.setFxDesde(fxDesde);
							representanteDTO.setFxHasta(fxHasta);
							existeRepresentacion = "1";
						} else {
							//TODO guardar situación anterior en histórico

							// comprobamos si el nuevo intervalo está en el actual
							representanteDTO = representaciones.get(0);
							if (!fxDesde.equals(representanteDTO.getFxDesde())) {
								existeRepresentacion = "1";
								representanteDTO.setFxDesde(fxDesde);
							}
							if (!fxHasta.equals(representanteDTO.getFxHasta())) {
								existeRepresentacion = "1";
								representanteDTO.setFxHasta(fxHasta);
							}
							if (Utilidades.isEmpty(existeRepresentacion)) {
								existeRepresentacion = "0";
								error = "No se ha hecho ningún cambio en la representación";
							}
						}

						Element existenciaRepresentacion = doc.createElement("existeRepresentacion");
						existenciaRepresentacion.setTextContent(existeRepresentacion);
						listaRepresentaciones.item(i).appendChild(existenciaRepresentacion);

						if ("1".equals(existeRepresentacion)) {
							//					representanteDTO.setFxDesde(fxDesde);
							//					representanteDTO.setFxHasta(fxHasta);
							representanteDTO.setFhActualizacion(new Date());
							representanteDTO.setCoUsuarioActualizacion("subsede");
							clienteRepresentanteBO.save(representanteDTO);
						} else {
							Element mensajeError = doc.createElement("mensajeError");
							mensajeError.setTextContent(error);
							listaRepresentaciones.item(i).appendChild(mensajeError);
							todasRepresentaciones = false;
						}

					}
				} else {
					todasRepresentaciones = false;
					error = "No se ha dado de alta la representación por existir errores en los datos.";
				}
			}

		} catch (Exception e) {
			log.error("Error en webservice", e);
			codigoError = ERROR_DATOS;
			existeRepresentacion = "0";
			error = "Error dando de alta representación.";
		}

		if (!"0".equals(codigoError) || !todasRepresentaciones) {
			XPathFactory factory = XPathFactory.newInstance();
			XPath xpath = factory.newXPath();
			Node datosRepresentacion;
			Node existenciaRepresentacion;
			try {
				datosRepresentacion = limpiaCreaElemento("/" + prefijo + "/datosExpediente/datosRepresentacion", xpath, doc);
				datosRepresentacion.setTextContent("");

				existenciaRepresentacion = limpiaCreaElemento("/" + prefijo + "/datosExpediente/datosRepresentacion/existeRepresentacion", xpath, doc);
				existenciaRepresentacion.setTextContent("0");

				Node mensajeError = limpiaCreaElemento("/" + prefijo + "/datosExpediente/datosRepresentacion/mensajeError", xpath, doc);
				mensajeError.setTextContent(error);
			} catch (XPathExpressionException e) {
				e.printStackTrace();
			}
		}

		return codigoError;
	}

	private String wsrepre4(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega
		String codigoError = "0";
		NodeList elementos = null;
		ClienteDTO clienteDTO = new ClienteDTO();
		ClienteDTO clienteRepresentanteDTO = new ClienteDTO();
		String existeRepresentacion = "";
		String error = "";
		String coCliente = "";

		try {
			elementos = doc.getElementsByTagName("datosInteresado").item(0).getChildNodes();
			if (elementos.getLength() > 0 && elementos.item(0).getNodeName().equals("nifInteresado")) {
				String nif = elementos.item(0).getTextContent();
				nif = nif.trim();
				String nombreCliente = "";
				if (elementos.item(1).getNodeName().equals("nombreInteresado")) nombreCliente = elementos.item(1).getTextContent();

				coCliente = comprobarCliente(nif, nombreCliente);
				if (NIF_INEXISTENTE.equals(coCliente) || CLIENTE_INACTIVO.equals(coCliente)) {
					codigoError = coCliente;
				} else {
					clienteDTO = clienteBO.findById(Long.parseLong(coCliente));
				}
			}

			if (codigoError.equals("0")) {
				elementos = doc.getElementsByTagName("representanteLegal").item(0).getChildNodes();
				if (elementos.getLength() > 0 && elementos.item(0).getNodeName().equals("nifRepresentante")) {
					String nif = elementos.item(0).getTextContent();
					nif = nif.trim();
					String nombreRep = doc.getElementsByTagName("nombreRepresentante").item(0).getTextContent();

					DetachedCriteria dc = DetachedCriteria.forClass(ClienteDTO.class, "clienteAlias");
					dc.add(Restrictions.sqlRestriction("translate(UPPER(this_.razon_social), 'ÁÉÍÓÚÖÜ', 'AEIOUOU') like translate('" + nombreRep.toUpperCase() + "%', 'ÁÉÍÓÚÖÜ', 'AEIOUOU')"));
					dc.add(Restrictions.eq("identificador", nif.toUpperCase()));

					List<ClienteDTO> clientes = clienteBO.findByCriteria(dc);
					if (clientes.isEmpty())
						codigoError = NIF_INEXISTENTE;
					else {
						if (clientes.size() == 1) {
							if (!clientes.get(0).isBoActivo())
								codigoError = "12";
							else clienteRepresentanteDTO = clientes.get(0);
						} else codigoError = "13";
					}
				}

				if (codigoError.equals("0")) {
					List<ClienteRepresentanteDTO> representaciones = new ArrayList<ClienteRepresentanteDTO>();
					String coCircuito = doc.getElementsByTagName("tipoRepresentacion").item(0).getTextContent();
					String fechaRepresentacion = doc.getElementsByTagName("fechaRepresentacion").item(0).getTextContent();
					DetachedCriteria criterio = DetachedCriteria.forClass(ClienteRepresentanteDTO.class);
					criterio.add(Restrictions.eq("clienteDTO.coCliente", clienteDTO.getCoCliente()));
					criterio.add(Restrictions.eq("representanteDTO.coCliente", clienteRepresentanteDTO.getCoCliente()));
					criterio.add(Restrictions.eq("circuitoDTO.coCircuito", coCircuito).ignoreCase());
					representaciones = clienteRepresentanteBO.findByCriteria(criterio, 0, 1);
					if (!representaciones.isEmpty()) {
						Date fxDesde = representaciones.get(0).getFxDesde();
						Date fxHasta = representaciones.get(0).getFxHasta();

						criterio.add(Restrictions.le("fxDesde", Utilidades.DDMMYYYYToDate(fechaRepresentacion)));
						criterio.add(Restrictions.ge("fxHasta", new Date(Utilidades.DDMMYYYYToDate(fechaRepresentacion).getTime() + 86399999)));

						representaciones = clienteRepresentanteBO.findByCriteria(criterio, 0, 1);
						if (!representaciones.isEmpty())
							existeRepresentacion = "1";
						else {
							existeRepresentacion = "0";
							Date fxRep = Utilidades.DDMMYYYYToDate(fechaRepresentacion);
							if (fxRep.after(fxHasta)) {
								error = "La representación no está vigente desde el " + Utilidades.dateToDDMMYYYY(fxHasta);
							} else {
								if (fxRep.before(fxDesde)) {
									error = "La vigencia de representación es a partir del día " + Utilidades.dateToDDMMYYYY(fxDesde);
								}
							}
						}
					} else {
						existeRepresentacion = "0";
						error = "No existe representación para el trámite";
					}
				} else {
					existeRepresentacion = "0";
					error = "Error en los datos del representante";
				}
			} else {
				existeRepresentacion = "0";
				error = "Error en los datos del representado";
			}

			XPathFactory factory = XPathFactory.newInstance();
			XPath xpath = factory.newXPath();
			//			Node datosRepresentacion;
			Node existenciaRepresentacion;
			try {
				//				datosRepresentacion = limpiaCreaElemento("/"+prefijo+"/datosExpediente/datosRepresentacion", xpath, doc);
				//				datosRepresentacion.setTextContent("");

				existenciaRepresentacion = limpiaCreaElemento("/" + prefijo + "/datosExpediente/datosRepresentacion/existeRepresentacion", xpath, doc);
				existenciaRepresentacion.setTextContent(existeRepresentacion);

				Node mensajeError = limpiaCreaElemento("/" + prefijo + "/datosExpediente/datosRepresentacion/mensajeError", xpath, doc);
				mensajeError.setTextContent(error);
			} catch (XPathExpressionException e) {
				e.printStackTrace();
			}

		} catch (Exception e) {
			log.error("Error en webservice", e);
			codigoError = ERROR_DATOS;
		}

		return codigoError;
	}

	private String wsrepre5(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega
		String codigoError = "0";
		NodeList elementos = null;
		ClienteDTO clienteDTO = new ClienteDTO();
		ClienteDTO clienteRepresentanteDTO = new ClienteDTO();
		String existeRepresentacion = "";
		String error = "";
		boolean todas = true;
		String coCliente = "";

		try {
			elementos = doc.getElementsByTagName("datosInteresado").item(0).getChildNodes();
			if (elementos.getLength() > 0 && elementos.item(0).getNodeName().equals("nifInteresado")) {
				String nif = elementos.item(0).getTextContent();
				nif = nif.trim();
				String nombreCliente = "";
				if (elementos.item(1).getNodeName().equals("nombreInteresado")) nombreCliente = elementos.item(1).getTextContent();

				coCliente = comprobarCliente(nif, nombreCliente);
				if (NIF_INEXISTENTE.equals(coCliente) || CLIENTE_INACTIVO.equals(coCliente)) {
					codigoError = coCliente;
				} else {
					clienteDTO = clienteBO.findById(Long.parseLong(coCliente));
				}
			}

			if (codigoError.equals("0")) {
				elementos = doc.getElementsByTagName("representanteLegal").item(0).getChildNodes();
				if (elementos.getLength() > 0 && elementos.item(0).getNodeName().equals("nifRepresentante")) {
					String nif = elementos.item(0).getTextContent();
					nif = nif.trim();
					String nombreRep = doc.getElementsByTagName("nombreRepresentante").item(0).getTextContent();

					DetachedCriteria dc = DetachedCriteria.forClass(ClienteDTO.class, "clienteAlias");
					dc.add(Restrictions.sqlRestriction("translate(UPPER(this_.razon_social), 'ÁÉÍÓÚÖÜ', 'AEIOUOU') like translate('" + nombreRep.toUpperCase() + "%', 'ÁÉÍÓÚÖÜ', 'AEIOUOU')"));
					dc.add(Restrictions.eq("identificador", nif.toUpperCase()));

					List<ClienteDTO> clientes = clienteBO.findByCriteria(dc);
					if (clientes.isEmpty())
						codigoError = NIF_INEXISTENTE;
					else {
						if (clientes.size() == 1) {
							if (!clientes.get(0).isBoActivo())
								codigoError = "12";
							else clienteRepresentanteDTO = clientes.get(0);
						} else codigoError = "13";
					}
				}

				if (codigoError.equals("0")) {
					NodeList nodosRepresentacion = doc.getElementsByTagName("representacion");
					String fechaRevocacion = doc.getElementsByTagName("fechaRepresentacion").item(0).getTextContent();

					for (int i = 0; i < nodosRepresentacion.getLength(); i++) {
						List<ClienteRepresentanteDTO> representaciones = new ArrayList<ClienteRepresentanteDTO>();
						String coCircuito = doc.getElementsByTagName("tipoRepresentacion").item(i).getTextContent();
						DetachedCriteria criterio = DetachedCriteria.forClass(ClienteRepresentanteDTO.class);
						criterio.add(Restrictions.eq("clienteDTO.coCliente", clienteDTO.getCoCliente()));
						criterio.add(Restrictions.eq("representanteDTO.coCliente", clienteRepresentanteDTO.getCoCliente()));
						criterio.add(Restrictions.eq("circuitoDTO.coCircuito", coCircuito).ignoreCase());
						representaciones = clienteRepresentanteBO.findByCriteria(criterio, 0, 1);
						if (!representaciones.isEmpty()) {
							Element existRep = doc.createElement("existeRepresentacion");
							existRep.setTextContent("1");

							criterio.add(Restrictions.le("fxDesde", Utilidades.DDMMYYYYToDate(fechaRevocacion)));
							criterio.add(Restrictions.ge("fxHasta", new Date(Utilidades.DDMMYYYYToDate(fechaRevocacion).getTime() + 86399999)));

							representaciones = clienteRepresentanteBO.findByCriteria(criterio, 0, 1);
							if (!representaciones.isEmpty()) {
								existeRepresentacion = "1";
								ClienteRepresentanteDTO representacionDTO = representaciones.get(0);
								representacionDTO.setFxHasta(Utilidades.DDMMYYYYToDate(fechaRevocacion));
								representacionDTO.setCoUsuarioActualizacion("subsede");
								representacionDTO.setFhActualizacion(new Date());
								clienteRepresentanteBO.save(representacionDTO); // guardamos la nueva fecha de fin de vigencia para que conste en el histórico
								//clienteRepresentanteBO.delete(representacionDTO.getCoClienteRepresentante()); // damos de baja la representación

								nodosRepresentacion.item(i).appendChild(existRep);
							} else {
								todas = false;
								Element errorRep = doc.createElement("mensajeError");
								errorRep.setTextContent("La fecha de revocación debe ser mayor o igual que la fecha fin de vigencia");
							}
						} else {
							todas = false;
							Element existRep = doc.createElement("existeRepresentacion");
							existRep.setTextContent("0");
							Element errorRep = doc.createElement("mensajeError");
							errorRep.setTextContent("No existe representación para el trámite");
							nodosRepresentacion.item(i).appendChild(existRep);
							nodosRepresentacion.item(i).appendChild(errorRep);
						}
					}
				} else {
					existeRepresentacion = "0";
					error = "Error en los datos del representante";
				}
			} else {
				existeRepresentacion = "0";
				error = "Error en los datos del representado";
			}

			if (!todas || !Utilidades.isEmpty(error)) {
				XPathFactory factory = XPathFactory.newInstance();
				XPath xpath = factory.newXPath();
				Node existenciaRepresentacion;
				try {
					existenciaRepresentacion = limpiaCreaElemento("/" + prefijo + "/datosExpediente/datosRepresentacion/existeRepresentacion", xpath, doc);
					existenciaRepresentacion.setTextContent(existeRepresentacion);

					Node mensajeError = limpiaCreaElemento("/" + prefijo + "/datosExpediente/datosRepresentacion/mensajeError", xpath, doc);
					mensajeError.setTextContent(error);
				} catch (XPathExpressionException e) {
					e.printStackTrace();
				}
			}
		} catch (Exception e) {
			log.error("Error en webservice", e);
			codigoError = ERROR_DATOS;
		}

		return codigoError;
	}

	private String wsrepre6(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega
		String codigoError = "0";
		NodeList elementos = null;
		ClienteDTO clienteDTO = new ClienteDTO();
		ClienteDTO clienteRepresentanteDTO = new ClienteDTO();
		String existeRepresentacion = "";
		String error = "";
		String coCliente = "";

		try {
			elementos = doc.getElementsByTagName("datosInteresado").item(0).getChildNodes();
			if (elementos.getLength() > 0 && elementos.item(0).getNodeName().equals("nifInteresado")) {
				String nif = elementos.item(0).getTextContent();
				nif = nif.trim();
				String nombreCliente = "";
				if (elementos.item(1).getNodeName().equals("nombreInteresado")) nombreCliente = elementos.item(1).getTextContent();

				coCliente = comprobarCliente(nif, nombreCliente);
				if (NIF_INEXISTENTE.equals(coCliente) || CLIENTE_INACTIVO.equals(coCliente)) {
					codigoError = coCliente;
				} else {
					clienteDTO = clienteBO.findById(Long.parseLong(coCliente));
				}
			}

			if (codigoError.equals("0")) {
				elementos = doc.getElementsByTagName("representanteLegal").item(0).getChildNodes();
				if (elementos.getLength() > 0 && elementos.item(0).getNodeName().equals("nifRepresentante")) {
					String nif = elementos.item(0).getTextContent();
					nif = nif.trim();
					String nombreRep = doc.getElementsByTagName("nombreRepresentante").item(0).getTextContent();

					DetachedCriteria dc = DetachedCriteria.forClass(ClienteDTO.class, "clienteAlias");
					dc.add(Restrictions.sqlRestriction("translate(UPPER(this_.razon_social), 'ÁÉÍÓÚÖÜ', 'AEIOUOU') like translate('" + nombreRep.toUpperCase() + "%', 'ÁÉÍÓÚÖÜ', 'AEIOUOU')"));
					dc.add(Restrictions.eq("identificador", nif.toUpperCase()));

					List<ClienteDTO> clientes = clienteBO.findByCriteria(dc);
					if (clientes.isEmpty())
						codigoError = NIF_INEXISTENTE;
					else {
						if (clientes.size() == 1) {
							if (!clientes.get(0).isBoActivo())
								codigoError = "12";
							else clienteRepresentanteDTO = clientes.get(0);
						} else codigoError = "13";
					}
				}

				if (codigoError.equals("0")) {
					XPathFactory factory = XPathFactory.newInstance();
					XPath xpath = factory.newXPath();
					Node listaRepresentacionesNode = limpiaCreaElemento("/" + prefijo + "/datosExpediente/representaciones", xpath, doc);

					List<ClienteRepresentanteDTO> representaciones = new ArrayList<ClienteRepresentanteDTO>();
					DetachedCriteria criterio = DetachedCriteria.forClass(ClienteRepresentanteDTO.class);
					criterio.add(Restrictions.eq("clienteDTO.coCliente", clienteDTO.getCoCliente()));
					criterio.add(Restrictions.eq("representanteDTO.coCliente", clienteRepresentanteDTO.getCoCliente()));
					criterio.add(Restrictions.ge("fxHasta", new Date())); //sólo mostramos las representaciones vigentes
					criterio.addOrder(Order.asc("circuitoDTO.coCircuito"));

					representaciones = clienteRepresentanteBO.findByCriteria(criterio);
					if (representaciones.size() > 0) {
						existeRepresentacion = "1";
					} else {
						existeRepresentacion = "0";
					}

					for (ClienteRepresentanteDTO representacionDTO : representaciones) {
						Element representacionNode = doc.createElement("representacion");
						representacionNode.setTextContent("");

						Element tipoRepresentacionNode = doc.createElement("tipoRepresentacion");
						tipoRepresentacionNode.setTextContent(representacionDTO.getCircuitoDTO().getCoCircuito());
						representacionNode.appendChild(tipoRepresentacionNode);

						Element fxDesdeNode = doc.createElement("fechaDesde");
						fxDesdeNode.setTextContent(Utilidades.dateToDDMMYYYY(representacionDTO.getFxDesde()));
						representacionNode.appendChild(fxDesdeNode);

						Element fxHastaNode = doc.createElement("fechaHasta");
						fxHastaNode.setTextContent(Utilidades.dateToDDMMYYYY(representacionDTO.getFxHasta()));
						representacionNode.appendChild(fxHastaNode);

						listaRepresentacionesNode.appendChild(representacionNode);
					}
				} else {
					existeRepresentacion = "0";
					error = "Error en los datos del representante";
				}
			} else {
				existeRepresentacion = "0";
				error = "Error en los datos del representado";
			}

			XPathFactory factory = XPathFactory.newInstance();
			XPath xpath = factory.newXPath();
			Node datosRepresentacion;
			Node existenciaRepresentacion;
			try {
				datosRepresentacion = limpiaCreaElemento("/" + prefijo + "/datosExpediente/datosRepresentacion", xpath, doc);
				datosRepresentacion.setTextContent("");

				existenciaRepresentacion = limpiaCreaElemento("/" + prefijo + "/datosExpediente/datosRepresentacion/existeRepresentacion", xpath, doc);
				existenciaRepresentacion.setTextContent(existeRepresentacion);

				Node mensajeError = limpiaCreaElemento("/" + prefijo + "/datosExpediente/datosRepresentacion/mensajeError", xpath, doc);
				mensajeError.setTextContent(error);
			} catch (XPathExpressionException e) {
				e.printStackTrace();
			}

		} catch (Exception e) {
			log.error("Error en webservice", e);
			codigoError = ERROR_DATOS;
		}

		return codigoError;
	}

	private String wsrepre7(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega
		String codigoError = "0";
		NodeList elementos = null;
		ClienteDTO clienteDTO = new ClienteDTO();
		ClienteDTO clienteRepresentanteDTO = new ClienteDTO();
		String existeRepresentacion = "";
		String error = "";
		String coCliente = "";

		try {
			elementos = doc.getElementsByTagName("datosInteresado").item(0).getChildNodes();
			if (elementos.getLength() > 0 && elementos.item(0).getNodeName().equals("nifInteresado")) {
				String nif = elementos.item(0).getTextContent();
				nif = nif.trim();
				String nombreCliente = "";
				if (elementos.item(1).getNodeName().equals("nombreInteresado")) nombreCliente = elementos.item(1).getTextContent();

				coCliente = comprobarCliente(nif, nombreCliente);
				if (NIF_INEXISTENTE.equals(coCliente) || CLIENTE_INACTIVO.equals(coCliente)) {
					codigoError = coCliente;
				} else {
					clienteDTO = clienteBO.findById(Long.parseLong(coCliente));
				}
			}

			if (codigoError.equals("0")) {
				XPathFactory factory = XPathFactory.newInstance();
				XPath xpath = factory.newXPath();

				Node listaDatosExp = limpiaCreaElemento("/" + prefijo + "/listaDatosExpediente", xpath, doc);

				// primero vemos a los representantes del contribuyente
				List<ClienteRepresentanteDTO> representantes = new ArrayList<ClienteRepresentanteDTO>();
				DetachedCriteria criterio = DetachedCriteria.forClass(ClienteRepresentanteDTO.class);
				criterio.add(Restrictions.eq("clienteDTO.coCliente", clienteDTO.getCoCliente()));
				criterio.add(Restrictions.ge("fxHasta", new Date())); //sólo mostramos las representaciones vigentes
				criterio.addOrder(Order.asc("representanteDTO.coCliente"));
				criterio.addOrder(Order.asc("fxHasta"));

				representantes = clienteRepresentanteBO.findByCriteria(criterio);

				String coClienteRepresentanteAnterior = "";
				for (ClienteRepresentanteDTO representacionDTO : representantes) {
					String coClienteRepresentante = representacionDTO.getRepresentanteDTO().getCoCliente().toString();

					if (!coClienteRepresentanteAnterior.equals(coClienteRepresentante)) {
						Element representanteNode = doc.createElement("representante"); //de tipo DatosExpedienteBean
						representanteNode.setTextContent("");

						ClienteDTO representanteDTO = clienteBO.findById(representacionDTO.getRepresentanteDTO().getCoCliente());
						Element representanteLegalNode = doc.createElement("representanteLegal");
						representanteLegalNode.setTextContent("");

						Element nifRepresentanteNode = doc.createElement("nifRepresentante");
						nifRepresentanteNode.setTextContent(representanteDTO.getIdentificador());
						representanteLegalNode.appendChild(nifRepresentanteNode);

						Element nombreRepresentanteNode = doc.createElement("nombreRepresentante");
						nombreRepresentanteNode.setTextContent(representanteDTO.getRazonSocial());
						representanteLegalNode.appendChild(nombreRepresentanteNode);

						representanteNode.appendChild(representanteLegalNode);

						Element datosInteresadoNode = doc.createElement("datosInteresado");
						datosInteresadoNode.setTextContent("");

						Element nifInteresadoNode = doc.createElement("nifInteresado");
						nifInteresadoNode.setTextContent("");
						datosInteresadoNode.appendChild(nifInteresadoNode);

						Element nombreInteresadoNode = doc.createElement("nombreInteresado");
						nombreInteresadoNode.setTextContent("");
						datosInteresadoNode.appendChild(nombreInteresadoNode);

						representanteNode.appendChild(datosInteresadoNode);

						Element listaRepresentacionesNode = doc.createElement("representaciones");
						listaRepresentacionesNode.setTextContent("");

						Element representacionNode = doc.createElement("representacion");
						representacionNode.setTextContent("");

						Element tipoRepresentacionNode = doc.createElement("tipoRepresentacion");
						tipoRepresentacionNode.setTextContent(representacionDTO.getCircuitoDTO().getCoCircuito());
						representacionNode.appendChild(tipoRepresentacionNode);

						Element fxDesdeNode = doc.createElement("fechaDesde");
						fxDesdeNode.setTextContent(Utilidades.dateToDDMMYYYY(representacionDTO.getFxDesde()));
						representacionNode.appendChild(fxDesdeNode);

						Element fxHastaNode = doc.createElement("fechaHasta");
						fxHastaNode.setTextContent(Utilidades.dateToDDMMYYYY(representacionDTO.getFxHasta()));
						representacionNode.appendChild(fxHastaNode);

						listaRepresentacionesNode.appendChild(representacionNode);
						coClienteRepresentanteAnterior = coClienteRepresentante;

						listaDatosExp.appendChild(representanteNode);
					}
				}

				// primero vemos a los representantes del contribuyente
				List<ClienteRepresentanteDTO> representados = new ArrayList<ClienteRepresentanteDTO>();
				DetachedCriteria criterioRepresentados = DetachedCriteria.forClass(ClienteRepresentanteDTO.class);
				criterio.add(Restrictions.eq("clienteDTO.coCliente", clienteDTO.getCoCliente()));
				criterio.add(Restrictions.eq("representanteDTO.coCliente", clienteRepresentanteDTO.getCoCliente()));
				criterio.add(Restrictions.ge("fxHasta", new Date())); //sólo mostramos las representaciones vigentes
				criterio.addOrder(Order.asc("circuitoDTO.coCircuito"));

				representados = clienteRepresentanteBO.findByCriteria(criterio);

				Element listaRepresentadosNode = doc.createElement("representados");
				listaRepresentadosNode.setTextContent("");

				String coClienteRepresentadoAnterior = "";
				for (ClienteRepresentanteDTO representacionDTO : representados) {
					Element listaRepresentacionesNode = doc.createElement("representaciones");
					listaRepresentacionesNode.setTextContent("");

					Element representacionNode = doc.createElement("representacion");
					representacionNode.setTextContent("");

					Element tipoRepresentacionNode = doc.createElement("tipoRepresentacion");
					tipoRepresentacionNode.setTextContent(representacionDTO.getCircuitoDTO().getCoCircuito());
					representacionNode.appendChild(tipoRepresentacionNode);

					Element fxDesdeNode = doc.createElement("fechaDesde");
					fxDesdeNode.setTextContent(Utilidades.dateToDDMMYYYY(representacionDTO.getFxDesde()));
					representacionNode.appendChild(fxDesdeNode);

					Element fxHastaNode = doc.createElement("fechaHasta");
					fxHastaNode.setTextContent(Utilidades.dateToDDMMYYYY(representacionDTO.getFxHasta()));
					representacionNode.appendChild(fxHastaNode);

					listaRepresentacionesNode.appendChild(representacionNode);
				}

				if (representantes.size() > 0 || representados.size() > 0) {
					existeRepresentacion = "1";
				} else {
					existeRepresentacion = "0";
				}

				listaDatosExp.appendChild(listaRepresentadosNode);
			} else {
				existeRepresentacion = "0";
				error = "Error en los datos del representado";
			}

			XPathFactory factory = XPathFactory.newInstance();
			XPath xpath = factory.newXPath();
			Node datosRepresentacion;
			Node existenciaRepresentacion;
			try {
				datosRepresentacion = limpiaCreaElemento("/" + prefijo + "/datosExpediente/datosRepresentacion", xpath, doc);
				datosRepresentacion.setTextContent("");

				existenciaRepresentacion = limpiaCreaElemento("/" + prefijo + "/datosExpediente/datosRepresentacion/existeRepresentacion", xpath, doc);
				existenciaRepresentacion.setTextContent(existeRepresentacion);

				Node mensajeError = limpiaCreaElemento("/" + prefijo + "/datosExpediente/datosRepresentacion/mensajeError", xpath, doc);
				mensajeError.setTextContent(error);
			} catch (XPathExpressionException e) {
				e.printStackTrace();
			}

		} catch (Exception e) {
			log.error("Error en webservice", e);
			codigoError = ERROR_DATOS;
		}

		return codigoError;
	}

	private String wsinf1(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega	
		String codigoError = "0";
		ClienteDTO clienteDTO = new ClienteDTO();
		String municipio = "";
		String concepto = "";
		String recibos = "";
		MunicipioDTO municipioDTO = new MunicipioDTO();
		ConceptoDTO conceptoDTO = new ConceptoDTO();
		String coCliente = "";

		xmlRespuesta = "";
		xmlRespuesta += "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
		xmlRespuesta += "<wsinf>";

		try {
			if (doc.getElementsByTagName("nifContribuyente").getLength() > 0) {
				String nif = doc.getElementsByTagName("nifContribuyente").item(0).getTextContent();
				if (!Utilidades.isEmpty(nif)) {
					nif = nif.trim();
					String nombreCliente = "";
					if (doc.getElementsByTagName("nombreContribuyente").getLength() > 0) nombreCliente = doc.getElementsByTagName("nombreContribuyente").item(0).getTextContent();

					coCliente = comprobarCliente(nif, nombreCliente);
					if (NIF_INEXISTENTE.equals(coCliente) || CLIENTE_INACTIVO.equals(coCliente)) {
						codigoError = coCliente;
					} else {
						clienteDTO = clienteBO.findById(Long.parseLong(coCliente));
					}

					if (doc.getElementsByTagName("municipio").getLength() > 0) {
						municipio = doc.getElementsByTagName("municipio").item(0).getTextContent();
						if (!Utilidades.isEmpty(municipio)) {
							if (municipio.length() == 3) {
								municipioDTO = municipioBO.findById(new MunicipioDTOId("11", municipio));
							} else {
								if (municipio.length() == 5) {
									municipioDTO = municipioBO.findById(new MunicipioDTOId(municipio.substring(0, 2), municipio.substring(2)));
								} else codigoError = MUNICIPIO_INCORRECTO;
							}
							if (municipioDTO == null) codigoError = MUNICIPIO_INCORRECTO;
						}
					}

					if (doc.getElementsByTagName("concepto").getLength() > 0) {
						concepto = doc.getElementsByTagName("concepto").item(0).getTextContent();
						if (!Utilidades.isEmpty(concepto)) {
							if (concepto.length() == 4) {
								conceptoDTO = conceptoBO.findById(concepto);
							}
							if (conceptoDTO == null) codigoError = CONCEPTO_INCORRECTO;
						} else codigoError = CONCEPTO_INCORRECTO;
					}

					String ejercicio = "";
					if (doc.getElementsByTagName("ejercicio").getLength() > 0) ejercicio = doc.getElementsByTagName("ejercicio").item(0).getTextContent();

					if (codigoError.equals("0")) {
						List<DocumentoLiquidacionDTO> listaRecibos = obtenerListaRecibos(clienteDTO, (Utilidades.isEmpty(municipio) ? null : municipioDTO), concepto, ejercicio, "", 0);

						recibos += "<listaRecibos>";
						for (DocumentoLiquidacionDTO recibo : listaRecibos) {
							DocumentoDTO documentoDTO = recibo.getDocumentoDTO();
							recibos += "<recibo>";
							recibos += "<municipio>" + documentoDTO.getMunicipioDTO().getId().getCoProvincia() + documentoDTO.getMunicipioDTO().getId().getCoMunicipio() + "</municipio>";
							recibos += "<concepto>" + documentoDTO.getConceptoDTO().getCoConcepto() + "</concepto>";
							recibos += "<ejercicio>" + (Utilidades.isEmpty(documentoDTO.getEjercicio()) ? "" : documentoDTO.getEjercicio()) + "</ejercicio>";
							recibos += "<periodo>" + (Utilidades.isEmpty(documentoDTO.getPeriodo()) ? "" : documentoDTO.getPeriodo()) + "</periodo>";
							recibos += "<numero>" + documentoDTO.getCodigoConEspacios() + "</numero>";
							recibos += "<referenciaObjetoTributaria>" + (Utilidades.isEmpty(documentoDTO.getRefObjTributario1()) ? "" : documentoDTO.getRefObjTributario1())
										+ "</referenciaObjetoTributaria>";
							String estado = "";
							if (documentoDTO.getSituacionDTO() != null) {
								SituacionDTO situacion = situacionBO.findById(documentoDTO.getSituacionDTO().getCoSituacion());
								if (situacion != null) estado = situacion.getNombre();
							}
							recibos += "<estado>" + estado + "</estado>";
							recibos += "</recibo>";
						}
						recibos += "</listaRecibos>";
					}
				} else codigoError = NIF_CLIENTE_VACIO;
			} else codigoError = NIF_CLIENTE_VACIO;

			xmlRespuesta += "<propiedades>";
			xmlRespuesta += "<codigoOperacion>01</codigoOperacion>";
			xmlRespuesta += "<codigoProcedimiento>" + doc.getElementsByTagName("propiedades").item(0).getChildNodes().item(1).getTextContent() + "</codigoProcedimiento>";
			xmlRespuesta += "<usuario>" + doc.getElementsByTagName("propiedades").item(0).getChildNodes().item(2).getTextContent() + "</usuario>";
			xmlRespuesta += "<contraseña>" + doc.getElementsByTagName("propiedades").item(0).getChildNodes().item(3).getTextContent() + "</contraseña>";
			xmlRespuesta += "<codigoError>" + codigoError + "</codigoError>";
			xmlRespuesta += "</propiedades>";
			xmlRespuesta += "<datosPantallaAlta>";
			xmlRespuesta += "<nifContribuyente>" + doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes().item(0).getTextContent() + "</nifContribuyente>";
			xmlRespuesta += "<nombreContribuyente>" + doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes().item(1).getTextContent() + "</nombreContribuyente>";
			xmlRespuesta += "<municipio>" + doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes().item(2).getTextContent() + "</municipio>";
			xmlRespuesta += "<concepto>" + doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes().item(3).getTextContent() + "</concepto>";
			xmlRespuesta += "<ejercicio>" + doc.getElementsByTagName("datosPantallaAlta").item(0).getChildNodes().item(4).getTextContent() + "</ejercicio>";
			xmlRespuesta += recibos;
			xmlRespuesta += "</datosPantallaAlta>";

		} catch (Exception e) {
			log.error("Error en webservice", e);
			codigoError = ERROR_DATOS;
		}
		xmlRespuesta += "</wsinf>";

		return codigoError;
	}

	private String wsinf5(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega	
		String codigoError = "0";
		ClienteDTO clienteDTO = new ClienteDTO();
		String municipio = "";
		MunicipioDTO municipioDTO = new MunicipioDTO();
		boolean deudor = false;
		String coCliente = "";

		try {
			if (doc.getElementsByTagName("nifContribuyente").getLength() > 0) {
				String nif = doc.getElementsByTagName("nifContribuyente").item(0).getTextContent();
				if (!Utilidades.isEmpty(nif)) {
					nif = nif.trim();
					String nombreCliente = "";
					if (doc.getElementsByTagName("nombreContribuyente").getLength() > 0) nombreCliente = doc.getElementsByTagName("nombreContribuyente").item(0).getTextContent();

					coCliente = comprobarCliente(nif, nombreCliente);
					if (NIF_INEXISTENTE.equals(coCliente) || CLIENTE_INACTIVO.equals(coCliente)) {
						codigoError = coCliente;
					} else {
						clienteDTO = clienteBO.findById(Long.parseLong(coCliente));
					}

					if (doc.getElementsByTagName("municipio").getLength() > 0) {
						municipio = doc.getElementsByTagName("municipio").item(0).getTextContent();
						if (!Utilidades.isEmpty(municipio)) {
							if (municipio.length() == 3) {
								municipioDTO = municipioBO.findById(new MunicipioDTOId("11", municipio));
							} else {
								if (municipio.length() == 5) {
									municipioDTO = municipioBO.findById(new MunicipioDTOId(municipio.substring(0, 2), municipio.substring(2)));
								} else codigoError = MUNICIPIO_INCORRECTO;
							}
						}
					}

					if (codigoError.equals("0")) {
						List<DocumentoLiquidacionDTO> listaRecibos = obtenerListaRecibos(clienteDTO, municipioDTO, "", "", SituacionConstants.CO_SITUACION_PENDIENTE, 1);

						deudor = !listaRecibos.isEmpty();
					}
				} else codigoError = NIF_CLIENTE_VACIO;
			} else codigoError = NIF_CLIENTE_VACIO;

		} catch (Exception e) {
			log.error("Error en webservice", e);
			codigoError = ERROR_DATOS;
		}

		xmlRespuesta = "";
		try {
			XPathFactory factory = XPathFactory.newInstance();
			XPath xpath = factory.newXPath();
			Node codigoErrorNode = limpiaCreaElemento("/" + prefijo + "/propiedades/codigoError", xpath, doc);
			codigoErrorNode.setTextContent(codigoError);

			Node datosInforme = limpiaCreaElemento("/" + prefijo + "/datosInforme", xpath, doc);
			datosInforme.setTextContent("");

			Node exentoDeuda = limpiaCreaElemento("/" + prefijo + "/datosInforme/exentoDeuda", xpath, doc);
			exentoDeuda.setTextContent(deudor ? "0" : "1");

			TransformerFactory transfac = TransformerFactory.newInstance();
			Transformer trans = transfac.newTransformer();
			StringWriter sw = new StringWriter();
			StreamResult salida = new StreamResult(sw);
			DOMSource fuente = new DOMSource(doc);
			trans.transform(fuente, salida);
			xmlRespuesta = sw.toString();
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}

		return codigoError;
	}

	private String wsinf6(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega	
		String codigoError = "0";
		ClienteDTO clienteDTO = new ClienteDTO();
		String municipio = "";
		String concepto = "";
		MunicipioDTO municipioDTO = new MunicipioDTO();
		ConceptoDTO conceptoDTO = new ConceptoDTO();
		String coCliente = "";

		try {
			if (doc.getElementsByTagName("nifContribuyente").getLength() > 0) {
				String nif = doc.getElementsByTagName("nifContribuyente").item(0).getTextContent();
				if (!Utilidades.isEmpty(nif)) {
					nif = nif.trim();
					String nombreCliente = "";
					if (doc.getElementsByTagName("nombreContribuyente").getLength() > 0) nombreCliente = doc.getElementsByTagName("nombreContribuyente").item(0).getTextContent();

					coCliente = comprobarCliente(nif, nombreCliente);
					if (NIF_INEXISTENTE.equals(coCliente) || CLIENTE_INACTIVO.equals(coCliente)) {
						codigoError = coCliente;
					} else {
						clienteDTO = clienteBO.findById(Long.parseLong(coCliente));
					}

					if (doc.getElementsByTagName("municipio").getLength() > 0) {
						municipio = doc.getElementsByTagName("municipio").item(0).getTextContent();
						if (!Utilidades.isEmpty(municipio)) {
							if (municipio.length() == 3) {
								municipioDTO = municipioBO.findById(new MunicipioDTOId("11", municipio));
							} else {
								if (municipio.length() == 5) {
									municipioDTO = municipioBO.findById(new MunicipioDTOId(municipio.substring(0, 2), municipio.substring(2)));
								} else codigoError = MUNICIPIO_INCORRECTO;
							}
						} else codigoError = MUNICIPIO_INCORRECTO;
					}

					if (doc.getElementsByTagName("concepto").getLength() > 0) {
						concepto = doc.getElementsByTagName("concepto").item(0).getTextContent();
						if (!Utilidades.isEmpty(concepto)) {
							if (concepto.length() == 4) {
								conceptoDTO = conceptoBO.findById(concepto);
							}
							if (conceptoDTO == null) codigoError = CONCEPTO_INCORRECTO;
						} else codigoError = CONCEPTO_INCORRECTO;
					}

					String ejercicio = "";
					if (doc.getElementsByTagName("ejercicio").getLength() > 0) ejercicio = doc.getElementsByTagName("ejercicio").item(0).getTextContent();

					if (codigoError.equals("0")) {
						List<DocumentoLiquidacionDTO> listaRecibos = obtenerListaRecibos(clienteDTO, (Utilidades.isEmpty(municipio) ? null : municipioDTO), concepto, ejercicio,
																							SituacionConstants.CO_SITUACION_PENDIENTE, 0);

						XPathFactory factory = XPathFactory.newInstance();
						XPath xpath = factory.newXPath();
						Node datosInformeNode = limpiaCreaElemento("/" + prefijo + "/datosInforme", xpath, doc);
						datosInformeNode.setTextContent("");

						Node recibosNode = limpiaCreaElemento("/" + prefijo + "/datosInforme/recibos", xpath, doc);
						recibosNode.setTextContent("");

						G743DocumentoDetalleAction actionDocAbs = (G743DocumentoDetalleAction) GadirConfig.getBean("G743DocumentoDetalle");
						actionDocAbs.setPestLlamada("2");

						for (DocumentoLiquidacionDTO recibo : listaRecibos) {
							Node etiquetaRecibos = doc.getElementsByTagName("recibos").item(0);

							Element reciboInf = doc.createElement("reciboInf");
							reciboInf.setTextContent("");
							etiquetaRecibos.appendChild(reciboInf);

							DocumentoDTO documentoDTO = recibo.getDocumentoDTO();

							Element municipioNode = doc.createElement("municipio");
							municipioNode.setTextContent(documentoDTO.getMunicipioDTO().getId().getCoProvincia() + documentoDTO.getMunicipioDTO().getId().getCoMunicipio());
							reciboInf.appendChild(municipioNode);

							Element conceptoNode = doc.createElement("concepto");
							conceptoNode.setTextContent(documentoDTO.getConceptoDTO().getCoConcepto());
							reciboInf.appendChild(conceptoNode);

							Element descripcionNode = doc.createElement("descripcion");
							descripcionNode.setTextContent(MunicipioConceptoModeloUtil.getConceptoDescripcion(documentoDTO.getConceptoDTO().getCoConcepto()));
							reciboInf.appendChild(descripcionNode);

							Element ejercicioNode = doc.createElement("ejercicio");
							ejercicioNode.setTextContent((Utilidades.isEmpty(documentoDTO.getEjercicio()) ? "" : ("" + documentoDTO.getEjercicio())));
							reciboInf.appendChild(ejercicioNode);

							Element periodoNode = doc.createElement("periodo");
							periodoNode.setTextContent(TablaGt.getValor(TablaGtConstants.TABLA_PERIODO, Utilidades.isEmpty(documentoDTO.getPeriodo()) ? "" : documentoDTO.getPeriodo(),
																		TablaGt.COLUMNA_DESCRIPCION));
							reciboInf.appendChild(periodoNode);

							Element coPeriodoNode = doc.createElement("coPeriodo");
							coPeriodoNode.setTextContent((Utilidades.isEmpty(documentoDTO.getPeriodo()) ? "" : documentoDTO.getPeriodo()));
							reciboInf.appendChild(coPeriodoNode);

							Element numeroNode = doc.createElement("numero");
							numeroNode.setTextContent(documentoDTO.getCodigoConEspacios());
							reciboInf.appendChild(numeroNode);

							Element referenciaObjetoTributariaNode = doc.createElement("referenciaObjetoTributaria");
							referenciaObjetoTributariaNode.setTextContent((Utilidades.isEmpty(documentoDTO.getRefObjTributario1()) ? "" : documentoDTO.getRefObjTributario1()));
							reciboInf.appendChild(referenciaObjetoTributariaNode);

							String estado = "";
							if (documentoDTO.getSituacionDTO() != null) {
								SituacionDTO situacion = situacionBO.findById(documentoDTO.getSituacionDTO().getCoSituacion());
								if (situacion != null) estado = situacion.getNombre();
							}
							Element estadoNode = doc.createElement("estado");
							estadoNode.setTextContent(estado);
							reciboInf.appendChild(estadoNode);

							actionDocAbs.setCoModeloSel(documentoDTO.getId().getCoModelo());
							actionDocAbs.setCoVersionSel(documentoDTO.getId().getCoVersion());
							actionDocAbs.setCoDocumentoSel(documentoDTO.getId().getCoDocumento());
							actionDocAbs.execute();

							Element importePrincipalNode = doc.createElement("importePrincipal");
							importePrincipalNode.setTextContent((recibo.getImPrincipal() == null ? "" : Utilidades.getFormato2Number(recibo.getImPrincipal(), 15.2)));
							reciboInf.appendChild(importePrincipalNode);

							//							BigDecimal recargoApremio = new BigDecimal(0);
							//							BigDecimal recargoExtemporal = new BigDecimal(0);
							//							if(recibo.getImRecargoApremio() != null)
							//								recargoApremio = recibo.getImRecargoApremio();
							//							if(recibo.getImRecargoExtemporal() != null)
							//								recargoExtemporal = recibo.getImRecargoExtemporal();
							//							BigDecimal recargoTotal = recargoApremio.add(recargoExtemporal);

							Element recargoNode = doc.createElement("recargo");
							recargoNode.setTextContent(Utilidades.getFormato2Number(actionDocAbs.getImRecargoApremio(), 15.2));
							reciboInf.appendChild(recargoNode);

							Element interesesDemoraNode = doc.createElement("interesesDemora");
							interesesDemoraNode.setTextContent(Utilidades.getFormato2Number(actionDocAbs.getImInteresesDemora(), 15.2));
							reciboInf.appendChild(interesesDemoraNode);

							Element deudaNode = doc.createElement("deuda");
							deudaNode.setTextContent(Utilidades.getFormato2Number(actionDocAbs.getDeudaVO().getImTotalPendiente(), 15.2));
							reciboInf.appendChild(deudaNode);

							Element pagoParcialNode = doc.createElement("pagoParcial");
							pagoParcialNode.setTextContent(Utilidades.getFormato2Number(actionDocAbs.getCobradoTotal(), 15.2));
							reciboInf.appendChild(pagoParcialNode);

							Element importePendienteNode = doc.createElement("importePendiente");
							importePendienteNode.setTextContent(Utilidades.getFormato2Number(actionDocAbs.getDeudaVO().getImTotalPendiente(), 15.2));
							reciboInf.appendChild(importePendienteNode);
						}
					}
				} else codigoError = NIF_CLIENTE_VACIO;
			} else codigoError = NIF_CLIENTE_VACIO;

			xmlRespuesta = "";
			try {
				XPathFactory factory = XPathFactory.newInstance();
				XPath xpath = factory.newXPath();
				Node codigoErrorNode = limpiaCreaElemento("/" + prefijo + "/propiedades/codigoError", xpath, doc);
				codigoErrorNode.setTextContent(codigoError);

				TransformerFactory transfac = TransformerFactory.newInstance();
				Transformer trans = transfac.newTransformer();
				StringWriter sw = new StringWriter();
				StreamResult salida = new StreamResult(sw);
				DOMSource fuente = new DOMSource(doc);
				trans.transform(fuente, salida);
				xmlRespuesta = sw.toString();
			} catch (Exception e) {
				log.error("Error en webservice", e);
			}

		} catch (Exception e) {
			log.error("Error en webservice", e);
			codigoError = ERROR_DATOS;
		}

		return codigoError;
	}

	private String wsinf7(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega	
		String codigoError = "0";
		String coCliente = "";

		try {
			if (doc.getElementsByTagName("nifContribuyente").getLength() > 0) {
				String nif = doc.getElementsByTagName("nifContribuyente").item(0).getTextContent();
				if (!Utilidades.isEmpty(nif)) {
					nif = nif.trim();
					String nombreCliente = "";
					if (doc.getElementsByTagName("nombreContribuyente").getLength() > 0) nombreCliente = doc.getElementsByTagName("nombreContribuyente").item(0).getTextContent();

					coCliente = comprobarCliente(nif, nombreCliente);
					if (NIF_INEXISTENTE.equals(coCliente) || CLIENTE_INACTIVO.equals(coCliente)) {
						codigoError = coCliente;
					}

					if (codigoError.equals("0")) {
						NodeList listaRecibos = doc.getElementsByTagName("reciboInf");

						G743DocumentoDetalleAction actionDocAbs = (G743DocumentoDetalleAction) GadirConfig.getBean("G743DocumentoDetalle");
						actionDocAbs.setPestLlamada("2");

						for (int i = 0; i < listaRecibos.getLength(); i++) {
							Node reciboInf = listaRecibos.item(i);
							Node documentoLiq = doc.getElementsByTagName("numero").item(i);
							String numero = documentoLiq.getTextContent();
							String coModelo = "";
							String coVersion = "";
							String coDocumento = "";
							if (!Utilidades.isEmpty(numero)) {
								if (numero.length() == 13) {
									coModelo = numero.substring(0, 3);
									coVersion = numero.substring(3, 4);
									coDocumento = numero.substring(4);
								} else {
									if (numero.length() == 15) {
										coModelo = numero.substring(0, 3);
										coVersion = numero.substring(4, 5);
										coDocumento = numero.substring(6);
									} else codigoError = DOCUMENTO_INCORRECTO;
								}

								DocumentoLiquidacionDTO recibo = documentoLiquidacionBO.findByIdInitialized(new DocumentoLiquidacionDTOId(coModelo, coVersion, coDocumento),
																											new String[] {"documentoDTO"});
								if (recibo != null) {
									DocumentoDTO documentoDTO = recibo.getDocumentoDTO();

									//									String estado="";
									//									if(documentoDTO.getSituacionDTO() != null) {
									//										SituacionDTO situacion = situacionBO.findById(documentoDTO.getSituacionDTO().getCoSituacion());
									//										if(situacion != null)
									//											estado = situacion.getNombre();
									//									}
									//									Element estadoNode = doc.createElement("estado"); 
									//									estadoNode.setTextContent(estado);
									//									reciboInf.appendChild(estadoNode);

									actionDocAbs.setCoModeloSel(documentoDTO.getId().getCoModelo());
									actionDocAbs.setCoVersionSel(documentoDTO.getId().getCoVersion());
									actionDocAbs.setCoDocumentoSel(documentoDTO.getId().getCoDocumento());
									actionDocAbs.execute();

									Element importePrincipalNode = doc.createElement("importePrincipal");
									importePrincipalNode.setTextContent((recibo.getImPrincipal() == null ? "" : Utilidades.getFormato2Number(recibo.getImPrincipal(), 15.2)));
									reciboInf.appendChild(importePrincipalNode);

									Element recargoNode = doc.createElement("recargo");
									recargoNode.setTextContent(Utilidades.getFormato2Number(actionDocAbs.getImRecargoApremio(), 15.2));
									reciboInf.appendChild(recargoNode);

									Element interesesDemoraNode = doc.createElement("interesesDemora");
									interesesDemoraNode.setTextContent(Utilidades.getFormato2Number(actionDocAbs.getImInteresesDemora(), 15.2));
									reciboInf.appendChild(interesesDemoraNode);

									Element deudaNode = doc.createElement("deuda");
									deudaNode.setTextContent(Utilidades.getFormato2Number(actionDocAbs.getDeudaVO().getImTotalPendiente(), 15.2));
									reciboInf.appendChild(deudaNode);

									Element pagoParcialNode = doc.createElement("pagoParcial");
									pagoParcialNode.setTextContent(Utilidades.getFormato2Number(actionDocAbs.getCobradoTotal(), 15.2));
									reciboInf.appendChild(pagoParcialNode);

									Element importePendienteNode = doc.createElement("importePendiente");
									importePendienteNode.setTextContent(Utilidades.getFormato2Number(actionDocAbs.getDeudaVO().getImTotalPendiente(), 15.2));
									reciboInf.appendChild(importePendienteNode);

									Element fxAltaNode = doc.createElement("fechaAlta");
									String fechaAlta = "";
									if (recibo.getFxIniVoluntario() != null) fechaAlta = Utilidades.dateToDDMMYYYY(recibo.getFxIniVoluntario());
									if (recibo.getFxFinVoluntario() != null) fechaAlta += " - " + Utilidades.dateToDDMMYYYY(recibo.getFxFinVoluntario());
									fxAltaNode.setTextContent(fechaAlta);
									reciboInf.appendChild(fxAltaNode);

									Element fxPagoNode = doc.createElement("fechaPago");
									fxPagoNode.setTextContent((recibo.getFxCobro() == null ? "" : Utilidades.dateToDDMMYYYY(recibo.getFxCobro())));
									reciboInf.appendChild(fxPagoNode);
								}
							}
						}
					}
				} else codigoError = NIF_CLIENTE_VACIO;
			} else codigoError = NIF_CLIENTE_VACIO;

			xmlRespuesta = "";
			try {
				XPathFactory factory = XPathFactory.newInstance();
				XPath xpath = factory.newXPath();
				Node codigoErrorNode = limpiaCreaElemento("/" + prefijo + "/propiedades/codigoError", xpath, doc);
				codigoErrorNode.setTextContent(codigoError);

				TransformerFactory transfac = TransformerFactory.newInstance();
				Transformer trans = transfac.newTransformer();
				StringWriter sw = new StringWriter();
				StreamResult salida = new StreamResult(sw);
				DOMSource fuente = new DOMSource(doc);
				trans.transform(fuente, salida);
				xmlRespuesta = sw.toString();
			} catch (Exception e) {
				log.error("Error en webservice", e);
			}

		} catch (Exception e) {
			log.error("Error en webservice", e);
			codigoError = ERROR_DATOS;
		}

		return codigoError;
	}

	private String wsdev(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega	
		//		System.out.println("----------------------------------------------");
		//		System.out.println("Entro en el webservice de devoluciones");
		//		System.out.println("----------------------------------------------");
		String codigoError = "0";
		NodeList elementos = null;
		ClienteDTO clienteDTO = new ClienteDTO();
		String municipioCompensacion = "";
		String recibos = "";
		MunicipioDTO municipioDTO = new MunicipioDTO();
		List<ClienteDTO> clientes = new ArrayList<ClienteDTO>();
		String coCliente = "";

		try {
			elementos = doc.getElementsByTagName("solicitanteRepresentante").item(0).getChildNodes();
			if (elementos.getLength() > 1 && elementos.item(0).getNodeName().equals("nifContribuyente")) {
				String nif = elementos.item(0).getTextContent();
				if (!Utilidades.isEmpty(nif)) {
					nif = nif.trim();
					String nombreCliente = "";
					if (elementos.item(1).getNodeName().equals("nombreContribuyente")) nombreCliente = elementos.item(1).getTextContent();

					coCliente = comprobarCliente(nif, nombreCliente);
					if (NIF_INEXISTENTE.equals(coCliente) || CLIENTE_INACTIVO.equals(coCliente)) {
						codigoError = coCliente;
					} else {
						clienteDTO = clienteBO.findById(Long.parseLong(coCliente));
					}

					municipioCompensacion = doc.getElementsByTagName("municipioCompensacion").item(0).getTextContent();

					if (!Utilidades.isEmpty(municipioCompensacion)) {
						if (municipioCompensacion.length() == 3) {
							municipioDTO = municipioBO.findById(new MunicipioDTOId("11", municipioCompensacion));
						} else {
							if (municipioCompensacion.length() == 5) {
								municipioDTO = municipioBO.findById(new MunicipioDTOId(municipioCompensacion.substring(0, 2), municipioCompensacion.substring(2)));
							} else codigoError = MUNICIPIO_INCORRECTO;
						}
					}

					if (codigoError.equals("0")) {
						try {
							XPathFactory factory = XPathFactory.newInstance();
							XPath xpath = factory.newXPath();
							Node listaRecibosNode = limpiaCreaElemento("/" + prefijo + "/datosExpediente/objetoFormaDevolucion/recibosCompensar", xpath, doc);

							List<DocumentoLiquidacionDTO> listaDocsLiquidacion = documentoLiquidacionBO.findByCriteria(getCriterio(municipioDTO.getCodigoCompleto(), clienteDTO.getCoCliente(),
																																	IncidenciaConstants.CO_INCIDENCIA_PAGO_GENERAL, "CMP"));
							//							System.out.println("----------------------------------------------");
							//							System.out.println("Tamaño de lista de recibos a compensar: " + listaDocsLiquidacion.size());
							//							System.out.println("----------------------------------------------");
							//							System.out.println(String.format("%1$-" + 52 + "s", "blablabla"));

							for (DocumentoLiquidacionDTO documentoLiquidacionDTO : listaDocsLiquidacion) {
								DeudaVO deudaVO = ((DeudaBO) GadirConfig.getBean("deudaBO")).execute(documentoLiquidacionDTO.getId().getCoModelo(), documentoLiquidacionDTO.getId().getCoVersion(),
																										documentoLiquidacionDTO.getId().getCoDocumento());
								BigDecimal importePendienteCobro = deudaVO.getImTotalPendiente();
								if (importePendienteCobro == null || (importePendienteCobro != null && importePendienteCobro.doubleValue() > new BigDecimal("0").longValue())) {
									DocumentoDTO documentoDTO = documentoBO.findById(new DocumentoDTOId(documentoLiquidacionDTO.getId().getCoModelo(), documentoLiquidacionDTO.getId().getCoVersion(),
											documentoLiquidacionDTO.getId().getCoDocumento()));
									Element reciboNode = doc.createElement("reciboCompensar");
									reciboNode.setTextContent("");

									Element conceptoNode = doc.createElement("concepto");
									conceptoNode.setTextContent(documentoDTO.getConceptoDTO().getCoConcepto());
									reciboNode.appendChild(conceptoNode);

									Element ejercicioNode = doc.createElement("ejercicio");
									ejercicioNode.setTextContent("" + documentoDTO.getEjercicio());
									reciboNode.appendChild(ejercicioNode);

									Element periodoNode = doc.createElement("periodo");
									periodoNode.setTextContent("" + documentoDTO.getPeriodo());
									reciboNode.appendChild(periodoNode);

									Element numNode = doc.createElement("numero");
									numNode.setTextContent("" + documentoDTO.getCodigoCompleto());
									reciboNode.appendChild(numNode);

									Element importeNode = doc.createElement("importe");
									if (importePendienteCobro == null)
										importeNode.setTextContent("" + documentoLiquidacionDTO.getImPrincipal());
									else importeNode.setTextContent("" + importePendienteCobro);
									reciboNode.appendChild(importeNode);
									listaRecibosNode.appendChild(reciboNode);

									Element refNode = doc.createElement("refObjTributario");
									refNode.setTextContent("" + documentoDTO.getRefObjTributario1());
									reciboNode.appendChild(refNode);
								}
							}

							recibos += "</recibosCompensar>";
						} catch (Exception e) {
							log.error("Error en webservice", e);
						}
					}
				} else codigoError = NIF_CLIENTE_VACIO;
			}
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}

		try {
			XPathFactory factory = XPathFactory.newInstance();
			XPath xpath = factory.newXPath();
			Node codigoErrorNode = limpiaCreaElemento("/" + prefijo + "/propiedades/codigoError", xpath, doc);
			codigoErrorNode.setTextContent(codigoError);

			TransformerFactory transfac = TransformerFactory.newInstance();
			Transformer trans = transfac.newTransformer();
			StringWriter sw = new StringWriter();
			StreamResult salida = new StreamResult(sw);
			DOMSource fuente = new DOMSource(doc);
			trans.transform(fuente, salida);
			xmlRespuesta = sw.toString();
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}

		return codigoError;
	}

	private String wspag(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega	
		//		System.out.println("-----------------------------------------------");
		//		System.out.println("-- Entro en el webservice de pago con red.es --");
		//		System.out.println("-----------------------------------------------");
		String codigoError = "0";
		NodeList elementos = null;
		ClienteDTO clienteDTO = new ClienteDTO();
		String municipioPago = "";
		String recibos = "";
		MunicipioDTO municipioDTO = new MunicipioDTO();
		List<ClienteDTO> clientes = new ArrayList<ClienteDTO>();
		String coCliente = "";

		try {
			elementos = doc.getElementsByTagName("contribuyenteRepresentante").item(0).getChildNodes();
			if (elementos.getLength() > 1 && elementos.item(0).getNodeName().equals("nifContribuyente")) {
				String nif = elementos.item(0).getTextContent();
				if (!Utilidades.isEmpty(nif)) {
					nif = nif.trim();
					String nombreCliente = "";
					if (elementos.item(1).getNodeName().equals("nombreContribuyente")) nombreCliente = elementos.item(1).getTextContent();

					coCliente = comprobarCliente(nif, nombreCliente);
					if (NIF_INEXISTENTE.equals(coCliente) || CLIENTE_INACTIVO.equals(coCliente)) {
						codigoError = coCliente;
					} else {
						clienteDTO = clienteBO.findById(Long.parseLong(coCliente));
					}

					municipioPago = doc.getElementsByTagName("municipio").item(0).getTextContent();

					if (!Utilidades.isEmpty(municipioPago)) {
						if (municipioPago.length() == 3) {
							municipioDTO = municipioBO.findById(new MunicipioDTOId("11", municipioPago));
						} else {
							if (municipioPago.length() == 5) {
								municipioDTO = municipioBO.findById(new MunicipioDTOId(municipioPago.substring(0, 2), municipioPago.substring(2)));
							} else codigoError = MUNICIPIO_INCORRECTO;
						}
					}

					if (codigoError.equals("0")) {
						try {
							XPathFactory factory = XPathFactory.newInstance();
							XPath xpath = factory.newXPath();
							Node listaRecibosNode = limpiaCreaElemento("/" + prefijo + "/datosInforme/recibos", xpath, doc);

							List<DocumentoLiquidacionDTO> listaDocsLiquidacion = documentoLiquidacionBO.findByCriteria(getCriterio(municipioDTO.getCodigoCompleto(), clienteDTO.getCoCliente(),
																																	IncidenciaConstants.CO_INCIDENCIA_PAGO_GENERAL, ""));
							//							System.out.println("----------------------------------------------");
							//							System.out.println("Tamaño de lista de recibos a pendientes de pago: " + listaDocsLiquidacion.size());
							//							System.out.println("----------------------------------------------");
							//							System.out.println(String.format("%1$-" + 52 + "s", "blablabla"));

							for (DocumentoLiquidacionDTO documentoLiquidacionDTO : listaDocsLiquidacion) {
								DeudaVO deudaVO = ((DeudaBO) GadirConfig.getBean("deudaBO")).execute(documentoLiquidacionDTO.getId().getCoModelo(), documentoLiquidacionDTO.getId().getCoVersion(),
																										documentoLiquidacionDTO.getId().getCoDocumento());
								BigDecimal importePendienteCobro = deudaVO.getImTotalPendiente();
								if (importePendienteCobro == null || (importePendienteCobro != null && importePendienteCobro.doubleValue() > new BigDecimal("0").longValue())) {
									DocumentoDTO documentoDTO = documentoBO.findById(new DocumentoDTOId(documentoLiquidacionDTO.getId().getCoModelo(), documentoLiquidacionDTO.getId().getCoVersion(),
											documentoLiquidacionDTO.getId().getCoDocumento()));
									Element reciboNode = doc.createElement("reciboInf");
									reciboNode.setTextContent("");

									Element conceptoNode = doc.createElement("concepto");
									conceptoNode.setTextContent(documentoDTO.getConceptoDTO().getCoConcepto());
									reciboNode.appendChild(conceptoNode);

									Element ejercicioNode = doc.createElement("ejercicio");
									ejercicioNode.setTextContent("" + documentoDTO.getEjercicio());
									reciboNode.appendChild(ejercicioNode);

									Element periodoNode = doc.createElement("periodoVoluntaria");
									String periodoVoluntaria = "";
									if (documentoLiquidacionDTO.getFxIniVoluntario() != null)
										periodoVoluntaria = "DE " + Utilidades.dateToDDMMYYYY(documentoLiquidacionDTO.getFxIniVoluntario());
									else periodoVoluntaria = "DE --- ";
									if (documentoLiquidacionDTO.getFxFinVoluntario() != null)
										periodoVoluntaria += "A " + Utilidades.dateToDDMMYYYY(documentoLiquidacionDTO.getFxFinVoluntario());
									else periodoVoluntaria += "A --- ";
									periodoNode.setTextContent("" + documentoLiquidacionDTO.getFxIniVoluntario());
									reciboNode.appendChild(periodoNode);

									Element numNode = doc.createElement("referenciaObjetoTributaria");
									numNode.setTextContent("" + documentoDTO.getRefObjTributario1());
									reciboNode.appendChild(numNode);

									Element importeNode = doc.createElement("importePendiente");
									if (importePendienteCobro == null)
										importeNode.setTextContent("" + documentoLiquidacionDTO.getImPrincipal());
									else importeNode.setTextContent("" + importePendienteCobro);
									reciboNode.appendChild(importeNode);

									Element periodNode = doc.createElement("periodo");
									periodNode.setTextContent("" + documentoDTO.getPeriodo());
									reciboNode.appendChild(periodNode);

									listaRecibosNode.appendChild(reciboNode);
								}
							}
						} catch (Exception e) {
							log.error("Error en webservice", e);
						}
					}
				} else codigoError = NIF_CLIENTE_VACIO;
			}
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}

		try {
			XPathFactory factory = XPathFactory.newInstance();
			XPath xpath = factory.newXPath();
			Node codigoErrorNode = limpiaCreaElemento("/" + prefijo + "/propiedades/codigoError", xpath, doc);
			codigoErrorNode.setTextContent(codigoError);

			TransformerFactory transfac = TransformerFactory.newInstance();
			Transformer trans = transfac.newTransformer();
			StringWriter sw = new StringWriter();
			StreamResult salida = new StreamResult(sw);
			DOMSource fuente = new DOMSource(doc);
			trans.transform(fuente, salida);
			xmlRespuesta = sw.toString();
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}

		return codigoError;
	}

	private String wspag2(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega	
		//		System.out.println("-----------------------------------------------");
		//		System.out.println("--- Entro en el webservice de carta de pago ---");
		//		System.out.println("-----------------------------------------------");
		String codigoError = "0";
		NodeList elementos = null;
		ClienteDTO clienteDTO = new ClienteDTO();
		String municipioPago = "";

		MunicipioDTO municipioDTO = new MunicipioDTO();
		List<ClienteDTO> clientes = new ArrayList<ClienteDTO>();
		String coCliente = "";

		try {
			elementos = doc.getElementsByTagName("contribuyenteRepresentante").item(0).getChildNodes();
			if (elementos.getLength() > 1 && elementos.item(0).getNodeName().equals("nifContribuyente")) {
				String nif = elementos.item(0).getTextContent();
				if (!Utilidades.isEmpty(nif)) {
					nif = nif.trim();
					String nombreCliente = "";
					if (elementos.item(1).getNodeName().equals("nombreContribuyente")) nombreCliente = elementos.item(1).getTextContent();

					coCliente = comprobarCliente(nif, nombreCliente);
					if (NIF_INEXISTENTE.equals(coCliente) || CLIENTE_INACTIVO.equals(coCliente)) {
						codigoError = coCliente;
					} else {
						clienteDTO = clienteBO.findById(Long.parseLong(coCliente));
					}

					municipioPago = doc.getElementsByTagName("municipio").item(0).getTextContent();

					if (!Utilidades.isEmpty(municipioPago)) {
						if (municipioPago.length() == 3) {
							municipioDTO = municipioBO.findById(new MunicipioDTOId("11", municipioPago));
						} else {
							if (municipioPago.length() == 5) {
								municipioDTO = municipioBO.findById(new MunicipioDTOId(municipioPago.substring(0, 2), municipioPago.substring(2)));
							} else codigoError = MUNICIPIO_INCORRECTO;
						}
					}

					if (codigoError.equals("0")) {
						try {
							XPathFactory factory = XPathFactory.newInstance();
							XPath xpath = factory.newXPath();
							Node listaRecibosNode = limpiaCreaElemento("/" + prefijo + "/datosInforme/recibos", xpath, doc);

							List<DocumentoLiquidacionDTO> listaDocsLiquidacion = documentoLiquidacionBO.findByCriteria(getCriterio(municipioDTO.getCodigoCompleto(), clienteDTO.getCoCliente(),
																																	IncidenciaConstants.CO_INCIDENCIA_IMPRIMIR_DIPTICO, ""));
							//							System.out.println("----------------------------------------------");
							//							System.out.println("Tamaño de lista de recibos a pendientes de pago: " + listaDocsLiquidacion.size());
							//							System.out.println("----------------------------------------------");
							//							System.out.println(String.format("%1$-" + 52 + "s", "blablabla"));

							for (DocumentoLiquidacionDTO documentoLiquidacionDTO : listaDocsLiquidacion) {
								DeudaVO deudaVO = ((DeudaBO) GadirConfig.getBean("deudaBO")).execute(documentoLiquidacionDTO.getId().getCoModelo(), documentoLiquidacionDTO.getId().getCoVersion(),
																										documentoLiquidacionDTO.getId().getCoDocumento());
								BigDecimal importePendienteCobro = deudaVO.getImTotalPendiente();
								if (importePendienteCobro == null || (importePendienteCobro != null && importePendienteCobro.doubleValue() > new BigDecimal("0").longValue())) {
									DocumentoDTO documentoDTO = documentoBO.findById(new DocumentoDTOId(documentoLiquidacionDTO.getId().getCoModelo(), documentoLiquidacionDTO.getId().getCoVersion(),
											documentoLiquidacionDTO.getId().getCoDocumento()));
									Element reciboNode = doc.createElement("reciboInf");
									reciboNode.setTextContent("");

									Element conceptoNode = doc.createElement("concepto");
									conceptoNode.setTextContent(documentoDTO.getConceptoDTO().getCoConcepto());
									reciboNode.appendChild(conceptoNode);

									Element ejercicioNode = doc.createElement("ejercicio");
									ejercicioNode.setTextContent("" + documentoDTO.getEjercicio());
									reciboNode.appendChild(ejercicioNode);

									Element periodoNode = doc.createElement("periodoVoluntaria");
									String periodoVoluntaria = "";
									if (documentoLiquidacionDTO.getFxIniVoluntario() != null)
										periodoVoluntaria = "DE " + Utilidades.dateToDDMMYYYY(documentoLiquidacionDTO.getFxIniVoluntario());
									else periodoVoluntaria = "DE --- ";
									if (documentoLiquidacionDTO.getFxFinVoluntario() != null)
										periodoVoluntaria += " A " + Utilidades.dateToDDMMYYYY(documentoLiquidacionDTO.getFxFinVoluntario());
									else periodoVoluntaria += " A --- ";
									periodoNode.setTextContent("" + periodoVoluntaria);
									reciboNode.appendChild(periodoNode);

									Element refObjTributario = doc.createElement("referenciaObjetoTributaria");
									refObjTributario.setTextContent("" + documentoDTO.getRefObjTributario1());
									reciboNode.appendChild(refObjTributario);

									Element importeNode = doc.createElement("importePendiente");
									if (importePendienteCobro == null)
										importeNode.setTextContent("" + documentoLiquidacionDTO.getImPrincipal());
									else importeNode.setTextContent("" + importePendienteCobro);
									reciboNode.appendChild(importeNode);

									Element numRecibo = doc.createElement("numero");
									numRecibo.setTextContent(documentoDTO.getCodigoCompleto());
									reciboNode.appendChild(numRecibo);

									Element periodNode = doc.createElement("periodo");
									periodNode.setTextContent("" + documentoDTO.getPeriodo());
									reciboNode.appendChild(periodNode);

									listaRecibosNode.appendChild(reciboNode);
								}
							}
						} catch (Exception e) {
							log.error("Error en webservice", e);
						}
					}
				} else codigoError = NIF_CLIENTE_VACIO;
			}
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}

		try {
			XPathFactory factory = XPathFactory.newInstance();
			XPath xpath = factory.newXPath();
			Node codigoErrorNode = limpiaCreaElemento("/" + prefijo + "/propiedades/codigoError", xpath, doc);
			codigoErrorNode.setTextContent(codigoError);

			TransformerFactory transfac = TransformerFactory.newInstance();
			Transformer trans = transfac.newTransformer();
			StringWriter sw = new StringWriter();
			StreamResult salida = new StreamResult(sw);
			DOMSource fuente = new DOMSource(doc);
			trans.transform(fuente, salida);
			xmlRespuesta = sw.toString();
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}

		return codigoError;
	}

	private String wspag3(Document doc) throws GadirServiceException {
		//retorna codigo de error y modifica el documento que llega	
		//		System.out.println("-----------------------------------------------");
		//		System.out.println("--- Entro en el webservice de carta de pago ---");
		//		System.out.println("-----------------------------------------------");
		String codigoError = "0";
		NodeList elementos = null;

		String municipioPago = "";

		MunicipioDTO municipioDTO = new MunicipioDTO();
		List<ClienteDTO> clientes = new ArrayList<ClienteDTO>();
		String coCliente = "";

		try {
			elementos = doc.getElementsByTagName("contribuyenteRepresentante").item(0).getChildNodes();
			if (elementos.getLength() > 1 && elementos.item(0).getNodeName().equals("nifContribuyente")) {
				String nif = elementos.item(0).getTextContent();
				if (!Utilidades.isEmpty(nif)) {
					nif = nif.trim();
					String nombreCliente = "";
					if (elementos.item(1).getNodeName().equals("nombreContribuyente")) nombreCliente = elementos.item(1).getTextContent();

					coCliente = comprobarCliente(nif, nombreCliente);
					if (NIF_INEXISTENTE.equals(coCliente) || CLIENTE_INACTIVO.equals(coCliente)) {
						codigoError = coCliente;
					}

					municipioPago = doc.getElementsByTagName("municipio").item(0).getTextContent();

					if (!Utilidades.isEmpty(municipioPago)) {
						if (municipioPago.length() == 3) {
							municipioDTO = municipioBO.findById(new MunicipioDTOId("11", municipioPago));
						} else {
							if (municipioPago.length() == 5) {
								municipioDTO = municipioBO.findById(new MunicipioDTOId(municipioPago.substring(0, 2), municipioPago.substring(2)));
							} else codigoError = MUNICIPIO_INCORRECTO;
						}
						if (municipioDTO == null) codigoError = MUNICIPIO_INCORRECTO;
					}

					String numeroRecibo = "";
					try {
						numeroRecibo = doc.getElementsByTagName("numero").item(0).getTextContent();
					} catch (Exception e) {
						numeroRecibo = "";
					}

					if (!Utilidades.isEmpty(numeroRecibo) && codigoError.equals("0")) {
						XPathFactory factory = XPathFactory.newInstance();
						XPath xpath = factory.newXPath();
						//Node reciboNode = leeElemento("/"+prefijo+"/datosInforme/recibos/reciboInf", xpath, doc);
						//Node listaRecibosNode = limpiaCreaElemento("/"+prefijo+"/datosInforme/recibos", xpath, doc);
						Node reciboNode = doc.getElementsByTagName("reciboInf").item(0);
						Node datosExpedienteNode = doc.getElementsByTagName("numExpedienteACERCA").item(0);
						String etiqueta = datosExpedienteNode.getTextContent().split("#")[0];
						String idConvocatoria = datosExpedienteNode.getTextContent().split("#")[1];

						if ((numeroRecibo.startsWith("2") || numeroRecibo.startsWith("4")) && numeroRecibo.length() == 13) {
							String coModeloPlantilla = numeroRecibo.substring(0, 3);
							String coVersionPlantilla = numeroRecibo.substring(3, 4);
							String coDocumento = numeroRecibo.substring(4, 13);

							try {
								String incidencia = IncidenciaConstants.CO_INCIDENCIA_IMPRIMIR_DIPTICO;
								String proceso = BatchConstants.CO_PROCESO_IMPRESION_DIPTICOS;
								DocumentoLiquidacionDTO docLiqDTO = documentoLiquidacionBO.findById(new DocumentoLiquidacionDTOId(coModeloPlantilla, coVersionPlantilla, coDocumento));
								if (docLiqDTO != null) {
									if (EstadoSituacionConstants.EJECUTIVA.equals(docLiqDTO.getEstadoSituacionDTO().getCoEstadoSituacion())) {
										proceso = "CARTA_PAGO_EJECUTIVA";
										incidencia = IncidenciaConstants.CO_INCIDENCIA_IMPRIMIR_CARTA_PAGO_EJECUTIVA;
									}
								}

								List<String> parametrosBatchLanzar = new ArrayList<String>();
								parametrosBatchLanzar.add(incidencia);
								parametrosBatchLanzar.add(""); //observaciones
								parametrosBatchLanzar.add(""); //fecha de baja (dd/mm/aaaa)
								parametrosBatchLanzar.add(""); //bo_economica

								String coProvinciaPlantilla = "**";
								String coMunicipioPlantilla = "***";

								String coConceptoPlantilla = null;
								try {
									coConceptoPlantilla = doc.getElementsByTagName("concepto").item(0).getTextContent();
								} catch (Exception e) {
									coConceptoPlantilla = "****";
								}

								parametrosBatchLanzar.add(numeroRecibo);
								AccesoPlantillaVO accesoPlantillaVO = new AccesoPlantillaVO();
								accesoPlantillaVO.setCoProvincia(coProvinciaPlantilla);
								accesoPlantillaVO.setCoMunicipio(coMunicipioPlantilla);
								accesoPlantillaVO.setCoConcepto(coConceptoPlantilla);
								accesoPlantillaVO.setCoModelo(coModeloPlantilla);
								accesoPlantillaVO.setCoVersion(coVersionPlantilla);

								//int error = Batch.ejecutar(BatchConstants.CO_PROCESO_IMPRESION_DIPTICOS, parametrosBatchLanzar, accesoPlantillaVO);
								//								AcmUsuarioBO acmUsuarioBO = (AcmUsuarioBO)GadirConfig.getBean("acmUsuarioBO");
								//								AcmUsuarioDTO usuarioAcerca = acmUsuarioBO.findById("subsede");
								//								Batch.lanzar(BatchConstants.CO_PROCESO_IMPRESION_DIPTICOS, usuarioAcerca.getCoAcmUsuario(), parametrosBatchLanzar, null, accesoPlantillaVO);
								EjecucionDTO ejecucionDTO = Batch.ejecutarDevolverDTO(proceso, parametrosBatchLanzar, accesoPlantillaVO);
								//								
								if (ejecucionDTO != null && ejecucionDTO.getCoTerminacion().intValue() == 0) {
									InformeBO informeBO = (InformeBO) GadirConfig.getBean("informeBO");
									DetachedCriteria criteriaInforme = DetachedCriteria.forClass(InformeDTO.class);
									criteriaInforme.add(Restrictions.eq("ejecucionDTO.coEjecucion", ejecucionDTO.getCoEjecucion()));
									//									criteriaInforme.add(Restrictions.eq("ejecucionDTO.coEjecucion", Long.parseLong("679848")));
									List<InformeDTO> listaInformes = informeBO.findByCriteria(criteriaInforme);
									if (listaInformes != null && listaInformes.size() == 1) {
										InformeDTO informeDTO = listaInformes.get(0);
										String urlServicio = ResourceBundle.getBundle("es.dipucadiz.etir.comun.action.WebserviceAction").getString("url.webservice.ov");

										OficinaWS oficinaWS = OficinaWSUtil.getCliente(urlServicio);

										SistemaInformacionDTO sistema = null;
										try {
											sistema = oficinaWS.getSistemaInformacionByIdConvocatoria(Long.parseLong(idConvocatoria));
										} catch (Exception ex) {
											System.out.println("************************ Falla la bÃºsqueda del sistema de informacion");
										}

										if (sistema != null) {
											String userSistemaInformacion = sistema.getUsuarioWs();
											String passwordSistemaInformacion = sistema.getPasswordWs();
											String ruta = informeDTO.getRutaPdf();

											FileInputStream fileInputStream = null;
											fileInputStream = new FileInputStream(ruta);
											final int numberBytes = fileInputStream.available();
											final byte byteArray[] = new byte[numberBytes];
											fileInputStream.read(byteArray);

											String nombreFichero = "cpa_" + numeroRecibo + "_" + nif + ".pdf";
											oficinaWS.setDocSalida(etiqueta, nombreFichero, byteArray, userSistemaInformacion, passwordSistemaInformacion);
										}

									} else codigoError = ERROR_IMPRESION_DIPTICO;
								} else codigoError = ERROR_IMPRESION_DIPTICO;
								//								if (error != 0)
								//									codigoError = ERROR_IMPRESION_DIPTICO;
								//								else {
								//									ProcesoAccionDTO procesoAccionDTO = procesoAccionBO.findFiltered(
								//											new String[]{"procesoDTO.coProceso", "accion"}, 
								//											new Object[]{BatchConstants.CO_PROCESO_IMPRESION_DIPTICOS, "I"}, 
								//											0, 1).get(0);
								//									
								//									DetachedCriteria criterio = DetachedCriteria.forClass(PlantillaDTO.class);
								//									criterio.add(Restrictions.eq("procesoAccionDTO.coProcesoAccion", procesoAccionDTO.getCoProcesoAccion()));
								//									criterio.add(Restrictions.eq("municipioDTO.id", new MunicipioDTOId(coProvinciaPlantilla, coMunicipioPlantilla)));
								//									criterio.add(Restrictions.eq("conceptoDTO.coConcepto", coConceptoPlantilla));
								//									criterio.add(Restrictions.eq("modeloVersionDTO.id", new ModeloVersionDTOId(coModeloPlantilla, coVersionPlantilla)));
								//									criterio.add(Restrictions.eq("tipo", "D"));
								//									PlantillaDTO plantillaDTO = plantillaBO.findByCriteria(criterio, 0 , 1).get(0);
								//									
								//									DocumentoLiquidacionDTO documentoLiquidacionDTO = documentoLiquidacionBO.findById(new DocumentoLiquidacionDTOId(coModeloPlantilla, coVersionPlantilla, coDocumento));
								//									DocumentoDTO documentoDTO = documentoBO.findById(new DocumentoDTOId(documentoLiquidacionDTO.getId().getCoModelo(), documentoLiquidacionDTO.getId().getCoVersion(), documentoLiquidacionDTO.getId().getCoDocumento()));								
								//		
								//									//Element reciboNode = doc.createElement("reciboInf"); 
								//									//reciboNode.setTextContent("");
								//									
								//	//								Element conceptoNode = doc.createElement("concepto"); 
								//	//								conceptoNode.setTextContent(documentoDTO.getConceptoDTO().getCoConcepto());									
								//	//								reciboNode.appendChild(conceptoNode);
								//									
								//									Element ejercicioNode = doc.createElement("ejercicio"); 
								//									ejercicioNode.setTextContent(obtenerValorCampos(plantillaDTO.getCoPlantilla(), new String[]{"EJERC"}, numeroRecibo));									
								//									reciboNode.appendChild(ejercicioNode);
								//									
								//									Element periodoNode = doc.createElement("periodo"); 
								//									periodoNode.setTextContent(obtenerValorCampos(plantillaDTO.getCoPlantilla(), new String[]{"PRIOD"}, numeroRecibo));									
								//									reciboNode.appendChild(periodoNode);
								//									
								//									Element periodoVoluntariaNode = doc.createElement("periodoVoluntaria"); 
								//									String periodoVoluntaria = "DE ";
								//									periodoVoluntaria += obtenerValorCampos(plantillaDTO.getCoPlantilla(), new String[]{"FXDES"}, numeroRecibo);
								//									
								//									periodoVoluntaria += " A ";
								//									periodoVoluntaria += obtenerValorCampos(plantillaDTO.getCoPlantilla(), new String[]{"FXHAS"}, numeroRecibo);
								//									
								//									periodoVoluntariaNode.setTextContent(periodoVoluntaria);									
								//									reciboNode.appendChild(periodoVoluntariaNode);
								//									
								//									Element numNode = doc.createElement("referenciaObjetoTributaria"); 
								//									numNode.setTextContent(""+documentoDTO.getRefObjTributario1());									
								//									reciboNode.appendChild(numNode);
								//									
								//									Element importeNode = doc.createElement("importePendiente");
								//									String imTotif = "";
								//									if(coModeloPlantilla.startsWith("4") && ConceptoConstants.CO_CONCEPTO_IVTM.equals(coConceptoPlantilla)) {
								//										imTotif = obtenerValorCampos(plantillaDTO.getCoPlantilla(), new String[]{"IMPTE"}, numeroRecibo);
								//									}
								//									else {
								//										imTotif = obtenerValorCampos(plantillaDTO.getCoPlantilla(), new String[]{"TOTIF"}, numeroRecibo);
								//									}
								//									importeNode.setTextContent(imTotif);
								//									reciboNode.appendChild(importeNode);
								//									
								//									String codigoBarras = obtenerCodigoBarras(coModeloPlantilla, coVersionPlantilla, coDocumento, IncidenciaConstants.CO_INCIDENCIA_IMPRIMIR_DIPTICO);
								//									if(!Utilidades.isEmpty(codigoBarras)) {
								//										Element codBarras = doc.createElement("codigoBarras"); 
								//										
								//	//									Object o = documentoBO.ejecutaQuerySelect("select fu_ga_codebar128 ('" + codigoBarras + "') from dual");
								//	//									System.out.println(o);
								//	//									String codBarrasCodificada = (String)((List)o).get(0);
								//										String[] etiquetaKBARL = new String[]{"KBARL"};
								//										String codBarrasCodificada = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetaKBARL, numeroRecibo);
								//	//									Element linea8 = doc.createElement("linea8"); 
								//	//									linea8.setTextContent(codBarrasCodificada);									
								//	//									reciboNode.appendChild(linea8);
								//										codBarras.setTextContent(codigoBarras+"CODE128"+codBarrasCodificada);									
								//										reciboNode.appendChild(codBarras);
								//										
								//										Element emisora = doc.createElement("emisora"); 
								//										emisora.setTextContent(codigoBarras.substring(5, 11));									
								//										reciboNode.appendChild(emisora);
								//										
								//										Element referencia = doc.createElement("referencia"); 
								//										referencia.setTextContent(codigoBarras.substring(11, 23));									
								//										reciboNode.appendChild(referencia);
								//										
								//										Element identificacion = doc.createElement("identificacion"); 
								//										identificacion.setTextContent(codigoBarras.substring(23, 33));									
								//										reciboNode.appendChild(identificacion);								
								//									}
								//									
								//									Element referenciaDomiciliacion = doc.createElement("referenciaDomiciliacion"); 
								//									String refDom = obtenerValorCampos(plantillaDTO.getCoPlantilla(), new String[]{"RFDOM"}, numeroRecibo);
								//									referenciaDomiciliacion.setTextContent(refDom);									
								//									reciboNode.appendChild(referenciaDomiciliacion);
								//									
								//									String[] etiquetasLinea1 = new String[]{"NUNIF", "NOMBR", "DOMIN"};
								//									String valorLinea1 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea1, numeroRecibo);
								//									Element linea1 = doc.createElement("linea1"); 
								//									linea1.setTextContent(valorLinea1);									
								//									reciboNode.appendChild(linea1);
								//									
								//									String[] etiquetasLinea2 = new String[]{"CODPN", "MUNIN", "PROVN"};
								//									String valorLinea2 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea2, numeroRecibo);
								//									Element linea2 = doc.createElement("linea2"); 
								//									linea2.setTextContent(valorLinea2);									
								//									reciboNode.appendChild(linea2);
								//									
								//									if(coModeloPlantilla.startsWith("2")) {
								//										String[] etiquetasLinea3 = new String[]{"VAR01", "REFCA", "VAR02", "DOMIT"};
								//										String valorLinea3 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea3, numeroRecibo);
								//										Element linea3 = doc.createElement("linea3"); 
								//										linea3.setTextContent(valorLinea3);									
								//										reciboNode.appendChild(linea3);
								//										
								//										String[] etiquetasLinea4 = new String[]{"VAR03", "DETA1", "VAR04", "BASIM", "VAR05", "TIPGR"};
								//										String valorLinea4 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea4, numeroRecibo);
								//										Element linea4 = doc.createElement("linea4"); 
								//										linea4.setTextContent(valorLinea4);									
								//										reciboNode.appendChild(linea4);
								//										
								//										String[] etiquetasLinea5 = new String[]{"VAR06", "DETA2", "VAR07", "DETA3", "VAR08", "DETA4"};
								//										String valorLinea5 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea5, numeroRecibo);
								//										Element linea5 = doc.createElement("linea5"); 
								//										linea5.setTextContent(valorLinea5);									
								//										reciboNode.appendChild(linea5);
								//										
								//										String[] etiquetasLinea6 = new String[]{"VAR09", "DETA5", "VAR10", "DETA6", "VAR11", "DETA7"};
								//										String valorLinea6 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea6, numeroRecibo);
								//										Element linea6 = doc.createElement("linea6"); 
								//										linea6.setTextContent(valorLinea6);									
								//										reciboNode.appendChild(linea6);
								//										
								//										String[] etiquetasLinea7 = new String[]{"VAR12", "CTRIB", "VAR13", "BONIF", "INFA1", "INFA2"};
								//										String valorLinea7 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea7, numeroRecibo);
								//										Element linea7 = doc.createElement("linea7"); 
								//										linea7.setTextContent(valorLinea7);									
								//										reciboNode.appendChild(linea7);
								//									}
								//									else { //TODO CAMPOS DE LAS PLANTILLAS DE LIQUIDACIONES
								//										if(ConceptoConstants.CO_CONCEPTO_IVTM.equals(coConceptoPlantilla)) { //plantilla de liquidaciones i.v.t.m
								//											String[] etiquetasLinea3 = new String[]{"DETA3"};
								//											String valorLinea3 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea3, numeroRecibo);
								//											Element linea3 = doc.createElement("linea3"); 
								//											linea3.setTextContent(valorLinea3);									
								//											reciboNode.appendChild(linea3);
								//											
								//											String[] etiquetasLinea4 = new String[]{"DETA1", "DETA2", "ELTRI"};
								//											String valorLinea4 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea4, numeroRecibo);
								//											Element linea4 = doc.createElement("linea4"); 
								//											linea4.setTextContent(valorLinea4);									
								//											reciboNode.appendChild(linea4);
								//											
								//											String[] etiquetasLinea5 = new String[]{"TEJER", "TCPER", "TIPGR", "TBONI", "TOTIF"};
								//											String valorLinea5 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea5, numeroRecibo);
								//											Element linea5 = doc.createElement("linea5"); 
								//											linea5.setTextContent(valorLinea5);									
								//											reciboNode.appendChild(linea5);
								//										}
								//										else {
								//											if("0110".equals(coConceptoPlantilla)) { //plantilla de liquidaciones iae
								//												String[] etiquetasLinea3 = new String[]{"VAR01", "DOMIT"};
								//												String valorLinea3 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea3, numeroRecibo);
								//												Element linea3 = doc.createElement("linea3"); 
								//												linea3.setTextContent(valorLinea3);									
								//												reciboNode.appendChild(linea3);
								//												
								//												String[] etiquetasLinea4 = new String[]{"TRIFA", "CUOPO", "BOIAE"};
								//												String valorLinea4 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea4, numeroRecibo);
								//												Element linea4 = doc.createElement("linea4"); 
								//												linea4.setTextContent(valorLinea4);									
								//												reciboNode.appendChild(linea4);
								//												
								//												String[] etiquetasLinea5 = new String[]{"TARIF", "INDSI", "CBONI"};
								//												String valorLinea5 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea5, numeroRecibo);
								//												Element linea5 = doc.createElement("linea5"); 
								//												linea5.setTextContent(valorLinea5);									
								//												reciboNode.appendChild(linea5);
								//												
								//												String[] etiquetasLinea6 = new String[]{"COEPO", "CTRIB", "RECPR"};
								//												String valorLinea6 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea6, numeroRecibo);
								//												Element linea6 = doc.createElement("linea6"); 
								//												linea6.setTextContent(valorLinea6);									
								//												reciboNode.appendChild(linea6);
								//											}
								//											else { // resto de liquidaciones
								//												String[] etiquetasLinea3 = new String[]{"VAR01", "DOMIT"};
								//												String valorLinea3 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea3, numeroRecibo);
								//												Element linea3 = doc.createElement("linea3"); 
								//												linea3.setTextContent(valorLinea3);									
								//												reciboNode.appendChild(linea3);
								//												
								//												String[] etiquetasLinea4 = new String[]{"DETA1", "DETA2", "DETA3", "DETA4", "DETA5", "DETA6"};
								//												String valorLinea4 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea4, numeroRecibo);
								//												Element linea4 = doc.createElement("linea4"); 
								//												linea4.setTextContent(valorLinea4);									
								//												reciboNode.appendChild(linea4);
								//												
								//												String[] etiquetasLinea5 = new String[]{"TEJER", "TVACA", "TBALI", "TIPGR", "TBONI", "TIMPO"};
								//												String valorLinea5 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea5, numeroRecibo);
								//												Element linea5 = doc.createElement("linea5"); 
								//												linea5.setTextContent(valorLinea5);									
								//												reciboNode.appendChild(linea5);
								//												
								//												String[] etiquetasLinea6 = new String[]{"TEJE1", "TVAC1", "TBAL1", "TIPG1", "TBON1", "TIMP1"};
								//												String valorLinea6 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea6, numeroRecibo);
								//												Element linea6 = doc.createElement("linea6"); 
								//												linea6.setTextContent(valorLinea6);									
								//												reciboNode.appendChild(linea6);
								//												
								//												String[] etiquetasLinea7 = new String[]{"TEJE2", "TVAC2", "TBAL2", "TIPG2", "TBON2", "TIMP2"};
								//												String valorLinea7 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea7, numeroRecibo);
								//												Element linea7 = doc.createElement("linea7"); 
								//												linea7.setTextContent(valorLinea7);									
								//												reciboNode.appendChild(linea7);
								//												
								//												String[] etiquetasLinea8 = new String[]{"TEJE3", "TVAC3", "TBAL3", "TIPG3", "TBON3", "TIMP3"};
								//												String valorLinea8 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea8, numeroRecibo);
								//												Element linea8 = doc.createElement("linea8"); 
								//												linea8.setTextContent(valorLinea8);									
								//												reciboNode.appendChild(linea8);
								//												
								//												String[] etiquetasLinea9 = new String[]{"TEJE4", "TVAC4", "TBAL4", "TIPG4", "TBON4", "TIMP4"};
								//												String valorLinea9 = obtenerValorCampos(plantillaDTO.getCoPlantilla(), etiquetasLinea9, numeroRecibo);
								//												Element linea9 = doc.createElement("linea9"); 
								//												linea9.setTextContent(valorLinea9);									
								//												reciboNode.appendChild(linea9);
								//											}
								//										}
								//									}
								//								}												
							} catch (Exception e) {
								log.error("Error en webservice", e);
							}
						} else { //viene de sigre
							Node codigoBarras = doc.getElementsByTagName("codigoBarras").item(0);
							String codigoBarrasSigre = doc.getElementsByTagName("codigoBarras").item(0).getTextContent();
							Object o = documentoBO.ejecutaQuerySelect("select fu_ga_codebar128 ('" + codigoBarrasSigre + "') from dual");
							System.out.println(o);
							String codBarrasCodificada = (String) ((List) o).get(0);
							codigoBarras.setTextContent(codigoBarrasSigre + "CODE128" + codBarrasCodificada);
						}
					}
				} else codigoError = NIF_CLIENTE_VACIO;
			}
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}

		try {
			XPathFactory factory = XPathFactory.newInstance();
			XPath xpath = factory.newXPath();
			if (doc.getElementsByTagName("codigoError") == null || doc.getElementsByTagName("codigoError").getLength() == 0) {
				Node codigoErrorNode = limpiaCreaElemento("/" + prefijo + "/propiedades/codigoError", xpath, doc);
				codigoErrorNode.setTextContent(codigoError);
			}
			TransformerFactory transfac = TransformerFactory.newInstance();
			Transformer trans = transfac.newTransformer();
			StringWriter sw = new StringWriter();
			StreamResult salida = new StreamResult(sw);
			DOMSource fuente = new DOMSource(doc);
			trans.transform(fuente, salida);
			xmlRespuesta = sw.toString();
			xmlRespuesta = xmlRespuesta.replaceAll("null", "");
		} catch (Exception e) {
			log.error("Error en webservice", e);
		}

		return codigoError;
	}

	private String actualizarDomicilioNotificacionWSDomiciliaciones(ClienteDTO clienteDTO, Document doc) {
		String codigoError = "0";

		try {
			String coProvincia = doc.getElementsByTagName("provinciaNot").item(0).getTextContent();
			String coMunicipio = doc.getElementsByTagName("municipioNot").item(0).getTextContent();

			String nombreProvincia = provinciaBO.findById(coProvincia).getNombre();
			MunicipioDTOId mId = new MunicipioDTOId(coProvincia, coMunicipio);
			String nombreMunicipio = municipioBO.findById(mId).getNombre();
			String nombreVia = Utilidades.isEmpty(doc.getElementsByTagName("nombreVia").item(0).getTextContent()) ? "" : doc.getElementsByTagName("nombreVia").item(0).getTextContent().toUpperCase();

			nombreVia = Normalizer.normalize(nombreVia, Normalizer.Form.NFD);
			nombreVia = nombreVia.replaceAll("[\\p{InCombiningDiacriticalMarks}]", "");

			Map<String, Object> listaResultados = comprobarDomicilioBO.execute(clienteDTO.getCoCliente(), "", "****", nombreProvincia, nombreMunicipio, doc.getElementsByTagName("siglaVia").item(0)
					.getTextContent(), nombreVia, Utilidades.isEmpty(doc.getElementsByTagName("num").item(0).getTextContent()) ? null : Integer.parseInt(doc.getElementsByTagName("num").item(0)
					.getTextContent()), doc.getElementsByTagName("letra").item(0).getTextContent(), doc.getElementsByTagName("escalera").item(0).getTextContent(), doc.getElementsByTagName("planta")
					.item(0).getTextContent(), Utilidades.isEmpty(doc.getElementsByTagName("km").item(0).getTextContent()) ? null : new BigDecimal(doc.getElementsByTagName("km").item(0)
					.getTextContent()), doc.getElementsByTagName("puerta").item(0).getTextContent(), doc.getElementsByTagName("bloque").item(0).getTextContent(), Utilidades.isEmpty(doc
					.getElementsByTagName("codigoPostal").item(0).getTextContent()) ? null : Integer.parseInt(doc.getElementsByTagName("codigoPostal").item(0).getTextContent()), "", 0);
			Long coDomicilio = Long.parseLong(((BigDecimal) listaResultados.get("resultado")).toString());
			if (coDomicilio.equals(Long.parseLong("-1")))
				codigoError = DOMICILIO_INCORRECTO;
			else {
				DomicilioDTO d = domicilioBO.findById(coDomicilio);
				// Damos de alta datos domicilio notificación con documento y concepto genéricos, fecha inicio la actual
				// y si existe otro domicilio de notificación con documento y concepto genéricos para el cliente, 
				// ponemos al domicilio existente como fecha fin el dia anterior al actual.
				DetachedCriteria criteria = DetachedCriteria.forClass(DomicilioNotificacionDTO.class);
				criteria.add(Restrictions.eq("clienteDTO.coCliente", clienteDTO.getCoCliente()));
				criteria.add(Restrictions.eq("coModeloCenso", "***"));
				criteria.add(Restrictions.eq("coVersionCenso", "*"));
				criteria.add(Restrictions.eq("coDocumentoCenso", "*********"));
				criteria.add(Restrictions.eq("conceptoDTO.coConcepto", "****"));
				criteria.addOrder(Order.desc("fxVigenciaHasta"));

				List<DomicilioNotificacionDTO> domicilios = domicilioNotificacionBO.findByCriteria(criteria);

				DomicilioNotificacionDTO anterior = null;
				String coDomicilioAnterior = "";
				if (!domicilios.isEmpty()) {
					//Si ha cambiado el domicilio de notificación y la fecha de vigencia es mayor o igual a la fecha actual, ponemos al actual la fecha fin de vigencia a fecha de ayer
					anterior = domicilios.get(0);//el mas actual
					coDomicilioAnterior = anterior.getDomicilioDTO().getCoDomicilio().toString();

					if (!coDomicilioAnterior.equals(coDomicilio.toString()) && !anterior.getFxVigenciaHasta().before(Utilidades.getFechaActual())) {
						Date hoy = new Date();
						Date ayer = new Date(hoy.getTime() - 86400000);

						anterior.setFxVigenciaHasta(ayer);
						anterior.setCoUsuarioActualizacion("subsede");
						anterior.setFhActualizacion(new Date());
						domicilioNotificacionBO.save(anterior);
					}
				}

				//lo daremos de alta si ha cambiado el domicilio o si la fecha de fin de vigencia más actual es anterior a la fecha actual
				if (anterior == null
					|| (anterior != null && (!coDomicilioAnterior.equals(coDomicilio.toString()) || (coDomicilioAnterior.equals(coDomicilio.toString()) && !anterior.getFxVigenciaHasta()
							.after(Utilidades.getFechaActual()))))) {
					DomicilioNotificacionDTO actual = new DomicilioNotificacionDTO();
					actual.setClienteDTO(clienteDTO);
					actual.setMunicipioDTO(MunicipioConceptoModeloUtil.getMunicipioDTO("*****"));
					actual.setCoDocumentoCenso("*********");
					actual.setCoModeloCenso("***");
					actual.setConceptoDTO(MunicipioConceptoModeloUtil.getConceptoDTO("****"));
					actual.setCoVersionCenso("*");
					actual.setDomicilioDTO(d);
					actual.setFxVigenciaDesde(new Date());
					actual.setFxVigenciaHasta(Utilidades.DDMMYYYYToDate("31/12/2099"));
					actual.setModeloVersionDTO(modeloVersionBO.findById(new ModeloVersionDTOId("***", "*")));
					actual.setCoUsuarioActualizacion("subsede");
					actual.setFhActualizacion(new Date());
					domicilioNotificacionBO.save(actual);
				}

				if (d.getBoNotificacion() == null || !d.getBoNotificacion()) {
					d.setBoNotificacion(true);
					d.setProcedencia("sede");
					d.setFhActualizacion(new Date());
					d.setCoUsuarioActualizacion("subsede");
					domicilioBO.save(d);
				}
			}
		} catch (Exception e) {
			codigoError = DOMICILIO_INCORRECTO;
		}

		return codigoError;
	}

	private String altaDomiciliacion(String municipio, String concepto, String cliente, String refObjTributario, String clienteCuentaRowid, String tipoDomiciliacion, String refDomiciliacion,
										String documento) {
		String codigoError = "0";
		DocumentoDTO d = null;
		List<Object> res = new ArrayList<Object>();
		res.add(null);

		res = buscarDocumento(municipio, concepto, cliente, refObjTributario, refDomiciliacion, documento);
		d = (DocumentoDTO) res.get(0);
		try {
			if (d != null) {

				String refDomBuena = null;
				if (Utilidades.isEmpty(refDomiciliacion)) {
					if (d.getRefDomiciliacion() != null) {
						refDomBuena = d.getRefDomiciliacion();
					} else {
						refDomBuena = DomiciliacionUtil.generarRefdom();
					}
				} else refDomBuena = refDomiciliacion;

				final DetachedCriteria criteriaDom = DetachedCriteria.forClass(DomiciliacionDTO.class);
				criteriaDom.add(Restrictions.eq("clienteDTO.coCliente", Long.valueOf(cliente)));
				if (!Utilidades.isEmpty(municipio)) {
					criteriaDom.add(Restrictions.eq("municipioDTO.id.coProvincia", municipio.substring(0, 2)));
					criteriaDom.add(Restrictions.eq("municipioDTO.id.coMunicipio", municipio.substring(2, 5)));
				} else {
					criteriaDom.add(Restrictions.eq("municipioDTO.id", d.getMunicipioDTO().getId()));
				}

				if (!Utilidades.isEmpty(concepto))
					criteriaDom.add(Restrictions.eq("conceptoDTO.coConcepto", concepto));
				else criteriaDom.add(Restrictions.eq("conceptoDTO.coConcepto", d.getConceptoDTO().getCoConcepto()));

				if (!Utilidades.isEmpty(refObjTributario))
					criteriaDom.add(Restrictions.eq("refObjTributario", refObjTributario).ignoreCase());
				else criteriaDom.add(Restrictions.eq("refObjTributario", d.getRefObjTributario1()).ignoreCase());

				List<DomiciliacionDTO> listaDoms = domiciliacionBO.findByCriteria(criteriaDom, 0, 1);

				DomiciliacionDTO domiciliacionDTO = new DomiciliacionDTO();
				if (listaDoms != null && !listaDoms.isEmpty()) {
					//ya existe la domiciliacion, si era una baja la modifico
					domiciliacionDTO = listaDoms.get(0);
					if (domiciliacionDTO.getTipo().equals("B")) {
						domiciliacionDTO.setClienteCuentaDTO(clienteCuentaBO.findByRowid(clienteCuentaRowid));
						domiciliacionDTO.setTipo(tipoDomiciliacion);
						domiciliacionDTO.setRefDomiciliacion(refDomBuena);
						domiciliacionDTO.setFxInicio(new Date());
						domiciliacionDTO.setFxFinal(null);
						domiciliacionDTO.setProcedencia("@cer");
						domiciliacionDTO.setCoUsuarioActualizacion("subsede");
						domiciliacionDTO.setFhActualizacion(new Date());
						domiciliacionBO.save(domiciliacionDTO);
					} else codigoError = DOMICILIACION_YA_EXISTE;
				} else {
					domiciliacionDTO = new DomiciliacionDTO();
					domiciliacionDTO.setClienteCuentaDTO(clienteCuentaBO.findByRowid(clienteCuentaRowid));
					domiciliacionDTO.setClienteDTO(clienteBO.findById(Long.parseLong(cliente)));
					domiciliacionDTO.setRefObjTributario(d.getRefObjTributario1());
					domiciliacionDTO.setConceptoDTO(d.getConceptoDTO());
					//domiciliacionDTO.setDocumentoDTO(d);
					domiciliacionDTO.setMunicipioDTO(d.getMunicipioDTO());
					domiciliacionDTO.setTipo(tipoDomiciliacion);
					domiciliacionDTO.setRefDomiciliacion(refDomBuena);
					domiciliacionDTO.setFxInicio(new Date());
					domiciliacionDTO.setFxFinal(null);
					domiciliacionDTO.setProcedencia("@cer");
					domiciliacionDTO.setCoUsuarioActualizacion("subsede");
					domiciliacionDTO.setFhActualizacion(new Date());
					domiciliacionBO.save(domiciliacionDTO);
				}

				if ((Boolean) res.get(1)) {
					d.setDomiciliacionDTO(domiciliacionDTO);
					documentoBO.save(d);
				}

				final DetachedCriteria criteria2 = DetachedCriteria.forClass(DocumentoDTO.class);
				if (!Utilidades.isEmpty(municipio)) {
					criteria2.add(Restrictions.eq("municipioDTO.id.coProvincia", municipio.substring(0, 2)));
					criteria2.add(Restrictions.eq("municipioDTO.id.coMunicipio", municipio.substring(2, 5)));
				} else {
					criteria2.add(Restrictions.eq("municipioDTO.id", d.getMunicipioDTO().getId()));
				}

				if (!Utilidades.isEmpty(concepto))
					criteria2.add(Restrictions.eq("conceptoDTO.coConcepto", concepto));
				else criteria2.add(Restrictions.eq("conceptoDTO.coConcepto", d.getConceptoDTO().getCoConcepto()));

				if (!Utilidades.isEmpty(refObjTributario))
					criteria2.add(Restrictions.eq("refObjTributario1", refObjTributario).ignoreCase());
				else criteria2.add(Restrictions.eq("refObjTributario1", d.getRefObjTributario1()).ignoreCase());

				criteria2.add(Restrictions.eq("clienteDTO.coCliente", Long.valueOf(cliente)));
				criteria2.add(Restrictions.eq("estado", "B"));
				criteria2.add(Restrictions.eq("refDomiciliacion", refDomBuena));
				criteria2.add(Restrictions.isNull("domiciliacionDTO"));
				criteria2.add(Restrictions.eq("situacionDTO.coSituacion", SituacionConstants.CO_SITUACION_PENDIENTE));
				criteria2.createAlias("documentoLiquidacionDTO", "dl");
				criteria2.add(Restrictions.eq("dl.estadoSituacionDTO.coEstadoSituacion", EstadoSituacionConstants.VOLUNTARIA));
				criteria2.add(Restrictions.eq("dl.modoCobroDTO.coModoCobro", ModoCobroConstants.PENDIENTE));

				List<DocumentoDTO> lista = documentoBO.findByCriteria(criteria2);

				for (DocumentoDTO documentoDTO : lista) {
					List<CargoSubcargoSeguimientoDTO> listaSeguim = cargoSubcargoSeguimientoBO.findFiltered(new String[] {"cargoSubcargoDTO.coCargoSubcargo", "coIncidenciaCargo"}, new Object[] {
							documentoDTO.getDocumentoLiquidacionDTO().getCargoSubcargoDTO().getCoCargoSubcargo(), IncidenciaConstants.CO_INCIDENCIA_CARGO_GENERAR_C19});
					if (listaSeguim == null || listaSeguim.isEmpty()) {
						//no se ha enviado el C19 del cargo, pongo el co_domiciliacion al recibo

						DocumentoLiquidacionDTO documentoLiquidacion = documentoDTO.getDocumentoLiquidacionDTO();

						DocumentoSeguimientoDTO documentoSeguimiento = new DocumentoSeguimientoDTO();
						documentoSeguimiento.setCoProceso("G7A1");
						documentoSeguimiento.setDocumentoDTO(documentoDTO);
						documentoSeguimiento.setEstadoSituacionDTOByCoEstadoSituacionOrigen(documentoLiquidacion.getEstadoSituacionDTO());
						documentoSeguimiento.setEstadoSituacionDTOByCoEstadoSituacionDestino(documentoLiquidacion.getEstadoSituacionDTO());
						documentoSeguimiento.setModoCobroDTOByCoModoCobroOrigen(documentoLiquidacion.getModoCobroDTO());
						documentoSeguimiento.setModoCobroDTOByCoModoCobroDestino(new ModoCobroDTO(ModoCobroConstants.DOMICILIACION));
						documentoSeguimiento.setSituacionDTOByCoSituacionOrigen(documentoDTO.getSituacionDTO());
						documentoSeguimiento.setSituacionDTOByCoSituacionDestino(documentoDTO.getSituacionDTO());
						documentoSeguimiento.setIncidenciaDTO(new IncidenciaDTO(IncidenciaConstants.CO_INCIDENCIA_DOMICILIAR));
						//documentoSeguimiento.setIncidenciaDTO(new IncidenciaDTO(IncidenciaConstants.CO_INCIDENCIA_DOMICILIAR));
						//documentoSeguimiento.setObservaciones(observaciones);
						documentoSeguimientoBO.save(documentoSeguimiento);

						documentoLiquidacion.setModoCobroDTO(new ModoCobroDTO(ModoCobroConstants.DOMICILIACION));
						documentoLiquidacionBO.save(documentoLiquidacion);

						documentoDTO.setDomiciliacionDTO(domiciliacionDTO);
						documentoBO.save(documentoDTO);
					}
				}
			} else { //creamos una domiciliación temporal
				DomiciliacionDTO domiciliacionTempDTO = new DomiciliacionDTO();
				domiciliacionTempDTO.setClienteCuentaDTO(clienteCuentaBO.findByRowid(clienteCuentaRowid));
				domiciliacionTempDTO.setClienteDTO(clienteBO.findById(Long.parseLong(cliente)));
				domiciliacionTempDTO.setRefObjTributario(refObjTributario);
				domiciliacionTempDTO.setConceptoDTO(conceptoBO.findById(concepto));
				//domiciliacionTempDTO(d);
				domiciliacionTempDTO.setMunicipioDTO(MunicipioConceptoModeloUtil.getMunicipioDTO(municipio));
				domiciliacionTempDTO.setTipo("T");
				if (!Utilidades.isEmpty(refDomiciliacion))
					domiciliacionTempDTO.setRefDomiciliacion(refDomiciliacion);
				else domiciliacionTempDTO.setRefDomiciliacion(DomiciliacionUtil.generarRefdom());
				domiciliacionTempDTO.setFxInicio(new Date());
				domiciliacionTempDTO.setFxFinal(null);
				domiciliacionTempDTO.setProcedencia("@cer");
				domiciliacionTempDTO.setCoUsuarioActualizacion("subsede");
				domiciliacionTempDTO.setFhActualizacion(new Date());
				domiciliacionBO.save(domiciliacionTempDTO);
			}
		} catch (Exception e) {
			log.error("Error en webservice", e);
			codigoError = ERROR_DATOS;
		}

		return codigoError;
	}

	private String modificarDomiciliacion(String municipio, String concepto, String cliente, String refObjTributario, String clienteCuentaRowid, String tipoDomiciliacion, String refDomiciliacion,
											String documento) {
		String codigoError = "0";

		DocumentoDTO d = null;
		List<Object> res = new ArrayList<Object>();
		res.add(null);

		res = buscarDocumento(municipio, concepto, cliente, refObjTributario, refDomiciliacion, documento);
		d = (DocumentoDTO) res.get(0);
		try {
			if (d != null) {
				final DetachedCriteria criteriaDom = DetachedCriteria.forClass(DomiciliacionDTO.class);
				criteriaDom.add(Restrictions.eq("clienteDTO.coCliente", Long.valueOf(cliente)));

				if (!Utilidades.isEmpty(municipio)) {
					criteriaDom.add(Restrictions.eq("municipioDTO.id.coProvincia", municipio.substring(0, 2)));
					criteriaDom.add(Restrictions.eq("municipioDTO.id.coMunicipio", municipio.substring(2, 5)));
				} else {
					criteriaDom.add(Restrictions.eq("municipioDTO.id", d.getMunicipioDTO().getId()));
				}

				if (!Utilidades.isEmpty(concepto))
					criteriaDom.add(Restrictions.eq("conceptoDTO.coConcepto", concepto));
				else criteriaDom.add(Restrictions.eq("conceptoDTO.coConcepto", d.getConceptoDTO().getCoConcepto()));

				if (!Utilidades.isEmpty(refObjTributario))
					criteriaDom.add(Restrictions.eq("refObjTributario", refObjTributario).ignoreCase());
				else criteriaDom.add(Restrictions.eq("refObjTributario", d.getRefObjTributario1()).ignoreCase());

				if (!Utilidades.isEmpty(refDomiciliacion)) criteriaDom.add(Restrictions.eq("refDomiciliacion", refDomiciliacion).ignoreCase());

				if (!Utilidades.isEmpty(documento)) {
					criteriaDom.add(Restrictions.eq("documentoDTO.id.coModelo", documento.substring(0, 3)));
					criteriaDom.add(Restrictions.eq("documentoDTO.id.coVersion", documento.substring(3, 4)));
					criteriaDom.add(Restrictions.eq("documentoDTO.id.coDocumento", documento.substring(4)));
				}
				List<DomiciliacionDTO> listaDoms = domiciliacionBO.findByCriteria(criteriaDom, 0, 1);

				if (!listaDoms.isEmpty()) {
					DomiciliacionDTO domiciliacionDTO = listaDoms.get(0);
					domiciliacionDTO.setClienteCuentaDTO(clienteCuentaBO.findByRowid(clienteCuentaRowid));
					domiciliacionDTO.setTipo(tipoDomiciliacion);
					domiciliacionDTO.setProcedencia("@cer");
					domiciliacionDTO.setCoUsuarioActualizacion("subsede");
					domiciliacionDTO.setFhActualizacion(new Date());
					domiciliacionBO.save(domiciliacionDTO);
				}
			}
		} catch (Exception e) {
			log.error("Error en webservice", e);
			codigoError = ERROR_DATOS;
		}

		return codigoError;
	}

	private String bajaDomiciliacion(String municipio, String concepto, String cliente, String refObjTributario, String refDomiciliacion, String documento) {
		String codigoError = "0";

		DocumentoDTO d = null;
		List<Object> res = new ArrayList<Object>();
		res.add(null);

		res = buscarDocumento(municipio, concepto, cliente, refObjTributario, refDomiciliacion, documento);
		d = (DocumentoDTO) res.get(0);
		try {
			if (d != null) {
				final DetachedCriteria criteriaDom = DetachedCriteria.forClass(DomiciliacionDTO.class);
				criteriaDom.add(Restrictions.eq("clienteDTO.coCliente", Long.valueOf(cliente)));

				if (!Utilidades.isEmpty(municipio)) {
					criteriaDom.add(Restrictions.eq("municipioDTO.id.coProvincia", municipio.substring(0, 2)));
					criteriaDom.add(Restrictions.eq("municipioDTO.id.coMunicipio", municipio.substring(2, 5)));
				} else {
					criteriaDom.add(Restrictions.eq("municipioDTO.id", d.getMunicipioDTO().getId()));
				}

				if (!Utilidades.isEmpty(concepto))
					criteriaDom.add(Restrictions.eq("conceptoDTO.coConcepto", concepto));
				else criteriaDom.add(Restrictions.eq("conceptoDTO.coConcepto", d.getConceptoDTO().getCoConcepto()));

				if (!Utilidades.isEmpty(refObjTributario))
					criteriaDom.add(Restrictions.eq("refObjTributario", refObjTributario).ignoreCase());
				else criteriaDom.add(Restrictions.eq("refObjTributario", d.getRefObjTributario1()).ignoreCase());

				if (!Utilidades.isEmpty(refDomiciliacion)) criteriaDom.add(Restrictions.eq("refDomiciliacion", refDomiciliacion).ignoreCase());

				if (!Utilidades.isEmpty(documento)) {
					criteriaDom.add(Restrictions.eq("documentoDTO.id.coModelo", documento.substring(0, 3)));
					criteriaDom.add(Restrictions.eq("documentoDTO.id.coVersion", documento.substring(3, 4)));
					criteriaDom.add(Restrictions.eq("documentoDTO.id.coDocumento", documento.substring(4)));
				}
				List<DomiciliacionDTO> listaDoms = domiciliacionBO.findByCriteria(criteriaDom, 0, 1);

				if (listaDoms != null && !listaDoms.isEmpty()) {
					DomiciliacionDTO domiciliacionDTO = listaDoms.get(0);

					boolean cambioCenso = false;

					//busco un censo con esta domiciliacion y regenero la refdom
					DetachedCriteria dc = DetachedCriteria.forClass(DocumentoDTO.class);
					dc.add(Restrictions.eq("domiciliacionDTO.coDomiciliacion", domiciliacionDTO.getCoDomiciliacion()));
					dc.add(Restrictions.like("id.coModelo", "1%"));
					dc.setFetchMode("documentoCensoDTO", FetchMode.JOIN);

					List<DocumentoDTO> lista = documentoBO.findByCriteria(dc);
					String refdomCenso = "";
					refdomCenso = DomiciliacionUtil.generarRefdom();
					if (lista != null) {
						for (DocumentoDTO documentoDTO : lista) {
							documentoDTO.setDomiciliacionDTO(null);
							documentoDTO.setRefDomiciliacion(refdomCenso);
							documentoBO.save(documentoDTO);
							cambioCenso = true;
						}
					}

					final DetachedCriteria criteria2 = DetachedCriteria.forClass(DocumentoDTO.class);
					criteria2.add(Restrictions.eq("municipioDTO.id.coProvincia", domiciliacionDTO.getMunicipioDTO().getId().getCoProvincia()));
					criteria2.add(Restrictions.eq("municipioDTO.id.coMunicipio", domiciliacionDTO.getMunicipioDTO().getId().getCoMunicipio()));
					criteria2.add(Restrictions.eq("conceptoDTO.coConcepto", domiciliacionDTO.getConceptoDTO().getCoConcepto()));
					criteria2.add(Restrictions.eq("refObjTributario1", domiciliacionDTO.getRefObjTributario()));
					criteria2.add(Restrictions.eq("clienteDTO.coCliente", domiciliacionDTO.getClienteDTO().getCoCliente()));
					criteria2.add(Restrictions.eq("estado", "B"));
					criteria2.add(Restrictions.eq("refDomiciliacion", domiciliacionDTO.getRefDomiciliacion()));
					criteria2.add(Restrictions.eq("domiciliacionDTO.coDomiciliacion", domiciliacionDTO.getCoDomiciliacion()));
					criteria2.add(Restrictions.eq("situacionDTO.coSituacion", SituacionConstants.CO_SITUACION_PENDIENTE));
					criteria2.createAlias("documentoLiquidacionDTO", "dl");
					criteria2.add(Restrictions.eq("dl.estadoSituacionDTO.coEstadoSituacion", EstadoSituacionConstants.VOLUNTARIA));
					criteria2.add(Restrictions.eq("dl.modoCobroDTO.coModoCobro", ModoCobroConstants.DOMICILIACION));

					lista = documentoBO.findByCriteria(criteria2);

					for (DocumentoDTO documentoDTO : lista) {

						DocumentoLiquidacionDTO documentoLiquidacion = documentoDTO.getDocumentoLiquidacionDTO();

						DocumentoSeguimientoDTO documentoSeguimiento = new DocumentoSeguimientoDTO();
						documentoSeguimiento.setCoProceso("G7A1");
						documentoSeguimiento.setDocumentoDTO(documentoDTO);
						documentoSeguimiento.setEstadoSituacionDTOByCoEstadoSituacionOrigen(documentoLiquidacion.getEstadoSituacionDTO());
						documentoSeguimiento.setEstadoSituacionDTOByCoEstadoSituacionDestino(documentoLiquidacion.getEstadoSituacionDTO());
						documentoSeguimiento.setModoCobroDTOByCoModoCobroOrigen(documentoLiquidacion.getModoCobroDTO());
						documentoSeguimiento.setModoCobroDTOByCoModoCobroDestino(new ModoCobroDTO(ModoCobroConstants.PENDIENTE));
						documentoSeguimiento.setSituacionDTOByCoSituacionOrigen(documentoDTO.getSituacionDTO());
						documentoSeguimiento.setSituacionDTOByCoSituacionDestino(documentoDTO.getSituacionDTO());
						documentoSeguimiento.setIncidenciaDTO(new IncidenciaDTO(IncidenciaConstants.CO_INCIDENCIA_ANULACION_DOMICILIACION));
						//documentoSeguimiento.setObservaciones(observaciones);
						documentoSeguimientoBO.save(documentoSeguimiento);

						documentoLiquidacion.setModoCobroDTO(new ModoCobroDTO(ModoCobroConstants.PENDIENTE));
						documentoLiquidacionBO.save(documentoLiquidacion);

						documentoDTO.setDomiciliacionDTO(null);
						documentoDTO.setRefDomiciliacion(refdomCenso);
						//						if (cambioCenso){
						//							documentoDTO.setRefDomiciliacion(refdomCenso);
						//						}else{
						//							documentoDTO.setRefDomiciliacion(DomiciliacionUtil.generarRefdom());
						//						}
						documentoBO.save(documentoDTO);

					}

					if (cambioCenso) {
						//poner la nueva refdom del censo a los recibos no domiciliados con situacion ni pagado ni baja ni modo enviadobanco
						DetachedCriteria criteria3 = DetachedCriteria.forClass(DocumentoDTO.class);

						criteria3.add(Restrictions.eq("estado", "B"));
						criteria3.add(Restrictions.eq("refDomiciliacion", domiciliacionDTO.getRefDomiciliacion()));
						criteria3.add(Restrictions.eq("domiciliacionDTO", null));
						criteria3.add(Restrictions.not(Restrictions.in("situacionDTO.coSituacion", new String[] {SituacionConstants.CO_SITUACION_PAGADO, SituacionConstants.CO_SITUACION_BAJA})));
						criteria3.createAlias("documentoLiquidacionDTO", "dl");
						criteria3.add(Restrictions.ne("dl.modoCobroDTO.coModoCobro", ModoCobroConstants.ENVIADO_A_BANCO));

						lista = documentoBO.findByCriteria(criteria3);

						for (DocumentoDTO documentoDTO : lista) {
							documentoDTO.setRefDomiciliacion(refdomCenso);
							documentoBO.save(documentoDTO);
						}
					}

					if ("T".equals(domiciliacionDTO.getTipo())) {
						try {
							domiciliacionBO.delete(domiciliacionDTO.getCoDomiciliacion());
						} catch (Exception e) {
							domiciliacionDTO.setTipo("B");
							domiciliacionDTO.setRefDomiciliacion(null);
							domiciliacionDTO.setMotivo("Petición Subsede");
							domiciliacionDTO.setCoUsuarioActualizacion("subsede");
							domiciliacionDTO.setFhActualizacion(new Date());
							domiciliacionBO.save(domiciliacionDTO);
						}
					} else {
						domiciliacionDTO.setTipo("B");
						domiciliacionDTO.setRefDomiciliacion(null);
						domiciliacionDTO.setMotivo("Petición Subsede");
						domiciliacionDTO.setCoUsuarioActualizacion("subsede");
						domiciliacionDTO.setFhActualizacion(new Date());
						domiciliacionBO.save(domiciliacionDTO);
					}
				}
			}
		} catch (Exception e) {
			log.error("Error en webservice", e);
			codigoError = ERROR_DATOS;
		}

		return codigoError;
	}

	private List<Object> buscarDocumento(String municipio, String concepto, String cliente, String refObjTributario, String refDomiciliacion, String documento) {
		DocumentoDTO d = null;
		Boolean esCenso = false;

		try {
			if (!Utilidades.isEmpty(documento)) {
				String coModelo = documento.substring(0, 3);
				String coVersion = documento.substring(3, 4);
				String coDocumento = documento.substring(4);
				d = documentoBO.findById(new DocumentoDTOId(coModelo, coVersion, coDocumento));
			} else {
				final DetachedCriteria criteria = DetachedCriteria.forClass(DocumentoDTO.class);
				criteria.add(Restrictions.eq("clienteDTO.coCliente", Long.parseLong(cliente)));
				criteria.add(Restrictions.eq("estado", "B"));
				if ("ADO".equals(codigoProcedimiento))
					criteria.add(Restrictions.isNull("domiciliacionDTO"));
				else criteria.add(Restrictions.isNotNull("domiciliacionDTO"));
				criteria.add(Restrictions.like("id.coModelo", "1%"));

				if (!Utilidades.isEmpty(municipio)) {
					criteria.add(Restrictions.eq("municipioDTO.id.coProvincia", municipio.substring(0, 2)));
					criteria.add(Restrictions.eq("municipioDTO.id.coMunicipio", municipio.substring(2, 5)));
				}
				if (!Utilidades.isEmpty(concepto)) criteria.add(Restrictions.eq("conceptoDTO.coConcepto", concepto));

				if (!Utilidades.isEmpty(refObjTributario)) criteria.add(Restrictions.eq("refObjTributario1", refObjTributario).ignoreCase());

				criteria.add(Restrictions.isNotNull("refDomiciliacion"));
				if (!Utilidades.isEmpty(refDomiciliacion)) criteria.add(Restrictions.eq("refDomiciliacion", refDomiciliacion).ignoreCase());

				List<DocumentoDTO> lista = documentoBO.findByCriteria(criteria, 0, 1);

				if (lista != null && lista.size() > 0) {
					esCenso = true;
					d = lista.get(0);
				} else {
					esCenso = false;
					final DetachedCriteria criteria2 = DetachedCriteria.forClass(DocumentoDTO.class);
					criteria2.add(Restrictions.eq("clienteDTO.coCliente", Long.parseLong(cliente)));
					criteria2.add(Restrictions.eq("estado", "B"));

					if (!Utilidades.isEmpty(municipio)) {
						criteria2.add(Restrictions.eq("municipioDTO.id.coProvincia", municipio.substring(0, 2)));
						criteria2.add(Restrictions.eq("municipioDTO.id.coMunicipio", municipio.substring(2, 5)));
					}
					if (!Utilidades.isEmpty(concepto)) criteria2.add(Restrictions.eq("conceptoDTO.coConcepto", concepto));

					if (!Utilidades.isEmpty(refObjTributario)) criteria2.add(Restrictions.eq("refObjTributario1", refObjTributario).ignoreCase());

					if ("ADO".equals(codigoProcedimiento)) criteria2.add(Restrictions.isNull("domiciliacionDTO"));

					/*if(!Utilidades.isEmpty(refDomiciliacion))
						criteria.add(Restrictions.eq("refDomiciliacion", refDomiciliacion).ignoreCase());*/
					//criteria2.add(Restrictions.isNotNull("refDomiciliacion"));
					criteria2.addOrder(Order.desc("ejercicio"));
					criteria2.addOrder(Order.desc("fxDevengo"));
					//criteria2.add(Restrictions.isNotNull("documentoCensoDTO"));
					lista = documentoBO.findByCriteria(criteria2, 0, 1);
					d = lista.get(0);
				}
			}
		} catch (Exception e) {

		}

		List<Object> res = new ArrayList<Object>();
		res.add(d);
		res.add(esCenso);

		return res;
	}

	private List<DocumentoLiquidacionDTO> obtenerListaRecibos(ClienteDTO clienteDTO, MunicipioDTO municipioDTO, String concepto, String ejercicio, String estado, int maxResultados) {
		List<DocumentoLiquidacionDTO> listaRecibos = new ArrayList<DocumentoLiquidacionDTO>();

		try {
			DetachedCriteria criterioRecibos = DetachedCriteria.forClass(DocumentoLiquidacionDTO.class);
			criterioRecibos.createAlias("documentoDTO", "d", DetachedCriteria.LEFT_JOIN);
			criterioRecibos.add(Restrictions.eq("d.estado", "B"));
			criterioRecibos.add(Restrictions.like("d.codigoTerritorialDTO.coCodigoTerritorial", "RE%"));

			if (clienteDTO != null) criterioRecibos.add(Restrictions.eq("d.clienteDTO.coCliente", clienteDTO.getCoCliente()));
			if (municipioDTO != null) criterioRecibos.add(Restrictions.eq("d.municipioDTO.id", municipioDTO.getId()));
			if (!Utilidades.isEmpty(concepto) && !"****".equals(concepto)) criterioRecibos.add(Restrictions.eq("d.conceptoDTO.coConcepto", concepto));
			if (!Utilidades.isEmpty(ejercicio) && !"9999".equals(ejercicio)) criterioRecibos.add(Restrictions.eq("d.ejercicio", Short.parseShort(ejercicio)));
			if (!Utilidades.isEmpty(estado)) criterioRecibos.add(Restrictions.eq("d.situacionDTO.coSituacion", estado));

			if (maxResultados == 1)
				listaRecibos = documentoLiquidacionBO.findByCriteria(criterioRecibos, 0, 1);
			else {
				criterioRecibos.addOrder(Order.asc("d.conceptoDTO.coConcepto"));
				criterioRecibos.addOrder(Order.asc("d.ejercicio"));
				criterioRecibos.addOrder(Order.asc("d.periodo"));

				listaRecibos = documentoLiquidacionBO.findByCriteria(criterioRecibos);
			}
		} catch (GadirServiceException e) {
			return new ArrayList<DocumentoLiquidacionDTO>();
		}

		return listaRecibos;
	}

	private DetachedCriteria getCriterio(String coMunicipio, Long coCliente, String coIncidenciaParaMasivos, String coModoCobroDestino) {
		//		List<SituacionDTO> listaSituacionesParaMasivos = OpcionesIncidenciaSituacionUtil.getSituacionesOrigenByIncidencia(coMunicipio.substring(0, 2), coMunicipio.substring(2, 5), "***", "*", coIncidenciaParaMasivos);
		DetachedCriteria criterio = DetachedCriteria.forClass(DocumentoLiquidacionDTO.class, "dl");

		//		if(IncidenciaConstants.CO_INCIDENCIA_IMPRIMIR_DIPTICO.equals(coIncidenciaParaMasivos))
		//			criterio.add(Restrictions.like("dl.id.coModelo", "2%")); //TODO de momento no mostramos liquidaciones
		//		else
		criterio.add(Restrictions.or(Restrictions.like("dl.id.coModelo", "2%"), Restrictions.like("dl.id.coModelo", "4%")));
		criterio.createAlias("dl.documentoDTO", "d");
		criterio.add(Restrictions.like("d.codigoTerritorialDTO.coCodigoTerritorial", "RE%"));

		if (!Utilidades.isEmpty(coIncidenciaParaMasivos)) {
			//			if (!listaSituacionesParaMasivos.isEmpty()){
			//				criterio.add(Restrictions.in("d.situacionDTO", listaSituacionesParaMasivos));
			//			}else{

			DetachedCriteria otro = DetachedCriteria.forClass(IncidenciaSituacionDTO.class, "otro");

			otro.setProjection(Projections.property("otro.coIncidenciaSituacion"));

			//otro.createAlias("situacionDTOByCoSituacionOrigen", "os");
			//otro.createAlias("os.documentoDTOs", "od");

			if (IncidenciaConstants.CO_INCIDENCIA_IMPRIMIR_DIPTICO.equals(coIncidenciaParaMasivos))
				otro.add(Restrictions.in("otro.incidenciaDTO.coIncidencia", new String[] {coIncidenciaParaMasivos, IncidenciaConstants.CO_INCIDENCIA_IMPRIMIR_CARTA_PAGO_EJECUTIVA}));
			else otro.add(Restrictions.eq("otro.incidenciaDTO.coIncidencia", coIncidenciaParaMasivos));
			//if(IncidenciaConstants.CO_INCIDENCIA_PAGO_COMPENSACION.equalsIgnoreCase(coIncidenciaParaMasivos))
			if (!Utilidades.isEmpty(coModoCobroDestino)) otro.add(Restrictions.eq("otro.modoCobroDTOByCoModoCobroDestino.coModoCobro", coModoCobroDestino));

			otro.add(Restrictions.eqProperty("dl.modoCobroDTO.coModoCobro", "otro.modoCobroDTOByCoModoCobroOrigen.coModoCobro"));
			otro.add(Restrictions.eqProperty("dl.estadoSituacionDTO.coEstadoSituacion", "otro.estadoSituacionDTOByCoEstadoSituacionOrigen.coEstadoSituacion"));

			otro.add(Restrictions.eqProperty("d.situacionDTO.coSituacion", "otro.situacionDTOByCoSituacionOrigen.coSituacion"));
			otro.add(Restrictions.or(Restrictions.eqProperty("d.municipioDTO.id.coMunicipio", "otro.municipioDTO.id.coMunicipio"), Restrictions.eq("otro.municipioDTO.id.coMunicipio", "***")));
			otro.add(Restrictions.or(Restrictions.eqProperty("d.id.coModelo", "otro.modeloVersionDTO.id.coModelo"), Restrictions.eq("otro.modeloVersionDTO.id.coModelo", "***")));

			otro.add(Restrictions.eq("boSeleccionable", true));

			criterio.add(Subqueries.exists(otro));

			/*criterio.createAlias("d.situacionDTO", "s");
			criterio.createAlias("s.incidenciaSituacionDTOsForCoSituacionOrigen","i");
			criterio.add(
					Restrictions.and(
							Restrictions.eq("i.incidenciaDTO.coIncidencia", "040"),
							Restrictions.and(
									Restrictions.or(Restrictions.eqProperty("d.municipioDTO.id.coMunicipio", "i.municipioDTO.id.coMunicipio"), Restrictions.eq("i.municipioDTO.id.coMunicipio", "***")),
									Restrictions.or(Restrictions.eqProperty("id.coModelo", "i.modeloVersionDTO.id.coModelo"), Restrictions.eq("i.modeloVersionDTO.id.coModelo", "***"))
								)
							)
					);
			 */
			//			}

		}
		//Restrictions.or(Restrictions.eqProperty("d.municipioDTO.id.coMunicipio", "i.municipioDTO.id.coMunicipio"), Restrictions.eq("i.municipioDTO.id.coMunicipio", "***"))

		if (!Utilidades.isEmpty(coMunicipio)) {
			criterio.add(Restrictions.eq("d.municipioDTO.id.coProvincia", coMunicipio.substring(0, 2)));
			criterio.add(Restrictions.eq("d.municipioDTO.id.coMunicipio", coMunicipio.substring(2, 5)));
		}

		if (!Utilidades.isEmpty(coCliente)) {
			criterio.add(Restrictions.eq("d.clienteDTO.coCliente", coCliente));
		}

		//Solo documentos con estado = B
		criterio.add(Restrictions.eq("d.estado", "B"));

		return criterio;
	}

	private String obtenerCodigoBarras(String coModelo, String coVersion, String coDocumento, String coIncidencia) {
		String codigoBarras = "";

		DetachedCriteria criterio = DetachedCriteria.forClass(DocumentoSeguimientoDTO.class);
		DocumentoDTOId documentoDTOId = new DocumentoDTOId(coModelo, coVersion, coDocumento);

		criterio.add(Restrictions.eq("documentoDTO.id", documentoDTOId));
		criterio.add(Restrictions.eq("incidenciaDTO.coIncidencia", coIncidencia));
		criterio.addOrder(Order.desc("fhActualizacion"));

		try {
			List<DocumentoSeguimientoDTO> listaSeguimiento = documentoSeguimientoBO.findByCriteria(criterio);
			if (listaSeguimiento.size() > 0) codigoBarras = listaSeguimiento.get(0).getCodigoBarras();
		} catch (Exception e) {
			System.out.println("Error obteniendo código de barras");
			codigoBarras = "";
		}

		return codigoBarras;
	}

	private String obtenerValorCampos(Long coPlantilla, String[] listaEtiquetas, String numeroRecibo) {
		String res = "";

		for (int i = 0; i < listaEtiquetas.length; i++) {
			try {
				List<PlantillaEtiquetaCampoDTO> camposDTO = plantillaEtiquetaCampoBO.findFiltered(new String[] {"id.coPlantilla", "id.coEtiqueta"}, new Object[] {coPlantilla, listaEtiquetas[i]},
																									"id.orden", DAOConstant.ASC_ORDER);
				String valorEtiqueta = "";
				for (PlantillaEtiquetaCampoDTO campoDTO : camposDTO) {
					switch (campoDTO.getTipo().charAt(0)) {
						case 'K':
							if (!Utilidades.isEmpty(campoDTO.getValor()) && !"null".equalsIgnoreCase(campoDTO.getValor())) valorEtiqueta += campoDTO.getValor();
							break;
						case 'D':
							String datoCorporativo = campoDTO.getValor();
							String argumento = campoDTO.getValorAdicional();
							FuncionDTO funcion = funcionBO.findById(datoCorporativo);
							if (funcion != null) {
								ParametrosDatoCorporativoVO paramsVO = new ParametrosDatoCorporativoVO();

								paramsVO.setCoModelo(campoDTO.getModeloAdicional());
								paramsVO.setCoVersion(campoDTO.getVersionAdicional());
								paramsVO.setCoDocumento(numeroRecibo.substring(4, 13));
								valorEtiqueta += FuncionPlsqlUtil.datoCorporativo(funcion.getCoPlsql(), Integer.parseInt(argumento), paramsVO);
							}
							break;
						case 'S':
							String coModeloAdicional = campoDTO.getModeloAdicional();
							String coVersionAdicional = campoDTO.getVersionAdicional();
							String nuCasilla = campoDTO.getValor();
							CasillaModeloDTO casilla = casillaModeloBO.findById(new CasillaModeloDTOId(coModeloAdicional, coVersionAdicional, Short.parseShort(nuCasilla)));
							if (casilla != null) {
								short hoja = 1;
								if (!Utilidades.isEmpty(campoDTO.getValorAdicional())) hoja = Short.parseShort(campoDTO.getValorAdicional());
								DocumentoCasillaValorDTO casillaValor = documentoCasillaValorBO.findById(new DocumentoCasillaValorDTOId(coModeloAdicional, coVersionAdicional, numeroRecibo
										.substring(4, 13), Short.parseShort(nuCasilla), hoja));
								if (casillaValor != null) valorEtiqueta += casillaValor.getValor();
							}
							break;
					}
				}

				if (i == 0)
					res += valorEtiqueta;
				else res += "#" + valorEtiqueta;
			} catch (Exception e) {
				System.out.println("Error obteniendo valor de etiqueta " + listaEtiquetas[i]);
			}
		}

		return res;
	}

	public String getParametro() {
		return parametro;
	}

	public void setParametro(String parametro) {
		this.parametro = parametro;
	}

	public String getXmlPeticion() {
		return xmlPeticion;
	}

	public void setXmlPeticion(String xmlPeticion) {
		this.xmlPeticion = xmlPeticion;
	}

	public String getXmlRespuesta() {
		return xmlRespuesta;
	}

	public void setXmlRespuesta(String xmlRespuesta) {
		this.xmlRespuesta = xmlRespuesta;
	}

	public ClienteBO getClienteBO() {
		return clienteBO;
	}

	public void setClienteBO(ClienteBO clienteBO) {
		this.clienteBO = clienteBO;
	}

	public DomicilioBO getDomicilioBO() {
		return domicilioBO;
	}

	public void setDomicilioBO(DomicilioBO domicilioBO) {
		this.domicilioBO = domicilioBO;
	}

	public DomicilioNotificacionBO getDomicilioNotificacionBO() {
		return domicilioNotificacionBO;
	}

	public void setDomicilioNotificacionBO(DomicilioNotificacionBO domicilioNotificacionBO) {
		this.domicilioNotificacionBO = domicilioNotificacionBO;
	}

	public UnidadUrbanaBO getUnidadUrbanaBO() {
		return unidadUrbanaBO;
	}

	public void setUnidadUrbanaBO(UnidadUrbanaBO unidadUrbanaBO) {
		this.unidadUrbanaBO = unidadUrbanaBO;
	}

	public CalleBO getCalleBO() {
		return calleBO;
	}

	public void setCalleBO(CalleBO calleBO) {
		this.calleBO = calleBO;
	}

	public MunicipioBO getMunicipioBO() {
		return municipioBO;
	}

	public void setMunicipioBO(MunicipioBO municipioBO) {
		this.municipioBO = municipioBO;
	}

	public ConceptoBO getConceptoBO() {
		return conceptoBO;
	}

	public void setConceptoBO(ConceptoBO conceptoBO) {
		this.conceptoBO = conceptoBO;
	}

	public DocumentoCensoBO getDocumentoCensoBO() {
		return documentoCensoBO;
	}

	public void setDocumentoCensoBO(DocumentoCensoBO documentoCensoBO) {
		this.documentoCensoBO = documentoCensoBO;
	}

	public DocumentoBO getDocumentoBO() {
		return documentoBO;
	}

	public void setDocumentoBO(DocumentoBO documentoBO) {
		this.documentoBO = documentoBO;
	}

	public GenericBO<BonificacionDTO, Long> getBonificacionBO() {
		return bonificacionBO;
	}

	public void setBonificacionBO(GenericBO<BonificacionDTO, Long> bonificacionBO) {
		this.bonificacionBO = bonificacionBO;
	}

	public void setCalleUbicacionBO(CalleUbicacionBO calleUbicacionBO) {
		this.calleUbicacionBO = calleUbicacionBO;
	}

	public CalleUbicacionBO getCalleUbicacionBO() {
		return calleUbicacionBO;
	}

	public ProvinciaBO getProvinciaBO() {
		return provinciaBO;
	}

	public void setProvinciaBO(ProvinciaBO provinciaBO) {
		this.provinciaBO = provinciaBO;
	}

	public ModeloVersionBO getModeloVersionBO() {
		return modeloVersionBO;
	}

	public void setModeloVersionBO(ModeloVersionBO modeloVersionBO) {
		this.modeloVersionBO = modeloVersionBO;
	}

	public ComprobarDomicilioBO getComprobarDomicilioBO() {
		return comprobarDomicilioBO;
	}

	public void setComprobarDomicilioBO(ComprobarDomicilioBO comprobarDomicilioBO) {
		this.comprobarDomicilioBO = comprobarDomicilioBO;
	}

	public AcercaPeticionBO getAcercaPeticionBO() {
		return acercaPeticionBO;
	}

	public void setAcercaPeticionBO(AcercaPeticionBO acercaPeticionBO) {
		this.acercaPeticionBO = acercaPeticionBO;
	}

	public DocumentoLiquidacionBO getDocumentoLiquidacionBO() {
		return documentoLiquidacionBO;
	}

	public void setDocumentoLiquidacionBO(DocumentoLiquidacionBO documentoLiquidacionBO) {
		this.documentoLiquidacionBO = documentoLiquidacionBO;
	}

	public DomiciliacionBO getDomiciliacionBO() {
		return domiciliacionBO;
	}

	public void setDomiciliacionBO(DomiciliacionBO domiciliacionBO) {
		this.domiciliacionBO = domiciliacionBO;
	}

	public ClienteCuentaBO getClienteCuentaBO() {
		return clienteCuentaBO;
	}

	public void setClienteCuentaBO(ClienteCuentaBO clienteCuentaBO) {
		this.clienteCuentaBO = clienteCuentaBO;
	}

	public ComprobarCuentaClienteBO getComprobarCuentaClienteBO() {
		return comprobarCuentaClienteBO;
	}

	public void setComprobarCuentaClienteBO(ComprobarCuentaClienteBO comprobarCuentaClienteBO) {
		this.comprobarCuentaClienteBO = comprobarCuentaClienteBO;
	}

	public CuentaBO getCuentaBO() {
		return cuentaBO;
	}

	public void setCuentaBO(CuentaBO cuentaBO) {
		this.cuentaBO = cuentaBO;
	}

	public CargoSubcargoSeguimientoBO getCargoSubcargoSeguimientoBO() {
		return cargoSubcargoSeguimientoBO;
	}

	public void setCargoSubcargoSeguimientoBO(CargoSubcargoSeguimientoBO cargoSubcargoSeguimientoBO) {
		this.cargoSubcargoSeguimientoBO = cargoSubcargoSeguimientoBO;
	}

	public DocumentoSeguimientoBO getDocumentoSeguimientoBO() {
		return documentoSeguimientoBO;
	}

	public void setDocumentoSeguimientoBO(DocumentoSeguimientoBO documentoSeguimientoBO) {
		this.documentoSeguimientoBO = documentoSeguimientoBO;
	}

	public SituacionBO getSituacionBO() {
		return situacionBO;
	}

	public void setSituacionBO(SituacionBO situacionBO) {
		this.situacionBO = situacionBO;
	}

	public PlantillaBO getPlantillaBO() {
		return plantillaBO;
	}

	public void setPlantillaBO(PlantillaBO plantillaBO) {
		this.plantillaBO = plantillaBO;
	}

	public PlantillaEtiquetaCampoBO getPlantillaEtiquetaCampoBO() {
		return plantillaEtiquetaCampoBO;
	}

	public void setPlantillaEtiquetaCampoBO(PlantillaEtiquetaCampoBO plantillaEtiquetaCampoBO) {
		this.plantillaEtiquetaCampoBO = plantillaEtiquetaCampoBO;
	}

	public ProcesoAccionBO getProcesoAccionBO() {
		return procesoAccionBO;
	}

	public void setProcesoAccionBO(ProcesoAccionBO procesoAccionBO) {
		this.procesoAccionBO = procesoAccionBO;
	}

	public CasillaModeloBO getCasillaModeloBO() {
		return casillaModeloBO;
	}

	public void setCasillaModeloBO(CasillaModeloBO casillaModeloBO) {
		this.casillaModeloBO = casillaModeloBO;
	}

	public DocumentoCasillaValorBO getDocumentoCasillaValorBO() {
		return documentoCasillaValorBO;
	}

	public void setDocumentoCasillaValorBO(DocumentoCasillaValorBO documentoCasillaValorBO) {
		this.documentoCasillaValorBO = documentoCasillaValorBO;
	}

	public FuncionBO getFuncionBO() {
		return funcionBO;
	}

	public void setFuncionBO(FuncionBO funcionBO) {
		this.funcionBO = funcionBO;
	}

	public void setClienteRepresentanteBO(ClienteRepresentanteBO clienteRepresentanteBO) {
		this.clienteRepresentanteBO = clienteRepresentanteBO;
	}

	public ClienteRepresentanteBO getClienteRepresentanteBO() {
		return clienteRepresentanteBO;
	}

	public GenericBO<CircuitoDTO, String> getCircuitoBO() {
		return circuitoBO;
	}

	public void setCircuitoBO(GenericBO<CircuitoDTO, String> circuitoBO) {
		this.circuitoBO = circuitoBO;
	}

}
